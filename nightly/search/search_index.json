{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amplitude Audio SDK","text":"<p>Welcome to the official Amplitude Audio SDK documentation.</p> <ul> <li> <p> Getting Started</p> <p>C++ SDK features, basic concepts and installation process overview.</p> <p> Getting started</p> </li> <li> <p> Integration</p> <p>C++ SDK step-by-step usage and integration guide in your projects.</p> <p> Engine Integration</p> </li> <li> <p> Project Reference</p> <p>Detailed reference documentation and usage guides for Amplitude projects.</p> <p> Project Reference</p> </li> <li> <p> API Reference</p> <p>C++ SDK public API reference and documentation.</p> <p> API Reference</p> </li> <li> <p> Tutorials</p> <p>C++ SDK use case guides and implementation tutorials.</p> <p> Tutorials</p> </li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Amplitude Audio SDK public API reference and documentation.</p> Core Core functionalities of the SDK Engine Engine-specific functionalities Assets Assets API IO Input/Output API Math Math libraries and utilities Memory Memory management and allocation DSP Digital Signal Processing (DSP) API Mixer Mixer &amp; Pipeline API"},{"location":"api/#macros","title":"Macros","text":"Name Description AM_ID_CHAR_FMT Defines the format used to print AmObjectId value AM_STRING_EXPAND Turn X into a string literal. AM_ID_CHAR_FMT Defines the format used to print AmObjectId value AM_LIB_EXPORT Call policy AM_OS_CHAR_FMT Defines the format used to print AmOsString text AM_OS_STRING Macro used to convert a string literal to an AmOsString string at compile-time AM_OS_STRING_TO_STRING Conversion between OS strings and default strings AM_ID_CHAR_FMT Defines the format used to print AmObjectId value M_PI Define the value of Pi if the platform doesn't do that AM_MAX_THREAD_POOL_TASKS Maximum number of tasks in a single pool"},{"location":"api/#macro-details","title":"Macro Details","text":""},{"location":"api/#am_id_char_fmt","title":"AM_ID_CHAR_FMT","text":"<p>#define AM_ID_CHAR_FMT</p> <p>Defines the format used to print AmObjectId value</p>"},{"location":"api/#am_id_char_fmt_1","title":"AM_ID_CHAR_FMT","text":"<p>#define AM_ID_CHAR_FMT</p> <p>Defines the format used to print AmObjectId value</p>"},{"location":"api/#am_id_char_fmt_2","title":"AM_ID_CHAR_FMT","text":"<p>#define AM_ID_CHAR_FMT</p> <p>Defines the format used to print AmObjectId value</p>"},{"location":"api/#am_lib_export","title":"AM_LIB_EXPORT","text":"<p>#define AM_LIB_EXPORT</p> <p>Call policy</p>"},{"location":"api/#am_max_thread_pool_tasks","title":"AM_MAX_THREAD_POOL_TASKS","text":"<p>#define AM_MAX_THREAD_POOL_TASKS</p> <p>Maximum number of tasks in a single pool</p>"},{"location":"api/#am_os_char_fmt","title":"AM_OS_CHAR_FMT","text":"<p>#define AM_OS_CHAR_FMT</p> <p>Defines the format used to print AmOsString text</p>"},{"location":"api/#am_os_string","title":"AM_OS_STRING","text":"<p>#define AM_OS_STRING(s)</p> <p>Macro used to convert a string literal to an AmOsString string at compile-time</p>"},{"location":"api/#am_os_string_to_string","title":"AM_OS_STRING_TO_STRING","text":"<p>#define AM_OS_STRING_TO_STRING(s)</p> <p>Conversion between OS strings and default strings</p>"},{"location":"api/#am_string_expand","title":"AM_STRING_EXPAND","text":"<p>#define AM_STRING_EXPAND(X)</p> <p>Turn X into a string literal.</p> Parameter <code>x</code> The value to transform into a string literal"},{"location":"api/#m_pi","title":"M_PI","text":"<p>#define M_PI</p> <p>Define the value of Pi if the platform doesn't do that</p>"},{"location":"api/assets/","title":"Assets","text":"<p>Assets API</p>"},{"location":"api/assets/#types","title":"Types","text":"Name Description Asset Amplitude Asset. Attenuation Amplitude Attenuation Asset. Collection Amplitude Collection Asset. Effect Amplitude Effect Asset. Event Amplitude Event Asset. Rtpc Amplitude Real-Time Parameter Control Asset. Sound Amplitude Sound Asset. SoundBank Amplitude Sound Bank Asset. Switch Amplitude Switch Asset. SwitchContainer Amplitude Switch Container Asset."},{"location":"api/assets/Asset/","title":"Asset","text":"<p>template&lt;typename Id&gt; class  Asset</p> <p>Amplitude Asset.</p> <p>This is the base class for all Amplitude assets. An Amplitude asset is a <code>.json</code> file with a specific format (definition) specified by the corresponding asset's flatbuffer schema.</p> Template parameter <code>Id</code> The type of the asset id."},{"location":"api/assets/Asset/#functions","title":"Functions","text":"Name Description ~Asset Destroys the asset and all related resources. GetId Returns the unique ID of this asset. GetName Gets the name of this asset."},{"location":"api/assets/Asset/#function-details","title":"Function Details","text":""},{"location":"api/assets/Asset/#getid","title":"GetId","text":"<p>[[nodiscard]] virtual Id GetId() const = 0</p> <p>Returns the unique ID of this asset.</p> Return The asset unique ID."},{"location":"api/assets/Asset/#getname","title":"GetName","text":"<p>[[nodiscard]] virtual const AmString&amp; GetName() const = 0</p> <p>Gets the name of this asset.</p> Return The asset name."},{"location":"api/assets/Asset/#asset_1","title":"~Asset","text":"<p>virtual ~Asset() = default</p> <p>Destroys the asset and all related resources.</p>"},{"location":"api/assets/Attenuation/","title":"Attenuation","text":"<p>class  Attenuation : public Asset&lt;AmAttenuationID&gt;</p> <p>Amplitude Attenuation Asset.</p> <p>An <code>Attenuation</code> materializes how the sound volume and other distance-based parameters are calculated following the distance of the sound source to the listener.</p> <p>The <code>Attenuation</code> is a shared object between sound sources. They are used only when the sound need to adjust its volume due to the distance of from the listener, and many other parameters.</p>"},{"location":"api/assets/Attenuation/#functions","title":"Functions","text":"Name Description GetGain Returns the gain of the sound from the given distance to the listener. GetGain Returns the gain of the sound from the given distance to the listener. GetShape Returns the shape object of this Attenuation. GetGainCurve Returns the gain curve attached to this Attenuation. GetMaxDistance Returns the maximum distance for a fully attenuated sound IsAirAbsorptionEnabled Returns whether air absorption is enabled for this Attenuation. EvaluateAirAbsorption Evaluates the air absorption effect for a specific frequency band."},{"location":"api/assets/Attenuation/#function-details","title":"Function Details","text":""},{"location":"api/assets/Attenuation/#evaluateairabsorption","title":"EvaluateAirAbsorption","text":"<p>[[nodiscard]] virtual AmReal32 EvaluateAirAbsorption( const AmVec3&amp; soundLocation, const AmVec3&amp; listenerLocation, AmUInt32 band) const = 0</p> <p>Evaluates the air absorption effect for a specific frequency band.</p> <p>This method calculates the attenuation factor due to air absorption at a given frequency band for a sound source located at a specific position and a listener located at another specific position.</p> Parameter <code>soundLocation</code> The location of the sound source. Parameter <code>listenerLocation</code> The location of the listener which is hearing the sound. Parameter <code>band</code> The frequency band for which the air absorption effect is evaluated. Return The air absorption attenuation factor in decibels (dB) for the given frequency band."},{"location":"api/assets/Attenuation/#getgain","title":"GetGain","text":"<p>[[nodiscard]] virtual AmReal32 GetGain(const AmVec3&amp; soundLocation, const Listener&amp; listener) const = 0</p> <p>Returns the gain of the sound from the given distance to the listener.</p> Parameter <code>soundLocation</code> The location of the sound source. Parameter <code>listener</code> The listener which is hearing the sound. Return The computed gain value fom the curve. <p>[[nodiscard]] virtual AmReal32 GetGain(const Entity&amp; entity, const Listener&amp; listener) const = 0</p> <p>Returns the gain of the sound from the given distance to the listener.</p> Parameter <code>entity</code> The entity which emits the sound. Parameter <code>listener</code> The listener which is hearing the sound. Return The computed gain value fom the curve."},{"location":"api/assets/Attenuation/#getgaincurve","title":"GetGainCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetGainCurve() const = 0</p> <p>Returns the gain curve attached to this Attenuation.</p> Return The attenuation's gain curve."},{"location":"api/assets/Attenuation/#getmaxdistance","title":"GetMaxDistance","text":"<p>[[nodiscard]] virtual AmReal64 GetMaxDistance() const = 0</p> <p>Returns the maximum distance for a fully attenuated sound</p> Return The maximum sound attenuation distance."},{"location":"api/assets/Attenuation/#getshape","title":"GetShape","text":"<p>* GetShape() const</p> <p>Returns the shape object of this Attenuation.</p> Return The Attenuation shape."},{"location":"api/assets/Attenuation/#isairabsorptionenabled","title":"IsAirAbsorptionEnabled","text":"<p>[[nodiscard]] virtual bool IsAirAbsorptionEnabled() const = 0</p> <p>Returns whether air absorption is enabled for this Attenuation.</p> Return <code>true</code> if air absorption is enabled, <code>false</code> otherwise."},{"location":"api/assets/Collection/","title":"Collection","text":"<p>class  Collection : public SoundObject , public Asset&lt;AmCollectionID&gt;</p> <p>Amplitude Collection Asset.</p> <p>A <code>Collection</code> is a container sound object that group multiple sounds over the same name. Only one sound can be playing at a time in the same collection, and the sound picked for playback is chosen by the collection's <code>Scheduler</code>.</p> See SoundObject"},{"location":"api/assets/Collection/#functions","title":"Functions","text":"Name Description SelectFromWorld Returns a Sound from this collection from the World scope. SelectFromEntity Returns a Sound from this collection from an Entity scope. ResetEntityScopeScheduler Resets the internal state of the scheduler running for the given Entity. ResetWorldScopeScheduler Resets the internal state of the scheduler running for the World. GetSounds Returns the list of Sound objects referenced in this collection."},{"location":"api/assets/Collection/#function-details","title":"Function Details","text":""},{"location":"api/assets/Collection/#getsounds","title":"GetSounds","text":"<p>[[nodiscard]] virtual const std::vector&lt;AmSoundID&gt;&amp; GetSounds() const = 0</p> <p>Returns the list of Sound objects referenced in this collection.</p> Return The list of Sound IDs."},{"location":"api/assets/Collection/#resetentityscopescheduler","title":"ResetEntityScopeScheduler","text":"<p>virtual void ResetEntityScopeScheduler(const Entity&amp; entity) = 0</p> <p>Resets the internal state of the scheduler running for the given Entity.</p> Parameter <code>entity</code> The entity for which reset the scheduler state."},{"location":"api/assets/Collection/#resetworldscopescheduler","title":"ResetWorldScopeScheduler","text":"<p>virtual void ResetWorldScopeScheduler() = 0</p> <p>Resets the internal state of the scheduler running for the World.</p>"},{"location":"api/assets/Collection/#selectfromentity","title":"SelectFromEntity","text":"<p>* SelectFromEntity(const Entity&amp; entity, const std::vector&lt;AmSoundID&gt;&amp; toSkip)</p> <p>Returns a Sound from this collection from an Entity scope.</p> Parameter <code>entity</code> The entity from which pick the sound. Parameter <code>toSkip</code> The list of Sound IDs to skip fom the selection. Return The selected Sound."},{"location":"api/assets/Collection/#selectfromworld","title":"SelectFromWorld","text":"<p>* SelectFromWorld(const std::vector&lt;AmSoundID&gt;&amp; toSkip) const</p> <p>Returns a Sound from this collection from the World scope.</p> Parameter <code>toSkip</code> The list of Sound IDs to skip fom the selection. Return The selected Sound."},{"location":"api/assets/Effect/","title":"Effect","text":"<p>class  Effect : public Asset&lt;AmEffectID&gt;</p> <p>Amplitude Effect Asset.</p> <p>An effect is a sound filter applied to one or more sound objects (sounds, collections, or switch containers) during playback.</p> <p>Effects are customized using parameters and each parameters can be updated at runtime using a <code>Rtpc</code>.</p> See Rtpc, EffectInstance"},{"location":"api/assets/Effect/#functions","title":"Functions","text":"Name Description Update Updates the effect parameters on each frames. CreateInstance Creates an instance of this effect. DestroyInstance Destroys an instance of this effect."},{"location":"api/assets/Effect/#function-details","title":"Function Details","text":""},{"location":"api/assets/Effect/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance() const</p> <p>Creates an instance of this effect.</p> Return The effect instance."},{"location":"api/assets/Effect/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(EffectInstance* instance) const = 0</p> <p>Destroys an instance of this effect.</p> Parameter <code>instance</code> The effect instance to delete."},{"location":"api/assets/Effect/#update","title":"Update","text":"<p>virtual void Update() = 0</p> <p>Updates the effect parameters on each frames.</p>"},{"location":"api/assets/Event/","title":"Event","text":"<p>class  Event : public Asset&lt;AmEventID&gt;</p> <p>Amplitude Event Asset.</p> <p>An event is used to apply a set of actions (synchronously or asynchronously) at a given time in the game.</p> <p>This <code>Event</code> class is only referenced through an <code>EventCanceler</code> object and it is managed by the <code>Engine</code>. Events can be triggered at runtime by using the <code>Trigger()</code> method of the <code>Engine</code> instance: <pre><code>amEngine-&gt;Trigger(\"an_event_name\"); // You can also use the event ID, or its handle.\n</code></pre></p>"},{"location":"api/assets/Rtpc/","title":"Rtpc","text":"<p>class  Rtpc : public Asset&lt;AmRtpcID&gt;</p> <p>Amplitude Real-Time Parameter Control Asset.</p> <p>A RTPC is a value that is updated by the game. Any update to the RTPC is listened by the engine to propagate the changes to other parameters linked to it.</p> <p>A Rtpc object is shared between any objects and values linked to it.</p>"},{"location":"api/assets/Rtpc/#functions","title":"Functions","text":"Name Description Update Updates the value of the RTPC. GetMinValue Gets the minimum value of this RTPC. GetMaxValue Gets the maximum value of this RTPC. GetValue Gets the current value of this RTPC. SetValue Sets the current value of this RTPC. GetDefaultValue Gets the default value of this RTPC. Reset Resets the current RTPC value to the default value."},{"location":"api/assets/Rtpc/#function-details","title":"Function Details","text":""},{"location":"api/assets/Rtpc/#getdefaultvalue","title":"GetDefaultValue","text":"<p>[[nodiscard]] virtual AmReal64 GetDefaultValue() const = 0</p> <p>Gets the default value of this RTPC.</p> Return The default RTPC value."},{"location":"api/assets/Rtpc/#getmaxvalue","title":"GetMaxValue","text":"<p>[[nodiscard]] virtual AmReal64 GetMaxValue() const = 0</p> <p>Gets the maximum value of this RTPC.</p> Return The RTPC maximum value."},{"location":"api/assets/Rtpc/#getminvalue","title":"GetMinValue","text":"<p>[[nodiscard]] virtual AmReal64 GetMinValue() const = 0</p> <p>Gets the minimum value of this RTPC.</p> Return The RTPC minimum value."},{"location":"api/assets/Rtpc/#getvalue","title":"GetValue","text":"<p>[[nodiscard]] virtual AmReal64 GetValue() const = 0</p> <p>Gets the current value of this RTPC.</p> Return The current RTPC value."},{"location":"api/assets/Rtpc/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the current RTPC value to the default value.</p>"},{"location":"api/assets/Rtpc/#setvalue","title":"SetValue","text":"<p>virtual void SetValue(AmReal64 value) = 0</p> <p>Sets the current value of this RTPC.</p> Parameter <code>value</code> The value to set."},{"location":"api/assets/Rtpc/#update","title":"Update","text":"<p>virtual void Update(AmTime deltaTime) = 0</p> <p>Updates the value of the RTPC.</p> <p>This method is useful only for RTPCs that are using a curve to update their value.</p> Parameter <code>deltaTime</code> The time elapsed since the last update."},{"location":"api/assets/Sound/","title":"Sound","text":"<p>class  Sound : public SoundObject , public Resource , public Asset&lt;AmSoundID&gt;</p> <p>Amplitude Sound Asset.</p> <p>A <code>Sound</code> is the most basic sound object in Amplitude. It can be used to directly play an audio file, or can be contained in a <code>SwitchContainer</code> or a <code>Collection</code> for a fine-grained control.</p> <p>Effects can be attached to a <code>Sound</code>, which will be applied to all instances of the sound in the Amplimix pipeline.</p> See SwitchContainer, Collection, SoundObject"},{"location":"api/assets/Sound/#functions","title":"Functions","text":"Name Description IsStream Checks streaming is enabled for this Sound. IsLoop Checks if looping is enabled for this Sound. GetNearFieldGain Gets the near field effect gain of the sound object."},{"location":"api/assets/Sound/#function-details","title":"Function Details","text":""},{"location":"api/assets/Sound/#getnearfieldgain","title":"GetNearFieldGain","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetNearFieldGain() const = 0</p> <p>Gets the near field effect gain of the sound object.</p> Return The sound object near field effect gain."},{"location":"api/assets/Sound/#isloop","title":"IsLoop","text":"<p>[[nodiscard]] virtual bool IsLoop() const = 0</p> <p>Checks if looping is enabled for this Sound.</p> Return <code>true</code> if looping is enabled, <code>false</code> otherwise."},{"location":"api/assets/Sound/#isstream","title":"IsStream","text":"<p>[[nodiscard]] virtual bool IsStream() const = 0</p> <p>Checks streaming is enabled for this Sound.</p> Return <code>true</code> if streaming is enabled, <code>false</code> otherwise."},{"location":"api/assets/SoundBank/","title":"SoundBank","text":"<p>class  SoundBank</p> <p>Amplitude Sound Bank Asset.</p> <p>A Sound Bank is a group of Amplitude assets, registered in a single binary. This way allows you to pack the needed data for your game as you want (ie. sound banks per levels). A sound bank need to be loaded by the Engine using <code>Engine::LoadSoundBank()</code> before to play sounds and trigger events inside it. When the sound bank data should be released (ie. changing the level, closing the game, etc.), you need to unload the sound bank using <code>Engine::UnloadSoundBank()</code>.</p>"},{"location":"api/assets/SoundBank/#functions","title":"Functions","text":"Name Description SoundBank Creates an uninitialized <code>SoundBank</code>. SoundBank Creates a sound bank from the given source file. Initialize Initializes the sound bank by loading all the packed data. InitializeFromMemory Initializes the sound bank by loading all the packed data. Deinitialize Unloads the sound bank from the Engine. GetId Returns the unique ID of this SoundBank. GetName Returns the name of this SoundBank. GetSoundBankDefinition Returns the definition data used to initialize this SoundBank. GetRefCounter Gets the references counter of this instance. LoadSoundFiles Load the sound files referenced in the sound bank."},{"location":"api/assets/SoundBank/#function-details","title":"Function Details","text":""},{"location":"api/assets/SoundBank/#deinitialize","title":"Deinitialize","text":"<p>void Deinitialize(Engine* engine)</p> <p>Unloads the sound bank from the Engine.</p> Parameter <code>engine</code> The engine instance from which unload the sound bank."},{"location":"api/assets/SoundBank/#getid","title":"GetId","text":"<p>[[nodiscard]] AmBankID GetId() const</p> <p>Returns the unique ID of this SoundBank.</p> Return The SoundBank unique ID."},{"location":"api/assets/SoundBank/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Returns the name of this SoundBank.</p> Return The SoundBank name."},{"location":"api/assets/SoundBank/#getrefcounter","title":"GetRefCounter","text":"<p>RefCounter* GetRefCounter()</p> <p>Gets the references counter of this instance.</p> Return The references counter."},{"location":"api/assets/SoundBank/#getsoundbankdefinition","title":"GetSoundBankDefinition","text":"<p>[[nodiscard]] const SoundBankDefinition* GetSoundBankDefinition() const</p> <p>Returns the definition data used to initialize this SoundBank.</p> Return The sound bank definition data."},{"location":"api/assets/SoundBank/#initialize","title":"Initialize","text":"<p>bool Initialize(const AmOsString&amp; filename, Engine* engine)</p> <p>Initializes the sound bank by loading all the packed data.</p> Parameter <code>filename</code> The path to the sound bank file. Parameter <code>engine</code> The engine instance in which load the sound bank. Return <code>true</code> when the operation succeeds, <code>false</code> otherwise."},{"location":"api/assets/SoundBank/#initializefrommemory","title":"InitializeFromMemory","text":"<p>bool InitializeFromMemory(const char* fileData, Engine* engine)</p> <p>Initializes the sound bank by loading all the packed data.</p> Parameter <code>fileData</code> The sound bank file content. Parameter <code>engine</code> The engine instance in which load the sound bank. Return <code>true</code> when the operation succeeds, <code>false</code> otherwise."},{"location":"api/assets/SoundBank/#loadsoundfiles","title":"LoadSoundFiles","text":"<p>void LoadSoundFiles(const Engine* engine)</p> <p>Load the sound files referenced in the sound bank.</p> Parameter <code>engine</code> The engine instance from which load the sound files. <p>Warning</p> <p>This method should not be called directly. It is called automatically by the <code>Engine</code> with the <code>Engine::StartLoadSoundFiles()</code> method.</p>"},{"location":"api/assets/SoundBank/#soundbank_1","title":"SoundBank","text":"<p>SoundBank()</p> <p>Creates an uninitialized <code>SoundBank</code>.</p> <p>explicit SoundBank(const AmString&amp; source)</p> <p>Creates a sound bank from the given source file.</p> <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/assets/Switch/","title":"Switch","text":"<p>class  Switch : public Asset&lt;AmSwitchID&gt;</p> <p>Amplitude Switch Asset.</p> <p>A switch is a collection of states which can change the sounds played from a <code>SwitchContainer</code>.</p> <p>For example, you can have a switch named <code>SurfaceType</code> which have <code>wood</code>, <code>grass</code>, <code>metal</code> and <code>water</code> as states. A <code>SwitchContainer</code> using this switch can group sounds per switch states, so when a state is active, all the sounds of that state are played. Changing the state of a <code>Switch</code> will update ALL the <code>SwitchContainer</code> objects that use this <code>Switch</code>.</p> <p>The <code>Switch</code> is a shared object between sound sources. They are used only by <code>SwitchContainer</code> objects.</p> See SwitchState, SwitchContainer"},{"location":"api/assets/Switch/#functions","title":"Functions","text":"Name Description GetState Gets the current state of the switch. SetState Sets the current state of the switch. SetState Sets the current state of the switch using the state ID. SetState Sets the current state of the switch using the state name. GetSwitchStates Gets the list of available SwitchStates in this Switch."},{"location":"api/assets/Switch/#function-details","title":"Function Details","text":""},{"location":"api/assets/Switch/#getstate","title":"GetState","text":"<p>[[nodiscard]] virtual const SwitchState&amp; GetState() const = 0</p> <p>Gets the current state of the switch.</p> Return The current state of the switch."},{"location":"api/assets/Switch/#getswitchstates","title":"GetSwitchStates","text":"<p>[[nodiscard]] virtual const std::vector&lt;SwitchState&gt;&amp; GetSwitchStates() const = 0</p> <p>Gets the list of available SwitchStates in this Switch.</p> Return The list of available SwitchStates."},{"location":"api/assets/Switch/#setstate","title":"SetState","text":"<p>virtual void SetState(const SwitchState&amp; state) = 0</p> <p>Sets the current state of the switch.</p> <p>Note</p> <p>Changing the state of a <code>Switch</code> will update ALL the <code>SwitchContainer</code> objects that use this <code>Switch</code>.</p> Parameter <code>state</code> The state to apply to the switch. <p>virtual void SetState(AmObjectID id) = 0</p> <p>Sets the current state of the switch using the state ID.</p> <p>Note</p> <p>Changing the state of a <code>Switch</code> will update ALL the <code>SwitchContainer</code> objects that use this <code>Switch</code>.</p> Parameter <code>id</code> The ID of the state to apply. This ID should exist in the list of registered switch states. <p>virtual void SetState(const AmString&amp; name) = 0</p> <p>Sets the current state of the switch using the state name.</p> <p>Note</p> <p>Changing the state of a <code>Switch</code> will update ALL the <code>SwitchContainer</code> objects that use this <code>Switch</code>.</p> Parameter <code>name</code> The name of the state to apply. This name should exist in the list of registered switch states."},{"location":"api/assets/SwitchContainer/","title":"SwitchContainer","text":"<p>class  SwitchContainer : public SoundObject , public Asset&lt;AmSwitchContainerID&gt;</p> <p>Amplitude Switch Container Asset.</p> <p>A switch container is a container sound object where sounds and collections can be registered on one or multiple switches. Only one switch can be active at a time in a switch container. When a switch is active, all the sounds and collections that are registered on it will be played.</p> See SoundObject"},{"location":"api/assets/SwitchContainer/#functions","title":"Functions","text":"Name Description GetSwitch Returns the switch attached to this SwitchContainer. GetFaderIn Get the fade in Fader for the given sound object ID. GetFaderOut Get the fade out Fader for the given sound object ID. GetSoundObjects Returns the list of sound objects referenced in this SwitchContainer for the given state."},{"location":"api/assets/SwitchContainer/#function-details","title":"Function Details","text":""},{"location":"api/assets/SwitchContainer/#getfaderin","title":"GetFaderIn","text":"<p>* GetFaderIn(AmObjectID id) const</p> <p>Get the fade in Fader for the given sound object ID.</p> Parameter <code>id</code> The ID of the sound object. Return The fade in Fader."},{"location":"api/assets/SwitchContainer/#getfaderout","title":"GetFaderOut","text":"<p>* GetFaderOut(AmObjectID id) const</p> <p>Get the fade out Fader for the given sound object ID.</p> Parameter <code>id</code> The ID of the sound object. Return The fade out Fader."},{"location":"api/assets/SwitchContainer/#getsoundobjects","title":"GetSoundObjects","text":"<p>[[nodiscard]] virtual const std::vector&lt;SwitchContainerItem&gt;&amp; GetSoundObjects(AmObjectID stateId) const = 0</p> <p>Returns the list of sound objects referenced in this SwitchContainer for the given state.</p> Parameter <code>stateId</code> The switch state to get the objects for. Return The list of sound object IDs registered to the given state."},{"location":"api/assets/SwitchContainer/#getswitch","title":"GetSwitch","text":"<p>* GetSwitch() const</p> <p>Returns the switch attached to this SwitchContainer.</p> Return The switch of this SwitchContainer if available or nullptr."},{"location":"api/core/","title":"Core","text":"<p>Core functionalities of the SDK</p>"},{"location":"api/core/#types","title":"Types","text":"Name Description AmAlignedReal32Buffer Class that handles aligned allocations to support vectorized operations. AmThreadHandle The AmThreadFunction signature is used to create threads. AmVersion A structure containing the version number of the library. AudioBuffer Represents an audio buffer containing multiple channels. AudioBufferChannel Represents a view to a single channel in an <code>AudioBuffer</code>. AwaitablePoolTask A pool task that allows a thread to wait until it finishes. ConsoleLogger The console logger class. HRIRSphere A 3D sphere of HRIR data. HRIRSphereDatasetModel The model of the HRIR sphere dataset. HRIRSphereFileHeaderDescription Provides metadata about an HRIR sphere file. HRIRSphereVertex A vertex of the HRIR sphere. Logger The logger class. Pool Pool tasks scheduler class. PoolTask Base class for pool tasks. RefCounter Holds the number of references to an object. SoundFormat Describe the format of an audio sample. eAudioSampleFormat Enumerates the list of possible sample formats handled by Amplitude. eErrorCode Enumerates the list of possible errors encountered by the library. eHRIRSphereSamplingMode Defines how the HRIR sphere is sampled when doing Ambisonics binauralization. eLogMessageLevel The level of a log message. ePanningMode Enumerates the list of available panning modes. eScope Enumerates the list of available scopes for sound objects. eSpatialization Enumerates the list of available spatialization modes."},{"location":"api/core/#macros","title":"Macros","text":"Name Description AM_CALLBACK Declare a callback function type AM_UNUSED Helps to avoid compiler warnings about unused values. amLog Logs a message with the given level. amLogCritical Logs a critical message. amLogDebug Logs a debug message. amLogError Logs an error message. amLogInfo Logs an informational message. amLogSuccess Logs a success message. amLogWarning Logs a warning message. amLogger The global logger instance. amVersion Gets the current Amplitude SDK version."},{"location":"api/core/#variables","title":"Variables","text":"Name Description kAm51SurroundChannelCount The number of channels in a 5.1 surround audio source. kAm71SurroundChannelCount The number of channels in a 7.1 surround audio source. kAmAirAbsorptionBandCount The number of air absorption bands for attenuation models. kAmFirstOrderAmbisonicChannelCount The number of channels in first-order ambisonic source. kAmFixedPointBits The number of bits to shift when processing audio data with floating point values. kAmFixedPointMask Used to mask the bits when processing audio data with fixed-point values. kAmFixedPointUnit The unit value for a 32-bit fixed-point audio sample.. kAmInvalidObjectId Invalid Amplitude object ID. kAmMasterBusId Specifies the value of the \"master\" bus ID. kAmMaxSupportedAmbisonicOrder The maximum supported ambisonic order. kAmMaxSupportedChannelCount The maximum supported channel count for an ambisonic source. kAmMaxSupportedFrameCount The maximum number of frames that can be processed at once. kAmMonoChannelCount The number of channels in a mono audio source. kAmRoomSurfaceCount The number of surfaces in a room. kAmSecond The number of milliseconds in one second. kAmSecondOrderAmbisonicChannelCount The number of channels in second-order ambisonic source. kAmStereoChannelCount The number of channels in a stereo audio source. kAmThirdOrderAmbisonicChannelCount The number of channels in third-order ambisonic source. kEpsilon Minimum value where values lower than this are considered to be 0. kMinFadeDuration The minimum fade duration in milliseconds."},{"location":"api/core/#functions","title":"Functions","text":"Name Description CreateMutex Creates a mutex object. CreateThread Creates a new thread. DestroyMutex Destroys a mutex object. GetCurrentThreadId Gets the handle of the calling thread. GetTimeMillis Gets the total execution time in milliseconds for the calling thread. GetVersion Returns the version. LockMutex Takes ownership of a mutex. Release Manually stops a thread execution. Sleep Makes the calling thread sleep for the given amount of milliseconds. UnlockMutex Releases ownership of a mutex. Wait Waits for the given thread to stop."},{"location":"api/core/#macro-details","title":"Macro Details","text":""},{"location":"api/core/#am_callback","title":"AM_CALLBACK","text":"<p>#define AM_CALLBACK(type, name)</p> <p>Declare a callback function type</p> Parameter <code>_type_</code> Return type of the function Parameter <code>_name_</code> Name of the function <p>Note</p> <p>This must be followed by the parentheses containing the function arguments declaration</p>"},{"location":"api/core/#am_unused","title":"AM_UNUSED","text":"<p>#define AM_UNUSED(x)</p> <p>Helps to avoid compiler warnings about unused values.</p> Parameter <code>x</code> The statement where the return value is not used."},{"location":"api/core/#amlog","title":"amLog","text":"<p>#define amLog(level, message, ...)                                                                                                     \\</p> <p>Logs a message with the given level.</p> Parameter <code>_level_</code> The level of the log message. Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amlogcritical","title":"amLogCritical","text":"<p>#define amLogCritical(message, ...)</p> <p>Logs a critical message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amlogdebug","title":"amLogDebug","text":"<p>#define amLogDebug(message, ...)</p> <p>Logs a debug message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amlogerror","title":"amLogError","text":"<p>#define amLogError(message, ...)</p> <p>Logs an error message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amloginfo","title":"amLogInfo","text":"<p>#define amLogInfo(message, ...)</p> <p>Logs an informational message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amlogsuccess","title":"amLogSuccess","text":"<p>#define amLogSuccess(message, ...)</p> <p>Logs a success message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amlogwarning","title":"amLogWarning","text":"<p>#define amLogWarning(message, ...)</p> <p>Logs a warning message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/core/#amlogger","title":"amLogger","text":"<p>#define amLogger</p> <p>The global logger instance.</p>"},{"location":"api/core/#amversion","title":"amVersion","text":"<p>#define amVersion</p> <p>Gets the current Amplitude SDK version.</p>"},{"location":"api/core/#variable-details","title":"Variable Details","text":""},{"location":"api/core/#kam51surroundchannelcount","title":"kAm51SurroundChannelCount","text":"<p>constexpr AmSize kAm51SurroundChannelCount</p> <p>The number of channels in a 5.1 surround audio source.</p>"},{"location":"api/core/#kam71surroundchannelcount","title":"kAm71SurroundChannelCount","text":"<p>constexpr AmSize kAm71SurroundChannelCount</p> <p>The number of channels in a 7.1 surround audio source.</p>"},{"location":"api/core/#kamairabsorptionbandcount","title":"kAmAirAbsorptionBandCount","text":"<p>constexpr AmUInt32 kAmAirAbsorptionBandCount</p> <p>The number of air absorption bands for attenuation models.</p>"},{"location":"api/core/#kamfirstorderambisonicchannelcount","title":"kAmFirstOrderAmbisonicChannelCount","text":"<p>constexpr AmSize kAmFirstOrderAmbisonicChannelCount</p> <p>The number of channels in first-order ambisonic source.</p>"},{"location":"api/core/#kamfixedpointbits","title":"kAmFixedPointBits","text":"<p>constexpr AmInt32 kAmFixedPointBits</p> <p>The number of bits to shift when processing audio data with floating point values.</p>"},{"location":"api/core/#kamfixedpointmask","title":"kAmFixedPointMask","text":"<p>constexpr AmInt32 kAmFixedPointMask</p> <p>Used to mask the bits when processing audio data with fixed-point values.</p>"},{"location":"api/core/#kamfixedpointunit","title":"kAmFixedPointUnit","text":"<p>constexpr AmInt32 kAmFixedPointUnit</p> <p>The unit value for a 32-bit fixed-point audio sample..</p>"},{"location":"api/core/#kaminvalidobjectid","title":"kAmInvalidObjectId","text":"<p>constexpr AmObjectID kAmInvalidObjectId</p> <p>Invalid Amplitude object ID.</p>"},{"location":"api/core/#kammasterbusid","title":"kAmMasterBusId","text":"<p>constexpr AmBusID kAmMasterBusId</p> <p>Specifies the value of the \"master\" bus ID.</p>"},{"location":"api/core/#kammaxsupportedambisonicorder","title":"kAmMaxSupportedAmbisonicOrder","text":"<p>constexpr AmUInt32 kAmMaxSupportedAmbisonicOrder</p> <p>The maximum supported ambisonic order.</p>"},{"location":"api/core/#kammaxsupportedchannelcount","title":"kAmMaxSupportedChannelCount","text":"<p>constexpr AmUInt32 kAmMaxSupportedChannelCount</p> <p>The maximum supported channel count for an ambisonic source.</p>"},{"location":"api/core/#kammaxsupportedframecount","title":"kAmMaxSupportedFrameCount","text":"<p>constexpr AmUInt64 kAmMaxSupportedFrameCount</p> <p>The maximum number of frames that can be processed at once.</p>"},{"location":"api/core/#kammonochannelcount","title":"kAmMonoChannelCount","text":"<p>constexpr AmSize kAmMonoChannelCount</p> <p>The number of channels in a mono audio source.</p>"},{"location":"api/core/#kamroomsurfacecount","title":"kAmRoomSurfaceCount","text":"<p>constexpr AmSize kAmRoomSurfaceCount</p> <p>The number of surfaces in a room.</p> <p>Warning</p> <p>Only cube-shaped rooms are supported.</p>"},{"location":"api/core/#kamsecond","title":"kAmSecond","text":"<p>constexpr AmTime kAmSecond</p> <p>The number of milliseconds in one second.</p>"},{"location":"api/core/#kamsecondorderambisonicchannelcount","title":"kAmSecondOrderAmbisonicChannelCount","text":"<p>constexpr AmSize kAmSecondOrderAmbisonicChannelCount</p> <p>The number of channels in second-order ambisonic source.</p>"},{"location":"api/core/#kamstereochannelcount","title":"kAmStereoChannelCount","text":"<p>constexpr AmSize kAmStereoChannelCount</p> <p>The number of channels in a stereo audio source.</p>"},{"location":"api/core/#kamthirdorderambisonicchannelcount","title":"kAmThirdOrderAmbisonicChannelCount","text":"<p>constexpr AmSize kAmThirdOrderAmbisonicChannelCount</p> <p>The number of channels in third-order ambisonic source.</p>"},{"location":"api/core/#kepsilon","title":"kEpsilon","text":"<p>constexpr AmReal32 kEpsilon</p> <p>Minimum value where values lower than this are considered to be 0.</p>"},{"location":"api/core/#kminfadeduration","title":"kMinFadeDuration","text":"<p>constexpr AmTime kMinFadeDuration</p> <p>The minimum fade duration in milliseconds.</p>"},{"location":"api/core/#function-details","title":"Function Details","text":""},{"location":"api/core/#createmutex","title":"CreateMutex","text":"<p>AmMutexHandle CreateMutex(AmUInt64 spinCount = 100)</p> <p>Creates a mutex object.</p> <p>A mutex is an object that a thread can acquire, preventing other threads from acquiring it.</p> <p>To acquire the mutex ownership, you should use <code>LockMutex()</code> with the mutex handle as parameter. To release the ownership, use <code>UnlockMutex()</code> with the mutex handle as parameter.</p> Parameter <code>spinCount</code> The number of times the mutex should spin before checking if it's available."},{"location":"api/core/#createthread","title":"CreateThread","text":"<p>AmThreadHandle CreateThread(AmThreadFunction threadFunction, AmVoidPtr parameter = nullptr)</p> <p>Creates a new thread.</p> Parameter <code>threadFunction</code> The function to run in the thread. Parameter <code>parameter</code> An optional shared data to pass to the thread"},{"location":"api/core/#destroymutex","title":"DestroyMutex","text":"<p>void DestroyMutex(AmMutexHandle handle)</p> <p>Destroys a mutex object.</p> Parameter <code>handle</code> The mutex object handle."},{"location":"api/core/#getcurrentthreadid","title":"GetCurrentThreadId","text":"<p>AmThreadID GetCurrentThreadId()</p> <p>Gets the handle of the calling thread.</p>"},{"location":"api/core/#gettimemillis","title":"GetTimeMillis","text":"<p>AmUInt64 GetTimeMillis()</p> <p>Gets the total execution time in milliseconds for the calling thread.</p>"},{"location":"api/core/#getversion","title":"GetVersion","text":"<p>const AmVersion&amp; GetVersion()</p> <p>Returns the version.</p> Return The current SDK version."},{"location":"api/core/#lockmutex","title":"LockMutex","text":"<p>void LockMutex(AmMutexHandle handle)</p> <p>Takes ownership of a mutex.</p> Parameter <code>handle</code> The mutex object handle."},{"location":"api/core/#release","title":"Release","text":"<p>void Release(AmThreadHandle&amp; thread)</p> <p>Manually stops a thread execution.</p> Parameter <code>thread</code> The handle of the thread to stop."},{"location":"api/core/#sleep","title":"Sleep","text":"<p>void Sleep(AmInt32 milliseconds)</p> <p>Makes the calling thread sleep for the given amount of milliseconds.</p> Parameter <code>milliseconds</code> The amount of time the calling thread should sleep."},{"location":"api/core/#unlockmutex","title":"UnlockMutex","text":"<p>void UnlockMutex(AmMutexHandle handle)</p> <p>Releases ownership of a mutex.</p> Parameter <code>handle</code> The mutex object handle."},{"location":"api/core/#wait","title":"Wait","text":"<p>void Wait(AmThreadHandle thread)</p> <p>Waits for the given thread to stop.</p> Parameter <code>thread</code> The handle of the thread to wait."},{"location":"api/core/AmAlignedReal32Buffer/","title":"AmAlignedReal32Buffer","text":"<p>class  AmAlignedReal32Buffer</p> <p>Class that handles aligned allocations to support vectorized operations.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#operators","title":"Operators","text":"Name Description operator[] Returns a reference to the float at the specified index. operator[] Returns a const reference to the float at the specified index."},{"location":"api/core/AmAlignedReal32Buffer/#functions","title":"Functions","text":"Name Description AmAlignedReal32Buffer Constructs an empty buffer. ~AmAlignedReal32Buffer Destructs the buffer and deallocates the memory. Init Allocates and align buffer. Clear Clears all data. Release Releases the allocated buffer. GetSize Gets the size of the buffer. GetBuffer Gets the current aligned pointer. GetPointer Gets the raw allocated pointer. CopyFrom Copies data from another buffer. Resize Resizes the buffer to the specified size. Swap Swaps two buffers. begin Returns an iterator to the beginning of the buffer. end Returns an iterator to the end of the buffer. begin Returns an iterator to the beginning of the buffer. end Returns an iterator to the end of the buffer."},{"location":"api/core/AmAlignedReal32Buffer/#operator-details","title":"Operator Details","text":""},{"location":"api/core/AmAlignedReal32Buffer/#operator","title":"operator[]","text":"<p>AmReal32&amp; operator</p> <p>Returns a reference to the float at the specified index.</p> Parameter <code>index</code> The index of the float to retrieve. Return The reference to the float at the specified index. <p>const AmReal32&amp; operator const</p> <p>Returns a const reference to the float at the specified index.</p> Parameter <code>index</code> The index of the float to retrieve. Return The const reference to the float at the specified index."},{"location":"api/core/AmAlignedReal32Buffer/#function-details","title":"Function Details","text":""},{"location":"api/core/AmAlignedReal32Buffer/#amalignedreal32buffer_1","title":"AmAlignedReal32Buffer","text":"<p>AmAlignedReal32Buffer()</p> <p>Constructs an empty buffer.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#clear","title":"Clear","text":"<p>void Clear() const</p> <p>Clears all data.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#copyfrom","title":"CopyFrom","text":"<p>void CopyFrom(const AmAlignedReal32Buffer&amp; other) const</p> <p>Copies data from another buffer.</p> Parameter <code>other</code> The other buffer to copy data from."},{"location":"api/core/AmAlignedReal32Buffer/#getbuffer","title":"GetBuffer","text":"<p>[[nodiscard]] inline AmReal32* GetBuffer() const</p> <p>Gets the current aligned pointer.</p> Return The pointer the float buffer"},{"location":"api/core/AmAlignedReal32Buffer/#getpointer","title":"GetPointer","text":"<p>[[nodiscard]] inline AmUInt8Buffer GetPointer() const</p> <p>Gets the raw allocated pointer.</p> Return The pointer to the raw allocated memory."},{"location":"api/core/AmAlignedReal32Buffer/#getsize","title":"GetSize","text":"<p>[[nodiscard]] inline AmUInt32 GetSize() const</p> <p>Gets the size of the buffer.</p> Return The number of float values stored in the buffer."},{"location":"api/core/AmAlignedReal32Buffer/#init","title":"Init","text":"<p>AmResult Init(AmUInt32 size, bool clear = true)</p> <p>Allocates and align buffer.</p> Parameter <code>size</code> The buffer size. Parameter <code>clear</code> Whether to clear the buffer. Return An <code>AM_ERROR</code> value indicating if the allocation was successful or not."},{"location":"api/core/AmAlignedReal32Buffer/#release","title":"Release","text":"<p>void Release()</p> <p>Releases the allocated buffer.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#resize","title":"Resize","text":"<p>void Resize(AmUInt32 size, bool clear = true)</p> <p>Resizes the buffer to the specified size.</p> Parameter <code>size</code> The new size of the buffer. Parameter <code>clear</code> Whether to clear the buffer after resize. If <code>true</code>, the buffer will be cleared even if the new size equals the old size."},{"location":"api/core/AmAlignedReal32Buffer/#swap","title":"Swap","text":"<p>static void Swap(AmAlignedReal32Buffer&amp; a, AmAlignedReal32Buffer&amp; b)</p> <p>Swaps two buffers.</p> Parameter <code>a</code> The first buffer. Parameter <code>b</code> The second buffer."},{"location":"api/core/AmAlignedReal32Buffer/#begin","title":"begin","text":"<p>[[nodiscard]] inline const AmReal32* begin() const</p> <p>Returns an iterator to the beginning of the buffer.</p> Return An iterator to the beginning of the buffer. <p>[[nodiscard]] inline AmReal32* begin()</p> <p>Returns an iterator to the beginning of the buffer.</p> Return An iterator to the beginning of the buffer."},{"location":"api/core/AmAlignedReal32Buffer/#end","title":"end","text":"<p>[[nodiscard]] inline const AmReal32* end() const</p> <p>Returns an iterator to the end of the buffer.</p> Return An iterator to the end of the buffer. <p>[[nodiscard]] inline AmReal32* end()</p> <p>Returns an iterator to the end of the buffer.</p> Return An iterator to the end of the buffer."},{"location":"api/core/AmAlignedReal32Buffer/#amalignedreal32buffer_2","title":"~AmAlignedReal32Buffer","text":"<p>~AmAlignedReal32Buffer()</p> <p>Destructs the buffer and deallocates the memory.</p>"},{"location":"api/core/AmThreadHandle/","title":"AmThreadHandle","text":"<p>typedef AmVoidPtr AmThreadHandle</p> <p>The AmThreadFunction signature is used to create threads.</p>"},{"location":"api/core/AmVersion/","title":"AmVersion","text":"<p>struct AmVersion</p> <p>A structure containing the version number of the library.</p>"},{"location":"api/core/AmVersion/#variables","title":"Variables","text":"Name Description major Version number, updated only on major releases. minor Version number, updated only on point releases. revision Version number, updated for tiny releases (ex: Bug fixes). text Text string containing the name and version of the library."},{"location":"api/core/AmVersion/#variable-details","title":"Variable Details","text":""},{"location":"api/core/AmVersion/#major","title":"major","text":"<p>AmUInt8 major</p> <p>Version number, updated only on major releases.</p>"},{"location":"api/core/AmVersion/#minor","title":"minor","text":"<p>AmUInt8 minor</p> <p>Version number, updated only on point releases.</p>"},{"location":"api/core/AmVersion/#revision","title":"revision","text":"<p>AmUInt8 revision</p> <p>Version number, updated for tiny releases (ex: Bug fixes).</p>"},{"location":"api/core/AmVersion/#text","title":"text","text":"<p>AmString text</p> <p>Text string containing the name and version of the library.</p>"},{"location":"api/core/AudioBuffer/","title":"AudioBuffer","text":"<p>class  AudioBuffer</p> <p>Represents an audio buffer containing multiple channels.</p> <p>An <code>AudioBuffer</code> is a de-interleaved memory storage used to store and manipulate audio data, such as audio samples or Ambisonics sound fields, in a flexible and efficient manner. Accessing a channel data will return an <code>AudioBufferChannel</code> object, which is a view to the memory range storing that channel.</p> See AudioBufferChannel"},{"location":"api/core/AudioBuffer/#operators","title":"Operators","text":"Name Description operator[] Gets the <code>AudioBufferChannel</code> at the specified index. operator[] Gets the <code>AudioBufferChannel</code> at the specified index. operator= Copies the audio buffer data from the provided <code>AudioBuffer</code>. operator+= Accumulates the audio buffer data from the provided <code>AudioBuffer</code>. operator-= Subtracts the audio buffer data from the provided <code>AudioBuffer</code>. operator*= Point-wise multiplies the audio buffer data with the provided <code>AudioBuffer</code>. operator*= Point-wise multiplies this channel with the provided scalar."},{"location":"api/core/AudioBuffer/#functions","title":"Functions","text":"Name Description Copy Copies the given number of frames from the source buffer to the destination buffer. AudioBuffer Creates an empty audio buffer. AudioBuffer Creates an audio buffer with the specified number of frames and channels. AudioBuffer Explicitly deletes the audio buffer copy to avoid unintended usage. AudioBuffer Moves the given audio buffer data in this one. ~AudioBuffer Destroys the audio buffer data and release allocated memory. IsEmpty Check if the audio buffer is empty. GetFrameCount Gets the number of frames in the buffer. GetChannelCount Gets the number of channels in the buffer. Clear Sets the entire audio buffer data to zero. GetData Gets the wrapped audio buffer data. GetChannel Gets the <code>AudioBufferChannel</code> at the specified index. GetChannel Gets the <code>AudioBufferChannel</code> at the specified index. Clone Clones the audio buffer and returns a new instance."},{"location":"api/core/AudioBuffer/#operator-details","title":"Operator Details","text":""},{"location":"api/core/AudioBuffer/#operator","title":"operator*=","text":"<p>AudioBuffer&amp; operator*=(const AudioBuffer&amp; buffer)</p> <p>Point-wise multiplies the audio buffer data with the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The buffer to multiply with this one. Return This instance with the multiplied audio buffer data. <p>AudioBuffer&amp; operator*=(AmReal32 scalar)</p> <p>Point-wise multiplies this channel with the provided scalar.</p> Parameter <code>scalar</code> The scalar to multiply with. Return A reference to the modified channel."},{"location":"api/core/AudioBuffer/#operator_1","title":"operator+=","text":"<p>AudioBuffer&amp; operator+=(const AudioBuffer&amp; buffer)</p> <p>Accumulates the audio buffer data from the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The buffer to add in this one. Return This instance with the added audio buffer data."},{"location":"api/core/AudioBuffer/#operator-","title":"operator-=","text":"<p>AudioBuffer&amp; operator-=(const AudioBuffer&amp; buffer)</p> <p>Subtracts the audio buffer data from the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The buffer to subtract from this one. Return This instance with the subtracted audio buffer data."},{"location":"api/core/AudioBuffer/#operator_2","title":"operator=","text":"<p>AudioBuffer&amp; operator=(const AudioBuffer&amp; buffer)</p> <p>Copies the audio buffer data from the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The other audio buffer to copy. Return This instance with the copied audio buffer data."},{"location":"api/core/AudioBuffer/#operator_3","title":"operator[]","text":"<p>AudioBufferChannel&amp; operator</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index. <p>[[nodiscard]] const AudioBufferChannel&amp; operator const</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index."},{"location":"api/core/AudioBuffer/#function-details","title":"Function Details","text":""},{"location":"api/core/AudioBuffer/#audiobuffer_1","title":"AudioBuffer","text":"<p>AudioBuffer()</p> <p>Creates an empty audio buffer.</p> <p>AudioBuffer(AmSize numFrames, AmSize numChannels)</p> <p>Creates an audio buffer with the specified number of frames and channels.</p> Parameter <code>numFrames</code> The number of frames in the buffer. Parameter <code>numChannels</code> The number of channels in the buffer. <p>AudioBuffer(const AudioBuffer&amp; buffer) = delete</p> <p>Explicitly deletes the audio buffer copy to avoid unintended usage.</p> Parameter <code>buffer</code> The other audio buffer to copy. <p>Note</p> <p>Use the assignment operator to copy the audio buffer.</p> <p>AudioBuffer(AudioBuffer&amp;&amp; buffer) noexcept</p> <p>Moves the given audio buffer data in this one.</p> Parameter <code>buffer</code> The other audio buffer to move."},{"location":"api/core/AudioBuffer/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Sets the entire audio buffer data to zero.</p>"},{"location":"api/core/AudioBuffer/#clone","title":"Clone","text":"<p>AudioBuffer Clone() const</p> <p>Clones the audio buffer and returns a new instance.</p> Return A new instance with a cloned copy of the audio buffer data."},{"location":"api/core/AudioBuffer/#copy","title":"Copy","text":"<p>static void Copy( const AudioBuffer&amp; source, AmSize sourceOffset, AudioBuffer&amp; destination, AmSize destinationOffset, AmSize numFrames)</p> <p>Copies the given number of frames from the source buffer to the destination buffer.</p> Parameter <code>source</code> The source buffer to copy. Parameter <code>sourceOffset</code> The offset in the source buffer. Parameter <code>destination</code> The destination buffer to copy to. Parameter <code>destinationOffset</code> The offset in the destination buffer. Parameter <code>numFrames</code> The number of frames to copy."},{"location":"api/core/AudioBuffer/#getchannel","title":"GetChannel","text":"<p>AudioBufferChannel&amp; GetChannel(AmSize index)</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index. <p>[[nodiscard]] const AudioBufferChannel&amp; GetChannel(AmSize index) const</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index."},{"location":"api/core/AudioBuffer/#getchannelcount","title":"GetChannelCount","text":"<p>[[nodiscard]] AmSize GetChannelCount() const</p> <p>Gets the number of channels in the buffer.</p> Return The number of channels in the buffer."},{"location":"api/core/AudioBuffer/#getdata","title":"GetData","text":"<p>[[nodiscard]] const AmAlignedReal32Buffer&amp; GetData() const</p> <p>Gets the wrapped audio buffer data.</p> Return The wrapped audio buffer data."},{"location":"api/core/AudioBuffer/#getframecount","title":"GetFrameCount","text":"<p>[[nodiscard]] AmSize GetFrameCount() const</p> <p>Gets the number of frames in the buffer.</p> Return The number of frames in the buffer."},{"location":"api/core/AudioBuffer/#isempty","title":"IsEmpty","text":"<p>[[nodiscard]] bool IsEmpty() const</p> <p>Check if the audio buffer is empty.</p> Return <code>true</code> if the audio buffer is empty, <code>false</code> otherwise."},{"location":"api/core/AudioBuffer/#audiobuffer_2","title":"~AudioBuffer","text":"<p>~AudioBuffer()</p> <p>Destroys the audio buffer data and release allocated memory.</p>"},{"location":"api/core/AudioBufferChannel/","title":"AudioBufferChannel","text":"<p>class  AudioBufferChannel</p> <p>Represents a view to a single channel in an <code>AudioBuffer</code>.</p> See AudioBuffer"},{"location":"api/core/AudioBufferChannel/#operators","title":"Operators","text":"Name Description operator[] Gets the audio sample at the specified index. operator[] Gets the audio sample at the specified index. operator= Sets the entire channel data from the provided vector. operator= Sets the entire channel data from the provided <code>AudioBufferChannel</code>. operator+= Performs point-wise addition of this channel with the provided <code>AudioBufferChannel</code>. operator-= Performs point-wise subtraction of this channel with the provided <code>AudioBufferChannel</code>. operator*= Point-wise multiplies this channel with the provided <code>AudioBufferChannel</code>. operator*= Point-wise multiplies this channel with the provided scalar."},{"location":"api/core/AudioBufferChannel/#functions","title":"Functions","text":"Name Description size Gets the size of the buffer. begin Returns a float pointer to the beginning of the channel data. begin Returns a const float pointer to the beginning of the channel data. end Returns a float pointer to the end of the channel data. end Returns a const float pointer to the end of the channel data. clear Clears the channel data with zero. enabled Checks if the channel is enabled."},{"location":"api/core/AudioBufferChannel/#operator-details","title":"Operator Details","text":""},{"location":"api/core/AudioBufferChannel/#operator","title":"operator*=","text":"<p>AudioBufferChannel&amp; operator*=(const AudioBufferChannel&amp; channel)</p> <p>Point-wise multiplies this channel with the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to multiply with. Return A reference to the modified channel. <p>AudioBufferChannel&amp; operator*=(AmReal32 scalar)</p> <p>Point-wise multiplies this channel with the provided scalar.</p> Parameter <code>scalar</code> The scalar to multiply with. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator_1","title":"operator+=","text":"<p>AudioBufferChannel&amp; operator+=(const AudioBufferChannel&amp; channel)</p> <p>Performs point-wise addition of this channel with the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to add. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator-","title":"operator-=","text":"<p>AudioBufferChannel&amp; operator-=(const AudioBufferChannel&amp; channel)</p> <p>Performs point-wise subtraction of this channel with the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to subtract. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator_2","title":"operator=","text":"<p>AudioBufferChannel&amp; operator=(const std::vector&lt;AmReal32&gt;&amp; data)</p> <p>Sets the entire channel data from the provided vector.</p> Parameter <code>data</code> The vector containing the new channel data. Return A reference to the modified channel. <p>AudioBufferChannel&amp; operator=(const AudioBufferChannel&amp; channel)</p> <p>Sets the entire channel data from the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to copy the data from. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator_3","title":"operator[]","text":"<p>AmReal32&amp; operator</p> <p>Gets the audio sample at the specified index.</p> Parameter <code>index</code> The audio sample index. Return The audio sample at the specified index. <p>[[nodiscard]] const AmReal32&amp; operator const</p> <p>Gets the audio sample at the specified index.</p> Parameter <code>index</code> The audio sample index. Return The audio sample at the specified index."},{"location":"api/core/AudioBufferChannel/#function-details","title":"Function Details","text":""},{"location":"api/core/AudioBufferChannel/#begin","title":"begin","text":"<p>AmReal32* begin()</p> <p>Returns a float pointer to the beginning of the channel data.</p> Return A float pointer to the beginning of the channel data. <p>[[nodiscard]] const AmReal32* begin() const</p> <p>Returns a const float pointer to the beginning of the channel data.</p> Return A const float pointer to the beginning of the channel data."},{"location":"api/core/AudioBufferChannel/#clear","title":"clear","text":"<p>void clear()</p> <p>Clears the channel data with zero.</p>"},{"location":"api/core/AudioBufferChannel/#enabled","title":"enabled","text":"<p>[[nodiscard]] bool enabled() const</p> <p>Checks if the channel is enabled.</p> Return <code>true</code> if the channel is enabled, <code>false</code> otherwise."},{"location":"api/core/AudioBufferChannel/#end","title":"end","text":"<p>AmReal32* end()</p> <p>Returns a float pointer to the end of the channel data.</p> Return A float pointer to the end of the channel data. <p>[[nodiscard]] const AmReal32* end() const</p> <p>Returns a const float pointer to the end of the channel data.</p> Return A const float pointer to the end of the channel data."},{"location":"api/core/AudioBufferChannel/#size","title":"size","text":"<p>[[nodiscard]] AmSize size() const</p> <p>Gets the size of the buffer.</p> Return The size of the buffer."},{"location":"api/core/AwaitablePoolTask/","title":"AwaitablePoolTask","text":"<p>class  AwaitablePoolTask : public PoolTask</p> <p>A pool task that allows a thread to wait until it finishes.</p>"},{"location":"api/core/AwaitablePoolTask/#functions","title":"Functions","text":"Name Description Work @inherit AwaitableWork Pool task execution function. Await Makes the calling thread wait for this task to finish. Await Makes the calling thread wait for this task to finish."},{"location":"api/core/AwaitablePoolTask/#function-details","title":"Function Details","text":""},{"location":"api/core/AwaitablePoolTask/#await","title":"Await","text":"<p>void Await()</p> <p>Makes the calling thread wait for this task to finish.</p> <p>bool Await(AmUInt64 duration)</p> <p>Makes the calling thread wait for this task to finish.</p> Parameter <code>duration</code> The maximum amount of time to wait in milliseconds."},{"location":"api/core/AwaitablePoolTask/#awaitablework","title":"AwaitableWork","text":"<p>virtual void AwaitableWork() = 0</p> <p>Pool task execution function.</p>"},{"location":"api/core/AwaitablePoolTask/#work","title":"Work","text":"<p>void Work() final</p> <p>@inherit</p>"},{"location":"api/core/ConsoleLogger/","title":"ConsoleLogger","text":"<p>class  ConsoleLogger final : public Logger</p> <p>The console logger class.</p> <p>This class logs messages to the console or terminal.</p>"},{"location":"api/core/ConsoleLogger/#functions","title":"Functions","text":"Name Description ConsoleLogger Constructs a new console logger. ~ConsoleLogger Destructor. Log @inherit"},{"location":"api/core/ConsoleLogger/#function-details","title":"Function Details","text":""},{"location":"api/core/ConsoleLogger/#consolelogger_1","title":"ConsoleLogger","text":"<p>explicit ConsoleLogger(bool displayFileAndLine = true)</p> <p>Constructs a new console logger.</p> Parameter <code>displayFileAndLine</code> Whether to display the file and line number in the log messages."},{"location":"api/core/ConsoleLogger/#log","title":"Log","text":"<p>void Log(eLogMessageLevel level, const char* file, int line, const AmString&amp; message) override</p> <p>@inherit</p>"},{"location":"api/core/ConsoleLogger/#consolelogger_2","title":"~ConsoleLogger","text":"<p>~ConsoleLogger() override = default</p> <p>Destructor.</p>"},{"location":"api/core/HRIRSphere/","title":"HRIRSphere","text":"<p>class  HRIRSphere : public Resource</p> <p>A 3D sphere of HRIR data.</p>"},{"location":"api/core/HRIRSphere/#functions","title":"Functions","text":"Name Description SetSamplingMode Sets the sampling mode for the HRIR sphere. GetSamplingMode Gets the sampling mode for the HRIR sphere. Sample Samples the HRIR sphere for the given direction."},{"location":"api/core/HRIRSphere/#function-details","title":"Function Details","text":""},{"location":"api/core/HRIRSphere/#getsamplingmode","title":"GetSamplingMode","text":"<p>[[nodiscard]] virtual eHRIRSphereSamplingMode GetSamplingMode() const = 0</p> <p>Gets the sampling mode for the HRIR sphere.</p>"},{"location":"api/core/HRIRSphere/#sample","title":"Sample","text":"<p>virtual void Sample(const AmVec3&amp; direction, AmReal32* leftHRIR, AmReal32* rightHRIR) const = 0</p> <p>Samples the HRIR sphere for the given direction.</p> Parameter <code>direction</code> The sound to listener direction. Parameter <code>leftHRIR</code> The left HRIR data. Parameter <code>rightHRIR</code> The right HRIR data."},{"location":"api/core/HRIRSphere/#setsamplingmode","title":"SetSamplingMode","text":"<p>virtual void SetSamplingMode(eHRIRSphereSamplingMode mode) = 0</p> <p>Sets the sampling mode for the HRIR sphere.</p> Parameter <code>mode</code> The sampling mode to use."},{"location":"api/core/HRIRSphereDatasetModel/","title":"HRIRSphereDatasetModel","text":"<p>enum HRIRSphereDatasetModel : AmUInt8</p> <p>The model of the HRIR sphere dataset.</p> eHRIRSphereDatasetModel_IRCAM = 0 The HRIR sphere uses data from the IRCAM (LISTEN) dataset. (http://recherche.ircam.fr/equipes/salles/listen/download.html) eHRIRSphereDatasetModel_MIT = 1 The HRIR sphere uses data from the MIT (KEMAR) dataset. (http://sound.media.mit.edu/resources/KEMAR.html). eHRIRSphereDatasetModel_SADIE = 2 The HRIR sphere uses data from the SADIE II dataset. (https://www.york.ac.uk/sadie-project/database.html). eHRIRSphereDatasetModel_SOFA = 3 The HRIR sphere uses data from a SOFA (Spatially Oriented Format for Acoustics) file. (https://www.sofaconventions.org/). eHRIRSphereDatasetModel_Invalid Invalid HRIR sphere dataset model."},{"location":"api/core/HRIRSphereFileHeaderDescription/","title":"HRIRSphereFileHeaderDescription","text":"<p>struct HRIRSphereFileHeaderDescription</p> <p>Provides metadata about an HRIR sphere file.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#variables","title":"Variables","text":"Name Description m_Version HRIR sphere file header tag. Should be always equal to \"AMIR\". HRIR sphere file version. Allows backward compatibility. m_SampleRate Sample rate used to encode HRIR data. m_IRLength The length of the HRIR data in number of samples. m_VertexCount The number of vertices in the HRIR sphere. m_IndexCount The number of indices in the HRIR sphere."},{"location":"api/core/HRIRSphereFileHeaderDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_irlength","title":"m_IRLength","text":"<p>AmUInt32 m_IRLength</p> <p>The length of the HRIR data in number of samples.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_indexcount","title":"m_IndexCount","text":"<p>AmUInt32 m_IndexCount</p> <p>The number of indices in the HRIR sphere.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_samplerate","title":"m_SampleRate","text":"<p>AmUInt32 m_SampleRate</p> <p>Sample rate used to encode HRIR data.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_version","title":"m_Version","text":"<p>AmUInt16 m_Version</p> <p>HRIR sphere file header tag. Should be always equal to \"AMIR\".</p> <p>HRIR sphere file version. Allows backward compatibility.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_vertexcount","title":"m_VertexCount","text":"<p>AmUInt32 m_VertexCount</p> <p>The number of vertices in the HRIR sphere.</p>"},{"location":"api/core/HRIRSphereVertex/","title":"HRIRSphereVertex","text":"<p>struct HRIRSphereVertex</p> <p>A vertex of the HRIR sphere.</p>"},{"location":"api/core/HRIRSphereVertex/#variables","title":"Variables","text":"Name Description m_Position The cartesian position of the vertex. m_LeftIR The left HRIR data. m_RightIR The right HRIR data. m_LeftDelay The delay for the left ear. m_RightDelay The delay for the right ear."},{"location":"api/core/HRIRSphereVertex/#variable-details","title":"Variable Details","text":""},{"location":"api/core/HRIRSphereVertex/#m_leftdelay","title":"m_LeftDelay","text":"<p>AmReal32 m_LeftDelay</p> <p>The delay for the left ear.</p>"},{"location":"api/core/HRIRSphereVertex/#m_leftir","title":"m_LeftIR","text":"<p>std::vector&lt;AmReal32&gt; m_LeftIR</p> <p>The left HRIR data.</p>"},{"location":"api/core/HRIRSphereVertex/#m_position","title":"m_Position","text":"<p>AmVec3 m_Position</p> <p>The cartesian position of the vertex.</p>"},{"location":"api/core/HRIRSphereVertex/#m_rightdelay","title":"m_RightDelay","text":"<p>AmReal32 m_RightDelay</p> <p>The delay for the right ear.</p>"},{"location":"api/core/HRIRSphereVertex/#m_rightir","title":"m_RightIR","text":"<p>std::vector&lt;AmReal32&gt; m_RightIR</p> <p>The right HRIR data.</p>"},{"location":"api/core/Logger/","title":"Logger","text":"<p>class  Logger</p> <p>The logger class.</p> <p>Base class used to perform logging. Implementations of this class have the ability to display or store log messages wherever they are needed.</p>"},{"location":"api/core/Logger/#functions","title":"Functions","text":"Name Description ~Logger Default destructor. SetLogger Sets the logger instance to use when calling <code>amLogger</code> GetLogger Gets the logger instance to use when calling <code>amLogger</code> Debug Logs a debug message. Info Logs an informational message. Warning Logs a warning message. Error Logs an error message. Critical Logs a critical message. Success Logs a success message. Log Logs a message with the given level."},{"location":"api/core/Logger/#function-details","title":"Function Details","text":""},{"location":"api/core/Logger/#critical","title":"Critical","text":"<p>void Critical(const char* file, int line, const AmString&amp; message)</p> <p>Logs a critical message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#debug","title":"Debug","text":"<p>void Debug(const char* file, int line, const AmString&amp; message)</p> <p>Logs a debug message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#error","title":"Error","text":"<p>void Error(const char* file, int line, const AmString&amp; message)</p> <p>Logs an error message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#getlogger","title":"GetLogger","text":"<p>static Logger* GetLogger()</p> <p>Gets the logger instance to use when calling <code>amLogger</code></p> Return The logger instance."},{"location":"api/core/Logger/#info","title":"Info","text":"<p>void Info(const char* file, int line, const AmString&amp; message)</p> <p>Logs an informational message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#log","title":"Log","text":"<p>virtual void Log(eLogMessageLevel level, const char* file, int line, const AmString&amp; message) = 0</p> <p>Logs a message with the given level.</p> Parameter <code>level</code> The level of the log message. Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#setlogger","title":"SetLogger","text":"<p>static void SetLogger(Logger* loggerInstance)</p> <p>Sets the logger instance to use when calling <code>amLogger</code></p> Parameter <code>loggerInstance</code> The logger instance."},{"location":"api/core/Logger/#success","title":"Success","text":"<p>void Success(const char* file, int line, const AmString&amp; message)</p> <p>Logs a success message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#warning","title":"Warning","text":"<p>void Warning(const char* file, int line, const AmString&amp; message)</p> <p>Logs a warning message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/core/Logger/#logger_1","title":"~Logger","text":"<p>virtual ~Logger() = default</p> <p>Default destructor.</p>"},{"location":"api/core/Pool/","title":"Pool","text":"<p>class  Pool</p> <p>Pool tasks scheduler class.</p> <p>The Pool tasks scheduler can pick and run pool tasks on several multiple threads. The number of threads is defined at initialization.</p> <p>The maximum number of tasks the pool can manage is defined by the <code>AM_MAX_THREAD_POOL_TASKS</code> macro. The default value is <code>1024</code></p>"},{"location":"api/core/Pool/#functions","title":"Functions","text":"Name Description Pool Creates a new pool tasks scheduler instance. ~Pool Destructor. Init Initializes and run thread pool. AddTask Add a task to the tasks list. GetWork Called from worker thread to get a new task. GetThreadCount Gets the number of threads this pool is using. IsRunning Indicates that the pool is running. HasTasks Indicates that has tasks pending. GetTaskCount Gets the number of tasks in the pool."},{"location":"api/core/Pool/#function-details","title":"Function Details","text":""},{"location":"api/core/Pool/#addtask","title":"AddTask","text":"<p>void AddTask(std::shared_ptr&lt;PoolTask&gt; task)</p> <p>Add a task to the tasks list.</p> Parameter <code>task</code> The <code>PoolTask</code> to add. The task is not automatically deleted when the work is done."},{"location":"api/core/Pool/#gettaskcount","title":"GetTaskCount","text":"<p>[[nodiscard]] AmInt32 GetTaskCount() const</p> <p>Gets the number of tasks in the pool.</p> Return The number of tasks in the pool."},{"location":"api/core/Pool/#getthreadcount","title":"GetThreadCount","text":"<p>[[nodiscard]] AmUInt32 GetThreadCount() const</p> <p>Gets the number of threads this pool is using.</p> Return The total number of threads in the pool."},{"location":"api/core/Pool/#getwork","title":"GetWork","text":"<p>std::shared_ptr&lt;PoolTask&gt; GetWork()</p> <p>Called from worker thread to get a new task.</p> <p>Warning</p> <p>This method is called internally, and should not be called in user code.</p> Return The next <code>PoolTask</code> to execute, or <code>nullptr</code> if no task is available."},{"location":"api/core/Pool/#hastasks","title":"HasTasks","text":"<p>[[nodiscard]] bool HasTasks() const</p> <p>Indicates that has tasks pending.</p> Return <code>true</code> if there are tasks pending, <code>false</code> otherwise."},{"location":"api/core/Pool/#init","title":"Init","text":"<p>void Init(AmUInt32 threadCount)</p> <p>Initializes and run thread pool.</p> Parameter <code>threadCount</code> The number of threads in the pool. For thread count 0, work is done at <code>AddTask()</code> call in the calling thread."},{"location":"api/core/Pool/#isrunning","title":"IsRunning","text":"<p>[[nodiscard]] bool IsRunning() const</p> <p>Indicates that the pool is running.</p> Return <code>true</code> if the pool is running, <code>false</code> otherwise."},{"location":"api/core/Pool/#pool_1","title":"Pool","text":"<p>Pool()</p> <p>Creates a new pool tasks scheduler instance.</p>"},{"location":"api/core/Pool/#pool_2","title":"~Pool","text":"<p>~Pool()</p> <p>Destructor.</p> <p>It waits for the threads to finish. Work may be unfinished.</p>"},{"location":"api/core/PoolTask/","title":"PoolTask","text":"<p>class  PoolTask</p> <p>Base class for pool tasks.</p>"},{"location":"api/core/PoolTask/#functions","title":"Functions","text":"Name Description ~PoolTask Default destructor. Work Main pool task execution function. Ready Checks if the task is ready to be picked by the pool scheduler."},{"location":"api/core/PoolTask/#function-details","title":"Function Details","text":""},{"location":"api/core/PoolTask/#ready","title":"Ready","text":"<p>virtual bool Ready()</p> <p>Checks if the task is ready to be picked by the pool scheduler.</p> Return <code>true</code> if the task is ready, <code>false</code> otherwise."},{"location":"api/core/PoolTask/#work","title":"Work","text":"<p>virtual void Work() = 0</p> <p>Main pool task execution function.</p> <p>When this task will be picked by the pool scheduler, this method will be called to execute the task.</p>"},{"location":"api/core/PoolTask/#pooltask_1","title":"~PoolTask","text":"<p>virtual ~PoolTask() = default</p> <p>Default destructor.</p>"},{"location":"api/core/RefCounter/","title":"RefCounter","text":"<p>class  RefCounter</p> <p>Holds the number of references to an object.</p>"},{"location":"api/core/RefCounter/#functions","title":"Functions","text":"Name Description RefCounter Constructs a new <code>RefCounter</code>. Increment Updates the counter by adding one reference. Decrement Updates the counter by removing one reference. GetCount Gets the current number of references."},{"location":"api/core/RefCounter/#function-details","title":"Function Details","text":""},{"location":"api/core/RefCounter/#decrement","title":"Decrement","text":"<p>AmInt32 Decrement()</p> <p>Updates the counter by removing one reference.</p> Return The number of references."},{"location":"api/core/RefCounter/#getcount","title":"GetCount","text":"<p>[[nodiscard]] inline AmInt32 GetCount() const</p> <p>Gets the current number of references.</p> Return The current number of references."},{"location":"api/core/RefCounter/#increment","title":"Increment","text":"<p>AmInt32 Increment()</p> <p>Updates the counter by adding one reference.</p> Return The number of references."},{"location":"api/core/RefCounter/#refcounter_1","title":"RefCounter","text":"<p>RefCounter()</p> <p>Constructs a new <code>RefCounter</code>.</p> <p>This initializes the internal counter to 0.</p>"},{"location":"api/core/SoundFormat/","title":"SoundFormat","text":"<p>struct  SoundFormat</p> <p>Describe the format of an audio sample.</p> <p>This data structure is mainly filled by a <code>Codec</code> during the initialization time.</p>"},{"location":"api/core/SoundFormat/#functions","title":"Functions","text":"Name Description SetAll Sets all the properties of the sound format. GetSampleRate Get the sample rate. GetNumChannels Get the number of channels. GetBitsPerSample Get the bits per sample. GetFramesCount Get the number of frames. GetFrameSize Get the frame size. GetSampleType Get the sample type."},{"location":"api/core/SoundFormat/#function-details","title":"Function Details","text":""},{"location":"api/core/SoundFormat/#getbitspersample","title":"GetBitsPerSample","text":"<p>[[nodiscard]] inline AmUInt32 GetBitsPerSample() const</p> <p>Get the bits per sample.</p> Return The number of bits per sample."},{"location":"api/core/SoundFormat/#getframesize","title":"GetFrameSize","text":"<p>[[nodiscard]] inline AmUInt32 GetFrameSize() const</p> <p>Get the frame size.</p> Return The size of each audio frame in bytes."},{"location":"api/core/SoundFormat/#getframescount","title":"GetFramesCount","text":"<p>[[nodiscard]] inline AmUInt64 GetFramesCount() const</p> <p>Get the number of frames.</p> Return The total number of audio frames."},{"location":"api/core/SoundFormat/#getnumchannels","title":"GetNumChannels","text":"<p>[[nodiscard]] inline AmUInt16 GetNumChannels() const</p> <p>Get the number of channels.</p> Return The number of audio channels."},{"location":"api/core/SoundFormat/#getsamplerate","title":"GetSampleRate","text":"<p>[[nodiscard]] inline AmUInt32 GetSampleRate() const</p> <p>Get the sample rate.</p> Return The sample rate of the audio."},{"location":"api/core/SoundFormat/#getsampletype","title":"GetSampleType","text":"<p>[[nodiscard]] inline eAudioSampleFormat GetSampleType() const</p> <p>Get the sample type.</p> Return The type of audio sample."},{"location":"api/core/SoundFormat/#setall","title":"SetAll","text":"<p>void SetAll( AmUInt32 sampleRate, AmUInt16 numChannels, AmUInt32 bitsPerSample, AmUInt64 framesCount, AmUInt32 frameSize, eAudioSampleFormat sampleType)</p> <p>Sets all the properties of the sound format.</p> Parameter <code>sampleRate</code> The sample rate of the audio. Parameter <code>numChannels</code> The number of audio channels. Parameter <code>bitsPerSample</code> The number of bits per sample. Parameter <code>framesCount</code> The total number of audio frames. Parameter <code>frameSize</code> The size of each audio frame in bytes. Parameter <code>sampleType</code> The type of audio sample."},{"location":"api/core/eAudioSampleFormat/","title":"eAudioSampleFormat","text":"<p>enum eAudioSampleFormat : AmUInt8</p> <p>Enumerates the list of possible sample formats handled by Amplitude.</p> eAudioSampleFormat_Float32 32-bit floating-point sample eAudioSampleFormat_Unknown An unknown or unsupported format"},{"location":"api/core/eErrorCode/","title":"eErrorCode","text":"<p>enum eErrorCode : AmUInt8</p> <p>Enumerates the list of possible errors encountered by the library.</p> eErrorCode_Success = 0 No error eErrorCode_InvalidParameter = 1 Some parameter is invalid eErrorCode_FileNotFound = 2 File not found eErrorCode_FileLoadFailed = 3 File found, but could not be loaded eErrorCode_DllNotFound = 4 DLL not found, or wrong DLL eErrorCode_OutOfMemory = 5 Out of memory eErrorCode_NotImplemented = 6 Feature not implemented eErrorCode_Unknown = 7 Unknown error"},{"location":"api/core/eHRIRSphereSamplingMode/","title":"eHRIRSphereSamplingMode","text":"<p>enum eHRIRSphereSamplingMode : AmUInt8</p> <p>Defines how the HRIR sphere is sampled when doing Ambisonics binauralization.</p> eHRIRSphereSamplingMode_Bilinear = 0 Provides the most accurate binauralization, as the HRIR data are smoothly transitioned between sphere points. <p>See more info about bilinear sampling here.</p> eHRIRSphereSamplingMode_NearestNeighbor = 1 Provides a more efficient binauralization, as the HRIR data are interpolated using only the nearest neighbors."},{"location":"api/core/eLogMessageLevel/","title":"eLogMessageLevel","text":"<p>enum eLogMessageLevel : AmUInt8</p> <p>The level of a log message.</p> <p>This is used to determine the importance of a log message.</p> eLogMessageLevel_Debug = 0 Debug messages. eLogMessageLevel_Info = 1 Informational messages. eLogMessageLevel_Warning = 2 Warning messages. eLogMessageLevel_Error = 3 Error messages. eLogMessageLevel_Critical = 4 Critical messages. eLogMessageLevel_Success = 5 Success messages."},{"location":"api/core/ePanningMode/","title":"ePanningMode","text":"<p>enum ePanningMode : AmUInt8</p> <p>Enumerates the list of available panning modes.</p> ePanningMode_Stereo = 0 2D stereo panning. This panning mode won't provide HRTF-related features. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 2 loudspeakers evenly arranged in front of the listener.</p> ePanningMode_BinauralLowQuality = 1 3D binaural panning using first-order HRTF. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 8 loudspeakers arranged in a cube configuration around the listener.</p> ePanningMode_BinauralMediumQuality = 2 3D binaural panning using second-order HRTF. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 12 loudspeakers arranged in a dodecahedral configuration (using faces of the dodecahedron).</p> ePanningMode_BinauralHighQuality = 3 3D binaural panning using third-order HRTF. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 26 loudspeakers arranged in a Lebedev grid. See: https://people.sc.fsu.edu/~jburkardt/m_src/sphere_lebedev_rule/sphere_lebedev_rule.html</p>"},{"location":"api/core/eScope/","title":"eScope","text":"<p>enum eScope : AmUInt8</p> <p>Enumerates the list of available scopes for sound objects.</p> eScope_World The sound object is within the game world. Instances of collections played in this scope          * will be treated as one object across all entities. eScope_Entity The sound object is within a specific entity. Instances of collections played in this scope          * will be treated as separate objects, and no data will be shared across entities. <p>Note</p> <p>Sound objects using this scope are required to be attached to an <code>Entity</code>.</p>"},{"location":"api/core/eSpatialization/","title":"eSpatialization","text":"<p>enum eSpatialization : AmUInt8</p> <p>Enumerates the list of available spatialization modes.</p> eSpatialization_None Disables spatialization. eSpatialization_Position Enables 2D (left-right) spatialization based on sound position. <p>Note</p> <p>This mode is available for every panning mode.</p> eSpatialization_PositionOrientation Enables 2D (left-right) spatialization based on sound position and orientation. <p>Note</p> <p>The sound instance using this spatialization mode needs to be attached to an <code>Entity</code>.</p> <p>Note</p> <p>This mode is available for every panning mode.</p> eSpatialization_HRTF Enables 3D spatialization using Head Related Transfer Functions. <p>Note</p> <p>This mode is only available for binaural panning modes.</p>"},{"location":"api/dsp/","title":"DSP","text":"<p>Digital Signal Processing (DSP) API</p>"},{"location":"api/dsp/#types","title":"Types","text":"Name Description AudioConverter Allow converting audio buffers between different sample rates and channel counts. Convolver Implementation of a partitioned FFT convolution algorithm with uniform block size. FFT The Fast Fourier Transform (FFT) class. Filter Base class to manage filters. FilterInstance A Filter instance. Resampler Base class to manage resamplers. ResamplerInstance A Resampler instance. SplitComplex Buffer for split-complex representation of FFT results."},{"location":"api/dsp/AudioConverter/","title":"AudioConverter","text":"<p>class AudioConverter final</p> <p>Allow converting audio buffers between different sample rates and channel counts.</p> <p>Note</p> <p>This class uses the <code>Resampler</code> class to perform sample rate conversion.</p> <p>Note</p> <p>Only mono to stereo or vice versa conversions are currently supported.</p>"},{"location":"api/dsp/AudioConverter/#types","title":"Types","text":"Name Description Settings Store conversion settings for an <code>AudioConverter</code> instance."},{"location":"api/dsp/AudioConverter/#functions","title":"Functions","text":"Name Description AudioConverter Default constructor. ~AudioConverter Destroys the instance and release associated resources. Configure Initializes the audio converter with the given conversion settings. Process Converts the audio buffer from the source sample rate and channel count to the target sample rate and channel count. SetSampleRate Updates the source sample rate and target sample rate. GetRequiredInputFrameCount Returns the required number of frames to have as input for the given amount of output frames. GetExpectedOutputFrameCount Returns the expected number of frames to have as output for the given amount of input frames. GetInputLatency Returns the current input latency in frames. GetOutputLatency Returns the current output latency in frames. Reset Resets the internal state of the converter."},{"location":"api/dsp/AudioConverter/#function-details","title":"Function Details","text":""},{"location":"api/dsp/AudioConverter/#audioconverter_1","title":"AudioConverter","text":"<p>AudioConverter()</p> <p>Default constructor.</p>"},{"location":"api/dsp/AudioConverter/#configure","title":"Configure","text":"<p>bool Configure(const Settings&amp; settings)</p> <p>Initializes the audio converter with the given conversion settings.</p> Parameter <code>settings</code> The conversion settings. Return <code>true</code> if the initialization was successful, <code>false</code> otherwise."},{"location":"api/dsp/AudioConverter/#getexpectedoutputframecount","title":"GetExpectedOutputFrameCount","text":"<p>[[nodiscard]] AmUInt64 GetExpectedOutputFrameCount(AmUInt64 inputFrameCount) const</p> <p>Returns the expected number of frames to have as output for the given amount of input frames.</p> Parameter <code>inputFrameCount</code> The number of input frames. Return The expected number of output frames for the given input frame count."},{"location":"api/dsp/AudioConverter/#getinputlatency","title":"GetInputLatency","text":"<p>[[nodiscard]] AmUInt64 GetInputLatency() const</p> <p>Returns the current input latency in frames.</p> Return The current input latency in frames."},{"location":"api/dsp/AudioConverter/#getoutputlatency","title":"GetOutputLatency","text":"<p>[[nodiscard]] AmUInt64 GetOutputLatency() const</p> <p>Returns the current output latency in frames.</p> Return The current output latency in frames."},{"location":"api/dsp/AudioConverter/#getrequiredinputframecount","title":"GetRequiredInputFrameCount","text":"<p>[[nodiscard]] AmUInt64 GetRequiredInputFrameCount(AmUInt64 outputFrameCount) const</p> <p>Returns the required number of frames to have as input for the given amount of output frames.</p> Parameter <code>outputFrameCount</code> The number of output frames. Return The input frame count needed to produce the given output frame count."},{"location":"api/dsp/AudioConverter/#process","title":"Process","text":"<p>void Process(const AudioBuffer&amp; input, AmUInt64&amp; inputFrames, AudioBuffer&amp; output, AmUInt64&amp; outputFrames)</p> <p>Converts the audio buffer from the source sample rate and channel count to the target sample rate and channel count.</p> Parameter <code>input</code> The source audio buffer. Parameter <code>inputFrames</code> The number of frames to process in the input audio buffer. Parameter <code>output</code> The target audio buffer to store the converted audio. Parameter <code>outputFrames</code> The number of frames to process in the target audio buffer."},{"location":"api/dsp/AudioConverter/#reset","title":"Reset","text":"<p>void Reset()</p> <p>Resets the internal state of the converter.</p>"},{"location":"api/dsp/AudioConverter/#setsamplerate","title":"SetSampleRate","text":"<p>void SetSampleRate(AmUInt64 sourceSampleRate, AmUInt64 targetSampleRate)</p> <p>Updates the source sample rate and target sample rate.</p> Parameter <code>sourceSampleRate</code> The source sample rate. Parameter <code>targetSampleRate</code> The target sample rate."},{"location":"api/dsp/AudioConverter/#audioconverter_2","title":"~AudioConverter","text":"<p>~AudioConverter()</p> <p>Destroys the instance and release associated resources.</p>"},{"location":"api/dsp/AudioConverter/Settings/","title":"Settings","text":"<p>struct Settings</p> <p>Store conversion settings for an <code>AudioConverter</code> instance.</p>"},{"location":"api/dsp/AudioConverter/Settings/#variables","title":"Variables","text":"Name Description m_sourceSampleRate The source sample rate. m_targetSampleRate The destination sample rate. m_sourceChannelCount The source channel count. m_targetChannelCount The destination channel count."},{"location":"api/dsp/AudioConverter/Settings/#variable-details","title":"Variable Details","text":""},{"location":"api/dsp/AudioConverter/Settings/#m_sourcechannelcount","title":"m_sourceChannelCount","text":"<p>AmUInt16 m_sourceChannelCount</p> <p>The source channel count.</p>"},{"location":"api/dsp/AudioConverter/Settings/#m_sourcesamplerate","title":"m_sourceSampleRate","text":"<p>AmUInt32 m_sourceSampleRate</p> <p>The source sample rate.</p>"},{"location":"api/dsp/AudioConverter/Settings/#m_targetchannelcount","title":"m_targetChannelCount","text":"<p>AmUInt16 m_targetChannelCount</p> <p>The destination channel count.</p>"},{"location":"api/dsp/AudioConverter/Settings/#m_targetsamplerate","title":"m_targetSampleRate","text":"<p>AmUInt32 m_targetSampleRate</p> <p>The destination sample rate.</p>"},{"location":"api/dsp/Convolver/","title":"Convolver","text":"<p>class Convolver</p> <p>Implementation of a partitioned FFT convolution algorithm with uniform block size.</p> <p>Some notes on how to use it:</p> <ul> <li> <p>After initialization with an impulse response, subsequent data portions of   arbitrary length can be convolved. The convolver internally can handle   this by using appropriate buffering.</p> </li> <li> <p>The convolver works without \"latency\" (except for the required   processing time, of course), i.e. the output always is the convolved   input for each processing call.</p> </li> <li> <p>The convolver is suitable for real-time processing which means that no   \"unpredictable\" operations like allocations, locking, API calls, etc. are   performed during processing (all necessary allocations and preparations take   place during initialization).</p> </li> </ul>"},{"location":"api/dsp/Convolver/#functions","title":"Functions","text":"Name Description Convolver Default constructor. ~Convolver Destructor. Init Initializes the convolver. Process Convolves the the given input samples and immediately outputs the result. Reset Resets the convolver state and discards the set impulse response. GetSegmentSize Gets the size of a single convolution segment. GetSegmentCount Gets the number of convolution segments."},{"location":"api/dsp/Convolver/#function-details","title":"Function Details","text":""},{"location":"api/dsp/Convolver/#convolver_1","title":"Convolver","text":"<p>Convolver()</p> <p>Default constructor.</p> <p>Creates an uninitialized convolver.</p>"},{"location":"api/dsp/Convolver/#getsegmentcount","title":"GetSegmentCount","text":"<p>[[nodiscard]] AmSize GetSegmentCount() const</p> <p>Gets the number of convolution segments.</p> Return The number of convolution segments."},{"location":"api/dsp/Convolver/#getsegmentsize","title":"GetSegmentSize","text":"<p>[[nodiscard]] AmSize GetSegmentSize() const</p> <p>Gets the size of a single convolution segment.</p> Return The size of a single convolution segment."},{"location":"api/dsp/Convolver/#init","title":"Init","text":"<p>bool Init(AmSize blockSize, const AmAudioSample* ir, AmSize irLen)</p> <p>Initializes the convolver.</p> Parameter <code>blockSize</code> Block size internally used by the convolver (partition size) Parameter <code>ir</code> The impulse response Parameter <code>irLen</code> Length of the impulse response Return <code>true</code> when the convolver is successfully initialized, <code>false</code> otherwise."},{"location":"api/dsp/Convolver/#process","title":"Process","text":"<p>void Process(const AmAudioSample* input, AmAudioSample* output, AmSize len)</p> <p>Convolves the the given input samples and immediately outputs the result.</p> Parameter <code>input</code> The input samples. Parameter <code>output</code> The convolution result. Parameter <code>len</code> Number of input/output samples to process."},{"location":"api/dsp/Convolver/#reset","title":"Reset","text":"<p>void Reset()</p> <p>Resets the convolver state and discards the set impulse response.</p> <p>The convolver will need to be initialized again after this call.</p>"},{"location":"api/dsp/Convolver/#convolver_2","title":"~Convolver","text":"<p>virtual ~Convolver()</p> <p>Destructor.</p> <p>Destroys the convolver and frees all allocated resources.</p>"},{"location":"api/dsp/FFT/","title":"FFT","text":"<p>class  FFT</p> <p>The Fast Fourier Transform (FFT) class.</p> <p>This utility class is used to perform Fast Fourier Transform (FFT) operations on audio data with real-to-complex/complex-to-real routines. The algorithm is highly optimized for speed, and the class provides and high-level API for the user.</p> <p>The output of the operation is ready-to-use, that means all the post processing operations (scale, normalization, etc.) have been applied.</p>"},{"location":"api/dsp/FFT/#functions","title":"Functions","text":"Name Description GetOutputSize Gets the FFT output buffer size. FFT The default constructor. ~FFT Destructor. Initialize Initializes the FFT instance. Forward Performs the forward FFT operation. Backward Performs the inverse FFT operation."},{"location":"api/dsp/FFT/#function-details","title":"Function Details","text":""},{"location":"api/dsp/FFT/#backward","title":"Backward","text":"<p>void Backward(AmReal32* output, SplitComplex&amp; splitComplex) const</p> <p>Performs the inverse FFT operation.</p> Parameter <code>output</code> The output audio data. This buffer needs to be of the same size as the one provided to the <code>Initialize()</code> method. Parameter <code>splitComplex</code> The complex buffer output separated into real and imaginary parts. The buffer will be resized if necessary."},{"location":"api/dsp/FFT/#fft_1","title":"FFT","text":"<p>FFT()</p> <p>The default constructor.</p>"},{"location":"api/dsp/FFT/#forward","title":"Forward","text":"<p>void Forward(const AmReal32* input, SplitComplex&amp; splitComplex) const</p> <p>Performs the forward FFT operation.</p> Parameter <code>input</code> The input audio data. This buffer needs to be of the same size as the one provided to the <code>Initialize()</code> method. Parameter <code>splitComplex</code> The complex buffer output separated into real and imaginary parts. The buffer will be resized if necessary."},{"location":"api/dsp/FFT/#getoutputsize","title":"GetOutputSize","text":"<p>static AmUInt64 GetOutputSize(AmUInt64 inputSize)</p> <p>Gets the FFT output buffer size.</p> Parameter <code>inputSize</code> The size of the input buffer. Return The size of the FFT output buffer for the given input size."},{"location":"api/dsp/FFT/#initialize","title":"Initialize","text":"<p>void Initialize(AmSize size) const</p> <p>Initializes the FFT instance.</p> Parameter <code>size</code> The size of the input (as a power of 2)."},{"location":"api/dsp/FFT/#fft_2","title":"~FFT","text":"<p>~FFT()</p> <p>Destructor.</p>"},{"location":"api/dsp/Filter/","title":"Filter","text":"<p>class  Filter</p> <p>Base class to manage filters.</p> <p>A filter applies transformations to an audio buffer. The <code>Filter</code> class implements factory methods to create instances of <code>FilterInstance</code> objects, which are where the the filtering is done.</p> <p>The <code>Filter</code> class follows the plugins architecture, and thus, you are able to create your own filters by inheriting from this class, and by implementing the necessary dependencies.</p>"},{"location":"api/dsp/Filter/#types","title":"Types","text":"Name Description ParameterType The type of a filter parameter."},{"location":"api/dsp/Filter/#variables","title":"Variables","text":"Name Description m_name The name of this filter."},{"location":"api/dsp/Filter/#functions","title":"Functions","text":"Name Description Filter Create a new <code>Filter</code> instance. ~Filter Default destructor. GetParamCount Gets the maximum number of parameters available for this filter. GetParamName Gets the name of the parameter at the given index. GetParamType Gets the type of the parameter at the given index. GetParamMax Gets the maximum allowed value of the parameter at the given index. GetParamMin Gets the minimum allowed value of the parameter at the given index. CreateInstance Creates a new instance of the filter. DestroyInstance Destroys an instance of the filter. GetName Gets the name of this filter. Register Registers a new filter. Unregister Unregisters a filter. Find Look up a filter by name. Construct Creates a new instance of the the filter with the given name and returns its pointer. Destruct Destroys the given filter instance. LockRegistry Locks the filters registry. UnlockRegistry Unlocks the filters registry. GetRegistry Gets the list of registered filters."},{"location":"api/dsp/Filter/#variable-details","title":"Variable Details","text":""},{"location":"api/dsp/Filter/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this filter.</p>"},{"location":"api/dsp/Filter/#function-details","title":"Function Details","text":""},{"location":"api/dsp/Filter/#construct","title":"Construct","text":"<p>static FilterInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the the filter with the given name and returns its pointer.</p> <p>Note</p> <p>The returned pointer should be deleted using <code>Destruct()</code>.</p> Parameter <code>name</code> The name of the filter. Return The filter with the given name, or <code>nullptr</code> if none."},{"location":"api/dsp/Filter/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance()</p> <p>Creates a new instance of the filter.</p> Return A new instance of the filter."},{"location":"api/dsp/Filter/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(FilterInstance* instance) = 0</p> <p>Destroys an instance of the filter.</p> <p>Warning</p> <p>The instance should have been created with <code>CreateInstance()</code> before being destroyed with this method.</p> Parameter <code>instance</code> The filter instance to be destroyed."},{"location":"api/dsp/Filter/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, FilterInstance* instance)</p> <p>Destroys the given filter instance.</p> Parameter <code>name</code> The name of the filter. Parameter <code>instance</code> The filter instance to destroy."},{"location":"api/dsp/Filter/#filter_1","title":"Filter","text":"<p>explicit Filter(AmString name)</p> <p>Create a new <code>Filter</code> instance.</p> Parameter <code>name</code> The filter name. eg. \"Echo\"."},{"location":"api/dsp/Filter/#find","title":"Find","text":"<p>static std::shared_ptr&lt;Filter&gt; Find(const AmString&amp; name)</p> <p>Look up a filter by name.</p> Return The filter with the given name, or <code>nullptr</code> if none."},{"location":"api/dsp/Filter/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this filter.</p> Return The name of this filter."},{"location":"api/dsp/Filter/#getparamcount","title":"GetParamCount","text":"<p>[[nodiscard]] virtual AmUInt32 GetParamCount() const</p> <p>Gets the maximum number of parameters available for this filter.</p> Return The maximum number of filter parameters."},{"location":"api/dsp/Filter/#getparammax","title":"GetParamMax","text":"<p>[[nodiscard]] virtual AmReal32 GetParamMax(AmUInt32 index) const</p> <p>Gets the maximum allowed value of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The maximum allowed value of the parameter at the given index."},{"location":"api/dsp/Filter/#getparammin","title":"GetParamMin","text":"<p>[[nodiscard]] virtual AmReal32 GetParamMin(AmUInt32 index) const</p> <p>Gets the minimum allowed value of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The minimum allowed value of the parameter at the given index."},{"location":"api/dsp/Filter/#getparamname","title":"GetParamName","text":"<p>[[nodiscard]] virtual AmString GetParamName(AmUInt32 index) const</p> <p>Gets the name of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The name of the parameter at the given index."},{"location":"api/dsp/Filter/#getparamtype","title":"GetParamType","text":"<p>[[nodiscard]] virtual AmUInt32 GetParamType(AmUInt32 index) const</p> <p>Gets the type of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The type of the parameter at the given index."},{"location":"api/dsp/Filter/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, std::shared_ptr&lt;Filter&gt;&gt;&amp; GetRegistry()</p> <p>Gets the list of registered filters.</p> Return The registry of filters."},{"location":"api/dsp/Filter/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the filters registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new filters after the engine is fully loaded.</p>"},{"location":"api/dsp/Filter/#register","title":"Register","text":"<p>static void Register(std::shared_ptr&lt;Filter&gt; filter)</p> <p>Registers a new filter.</p> Parameter <code>filter</code> The filter to add in the registry."},{"location":"api/dsp/Filter/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the filters registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new filters after the engine is fully unloaded.</p>"},{"location":"api/dsp/Filter/#unregister","title":"Unregister","text":"<p>static void Unregister(std::shared_ptr&lt;const Filter&gt; filter)</p> <p>Unregisters a filter.</p> Parameter <code>filter</code> The filter to remove from the registry."},{"location":"api/dsp/Filter/#filter_2","title":"~Filter","text":"<p>virtual ~Filter()</p> <p>Default destructor.</p>"},{"location":"api/dsp/Filter/ParameterType/","title":"ParameterType","text":"<p>enum ParameterType</p> <p>The type of a filter parameter.</p> kParameterTypeFloat = 0 The parameter is a float. kParameterTypeInt The parameter is an integer. kParameterTypeBool The parameter is a boolean."},{"location":"api/dsp/FilterInstance/","title":"FilterInstance","text":"<p>class  FilterInstance</p> <p>A Filter instance.</p> <p>An object of this class will be created each time a <code>Filter</code> is requested.</p>"},{"location":"api/dsp/FilterInstance/#variables","title":"Variables","text":"Name Description m_parent The parent filter object that created this instance. m_numParams The number of parameters available for this filter. m_numParamsChanged The number of parameters that have changed since the last frame. m_parameters The parameters buffer."},{"location":"api/dsp/FilterInstance/#functions","title":"Functions","text":"Name Description FilterInstance Constructs a new <code>FilterInstance</code> object. ~FilterInstance Destroys the <code>FilterInstance</code> object. Initialize Initializes the filter instance with the provided number of parameters. AdvanceFrame Updates the filter instance state for the provided delta time. Process Executes the filter instance. GetParameter Gets the current value of the parameter at the given index. SetParameter Sets the value of the parameter at the given index. ProcessChannel Executes the filter instance on a single channel of the given buffer. ProcessSample Executes the filter instance on a single sample of the given buffer."},{"location":"api/dsp/FilterInstance/#variable-details","title":"Variable Details","text":""},{"location":"api/dsp/FilterInstance/#m_numparams","title":"m_numParams","text":"<p>AmUInt32 m_numParams</p> <p>The number of parameters available for this filter.</p>"},{"location":"api/dsp/FilterInstance/#m_numparamschanged","title":"m_numParamsChanged","text":"<p>AmUInt32 m_numParamsChanged</p> <p>The number of parameters that have changed since the last frame.</p>"},{"location":"api/dsp/FilterInstance/#m_parameters","title":"m_parameters","text":"<p>AmReal32* m_parameters</p> <p>The parameters buffer.</p>"},{"location":"api/dsp/FilterInstance/#m_parent","title":"m_parent","text":"<p>Filter* m_parent</p> <p>The parent filter object that created this instance.</p>"},{"location":"api/dsp/FilterInstance/#function-details","title":"Function Details","text":""},{"location":"api/dsp/FilterInstance/#advanceframe","title":"AdvanceFrame","text":"<p>virtual void AdvanceFrame(AmTime deltaTime)</p> <p>Updates the filter instance state for the provided delta time.</p> Parameter <code>deltaTime</code> The time in milliseconds since the last frame."},{"location":"api/dsp/FilterInstance/#filterinstance_1","title":"FilterInstance","text":"<p>explicit FilterInstance(Filter* parent)</p> <p>Constructs a new <code>FilterInstance</code> object.</p> Parameter <code>parent</code> The parent <code>Filter</code> object that created this instance."},{"location":"api/dsp/FilterInstance/#getparameter","title":"GetParameter","text":"<p>virtual AmReal32 GetParameter(AmUInt32 parameterIndex)</p> <p>Gets the current value of the parameter at the given index.</p> Parameter <code>parameterIndex</code> The index of the parameter to retrieve. Return The current value of the parameter."},{"location":"api/dsp/FilterInstance/#initialize","title":"Initialize","text":"<p>AmResult Initialize(AmUInt32 paramCount)</p> <p>Initializes the filter instance with the provided number of parameters.</p> Parameter <code>paramCount</code> The number of parameters the filter will need."},{"location":"api/dsp/FilterInstance/#process","title":"Process","text":"<p>virtual void Process(const AudioBuffer&amp; in, AudioBuffer&amp; out, AmUInt64 frames, AmUInt32 sampleRate)</p> <p>Executes the filter instance.</p> Parameter <code>in</code> The input buffer on which the filter should be applied. Parameter <code>out</code> The output buffer where the filtered output will be stored. Parameter <code>frames</code> The number of frames to process. Parameter <code>sampleRate</code> The current sample rate of the <code>buffer</code>."},{"location":"api/dsp/FilterInstance/#processchannel","title":"ProcessChannel","text":"<p>virtual void ProcessChannel(const AudioBuffer&amp; in, AudioBuffer&amp; out, AmUInt16 channel, AmUInt64 frames, AmUInt32 sampleRate)</p> <p>Executes the filter instance on a single channel of the given buffer.</p> Parameter <code>in</code> The input buffer on which the filter should be applied. Parameter <code>out</code> The output buffer where the filtered output will be stored. Parameter <code>channel</code> The index of the channel to process. Parameter <code>frames</code> The number of frames to process. Parameter <code>sampleRate</code> The current sample rate of the <code>buffer</code>."},{"location":"api/dsp/FilterInstance/#processsample","title":"ProcessSample","text":"<p>virtual AmAudioSample ProcessSample(AmAudioSample sample, AmUInt16 channel, AmUInt32 sampleRate)</p> <p>Executes the filter instance on a single sample of the given buffer.</p> Parameter <code>sample</code> The audio sample to process. Parameter <code>channel</code> The index of the channel to process. Parameter <code>sampleRate</code> The current sample rate of the <code>buffer</code>."},{"location":"api/dsp/FilterInstance/#setparameter","title":"SetParameter","text":"<p>virtual void SetParameter(AmUInt32 parameterIndex, AmReal32 value)</p> <p>Sets the value of the parameter at the given index.</p> Parameter <code>parameterIndex</code> The index of the parameter to retrieve. Parameter <code>value</code> The value to set to the parameter."},{"location":"api/dsp/FilterInstance/#filterinstance_2","title":"~FilterInstance","text":"<p>virtual ~FilterInstance()</p> <p>Destroys the <code>FilterInstance</code> object.</p>"},{"location":"api/dsp/Resampler/","title":"Resampler","text":"<p>class  Resampler</p> <p>Base class to manage resamplers.</p> <p>A resampler is used to change the sample rate of an audio buffer. The <code>Resampler</code> class implements factory methods to create instances of <code>ResamplerInstance</code> objects, which are where the the resampling is done.</p> <p>The <code>Resampler</code> class follows the plugins architecture, and thus, you are able to create your own resamplers and register them to the <code>Engine</code> by inheriting from this class, and by implementing the necessary dependencies.</p>"},{"location":"api/dsp/Resampler/#variables","title":"Variables","text":"Name Description m_name The name of this resampler."},{"location":"api/dsp/Resampler/#functions","title":"Functions","text":"Name Description Resampler Create a new Resampler instance. Resampler Default Resampler constructor. ~Resampler Default destructor. CreateInstance Creates a new instance of the resampler. DestroyInstance Destroys an instance of the resampler. GetName Gets the name of this resampler. Register Registers a new resampler. Unregister Unregisters a resampler. Construct Creates a new instance of the resampler with the given name and returns its pointer. Destruct Destroys the given resampler instance. LockRegistry Locks the resamplers registry. UnlockRegistry Unlocks the resamplers registry. GetRegistry Gets the list of registered Resamplers."},{"location":"api/dsp/Resampler/#variable-details","title":"Variable Details","text":""},{"location":"api/dsp/Resampler/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this resampler.</p>"},{"location":"api/dsp/Resampler/#function-details","title":"Function Details","text":""},{"location":"api/dsp/Resampler/#construct","title":"Construct","text":"<p>static ResamplerInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the resampler with the given name and returns its pointer.</p> <p>Note</p> <p>The returned pointer should be deleted using <code>Destruct()</code>.</p> Parameter <code>name</code> The name of the resampler. Return The resampler with the given name, or <code>nullptr</code> if none."},{"location":"api/dsp/Resampler/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance()</p> <p>Creates a new instance of the resampler.</p> Return A new instance of the resampler."},{"location":"api/dsp/Resampler/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(ResamplerInstance* instance) = 0</p> <p>Destroys an instance of the resampler.</p> <p>Warning</p> <p>The instance should have been created with <code>CreateInstance()</code> before being destroyed with this method.</p> Parameter <code>instance</code> The resampler instance to be destroyed."},{"location":"api/dsp/Resampler/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, ResamplerInstance* instance)</p> <p>Destroys the given resampler instance.</p> Parameter <code>name</code> The name of the resampler. Parameter <code>instance</code> The resampler instance to destroy."},{"location":"api/dsp/Resampler/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this resampler.</p> Return The name of this resampler."},{"location":"api/dsp/Resampler/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, std::shared_ptr&lt;Resampler&gt;&gt;&amp; GetRegistry()</p> <p>Gets the list of registered Resamplers.</p> Return The registry of Resamplers."},{"location":"api/dsp/Resampler/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the resamplers registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new resamplers after the engine is fully loaded.</p>"},{"location":"api/dsp/Resampler/#register","title":"Register","text":"<p>static void Register(std::shared_ptr&lt;Resampler&gt; resampler)</p> <p>Registers a new resampler.</p> Parameter <code>resampler</code> The resampler to add in the registry."},{"location":"api/dsp/Resampler/#resampler_1","title":"Resampler","text":"<p>explicit Resampler(AmString name)</p> <p>Create a new Resampler instance.</p> Parameter <code>name</code> The resampler name. e.g. \"MiniAudioLinear\". <p>Resampler()</p> <p>Default Resampler constructor.</p> <p>This will not automatically register the resampler. It's meant for internal resamplers only.</p>"},{"location":"api/dsp/Resampler/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the resamplers registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new resamplers after the engine is fully unloaded.</p>"},{"location":"api/dsp/Resampler/#unregister","title":"Unregister","text":"<p>static void Unregister(std::shared_ptr&lt;const Resampler&gt; resampler)</p> <p>Unregisters a resampler.</p> Parameter <code>resampler</code> The resampler to remove from the registry."},{"location":"api/dsp/Resampler/#resampler_2","title":"~Resampler","text":"<p>virtual ~Resampler()</p> <p>Default destructor.</p>"},{"location":"api/dsp/ResamplerInstance/","title":"ResamplerInstance","text":"<p>class  ResamplerInstance</p> <p>A Resampler instance.</p> <p>An object of this class will be created each time a <code>Resampler</code> is requested.</p>"},{"location":"api/dsp/ResamplerInstance/#functions","title":"Functions","text":"Name Description ResamplerInstance Constructs a new <code>ResamplerInstance</code> object. ~ResamplerInstance Default destructor. Initialize Initializes a new instance of the resampler. Process Processes the audio data. SetSampleRate Changes the input and output sample rate. GetSampleRateIn Gets the current input sample rate. GetSampleRateOut Gets the current output sample rate. GetChannelCount Gets the current channels count. GetRequiredInputFrames Returns the required number of frames to have as input for the given amount of output frames. GetExpectedOutputFrames Returns the expected number of frames to have as output for the given amount of input frames. GetInputLatency Returns the current input latency in frames. GetOutputLatency Returns the current output latency in frames. Reset Resets the internal resampler state. Clear Cleans up the internal resampler state and allocated data."},{"location":"api/dsp/ResamplerInstance/#function-details","title":"Function Details","text":""},{"location":"api/dsp/ResamplerInstance/#clear","title":"Clear","text":"<p>virtual void Clear() = 0</p> <p>Cleans up the internal resampler state and allocated data.</p> <p>Note</p> <p>This method is called when the resampler is about to be destroyed.</p>"},{"location":"api/dsp/ResamplerInstance/#getchannelcount","title":"GetChannelCount","text":"<p>[[nodiscard]] virtual AmUInt16 GetChannelCount() const = 0</p> <p>Gets the current channels count.</p> Return The current channels count."},{"location":"api/dsp/ResamplerInstance/#getexpectedoutputframes","title":"GetExpectedOutputFrames","text":"<p>[[nodiscard]] virtual AmUInt64 GetExpectedOutputFrames(AmUInt64 inputFrameCount) const = 0</p> <p>Returns the expected number of frames to have as output for the given amount of input frames.</p> Parameter <code>inputFrameCount</code> The number of input frames. Return The expected number of output frames for the given input frame count."},{"location":"api/dsp/ResamplerInstance/#getinputlatency","title":"GetInputLatency","text":"<p>[[nodiscard]] virtual AmUInt64 GetInputLatency() const = 0</p> <p>Returns the current input latency in frames.</p> Return The resampler's current input latency in frames."},{"location":"api/dsp/ResamplerInstance/#getoutputlatency","title":"GetOutputLatency","text":"<p>[[nodiscard]] virtual AmUInt64 GetOutputLatency() const = 0</p> <p>Returns the current output latency in frames.</p> Return The resampler's current output latency in frames."},{"location":"api/dsp/ResamplerInstance/#getrequiredinputframes","title":"GetRequiredInputFrames","text":"<p>[[nodiscard]] virtual AmUInt64 GetRequiredInputFrames(AmUInt64 outputFrameCount) const = 0</p> <p>Returns the required number of frames to have as input for the given amount of output frames.</p> Parameter <code>outputFrameCount</code> The number of output frames. Return The input frame count needed to produce the given output frame count."},{"location":"api/dsp/ResamplerInstance/#getsampleratein","title":"GetSampleRateIn","text":"<p>[[nodiscard]] virtual AmUInt32 GetSampleRateIn() const = 0</p> <p>Gets the current input sample rate.</p> Return The current input sample rate."},{"location":"api/dsp/ResamplerInstance/#getsamplerateout","title":"GetSampleRateOut","text":"<p>[[nodiscard]] virtual AmUInt32 GetSampleRateOut() const = 0</p> <p>Gets the current output sample rate.</p> Return The current output sample rate."},{"location":"api/dsp/ResamplerInstance/#initialize","title":"Initialize","text":"<p>virtual void Initialize(AmUInt16 channelCount, AmUInt32 sampleRateIn, AmUInt32 sampleRateOut) = 0</p> <p>Initializes a new instance of the resampler.</p> Parameter <code>channelCount</code> The number of channels in the audio data. Parameter <code>sampleRateIn</code> The input sample rate. Parameter <code>sampleRateOut</code> The output sample rate."},{"location":"api/dsp/ResamplerInstance/#process","title":"Process","text":"<p>virtual bool Process(const AudioBuffer&amp; input, AmUInt64&amp; inputFrames, AudioBuffer&amp; output, AmUInt64&amp; outputFrames) = 0</p> <p>Processes the audio data.</p> Parameter <code>input</code> The input audio data. Parameter <code>inputFrames</code> The number of frames in the input buffer. Parameter <code>output</code> The output audio data. Parameter <code>outputFrames</code> The number of frames in the output buffer. Return <code>true</code> if the resampling was successful, <code>false</code> otherwise."},{"location":"api/dsp/ResamplerInstance/#resamplerinstance_1","title":"ResamplerInstance","text":"<p>ResamplerInstance() = default</p> <p>Constructs a new <code>ResamplerInstance</code> object.</p> <p>This will initialize the resampler instance state to default values.</p>"},{"location":"api/dsp/ResamplerInstance/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the internal resampler state.</p>"},{"location":"api/dsp/ResamplerInstance/#setsamplerate","title":"SetSampleRate","text":"<p>virtual void SetSampleRate(AmUInt32 sampleRateIn, AmUInt32 sampleRateOut) = 0</p> <p>Changes the input and output sample rate.</p> Parameter <code>sampleRateIn</code> The new input sample rate. Parameter <code>sampleRateOut</code> The new output sample rate."},{"location":"api/dsp/ResamplerInstance/#resamplerinstance_2","title":"~ResamplerInstance","text":"<p>virtual ~ResamplerInstance() = default</p> <p>Default destructor.</p>"},{"location":"api/dsp/SplitComplex/","title":"SplitComplex","text":"<p>class  SplitComplex</p> <p>Buffer for split-complex representation of FFT results.</p> <p>The split-complex representation stores the real and imaginary parts of FFT results in two different memory buffers which is useful e.g. for SIMD optimizations.</p>"},{"location":"api/dsp/SplitComplex/#operators","title":"Operators","text":"Name Description operator[] Gets the complex value at the given index."},{"location":"api/dsp/SplitComplex/#functions","title":"Functions","text":"Name Description SplitComplex Creates a new split-complex buffer with the given initial size. ~SplitComplex Destroy the split-complex buffer and release all allocated memory. Release Releases all allocated memory. Resize Resizes the split-complex buffer to the given size. Clear Clears the split-complex buffer. CopyFrom Copies the given split-complex buffer to this one. GetSize Gets the current size of the split-complex buffer. re Gets the real part of the split-complex buffer. re Gets the real part of the split-complex buffer. im Gets the imaginary part of the split-complex buffer. im Gets the imaginary part of the split-complex buffer."},{"location":"api/dsp/SplitComplex/#operator-details","title":"Operator Details","text":""},{"location":"api/dsp/SplitComplex/#operator","title":"operator[]","text":"<p>[[nodiscard]] std::complex&lt;AmAudioSample&gt; operator const</p> <p>Gets the complex value at the given index.</p> Parameter <code>index</code> The index of the complex value. Return The complex value at the given index."},{"location":"api/dsp/SplitComplex/#function-details","title":"Function Details","text":""},{"location":"api/dsp/SplitComplex/#clear","title":"Clear","text":"<p>void Clear() const</p> <p>Clears the split-complex buffer.</p>"},{"location":"api/dsp/SplitComplex/#copyfrom","title":"CopyFrom","text":"<p>void CopyFrom(const SplitComplex&amp; other) const</p> <p>Copies the given split-complex buffer to this one.</p> Parameter <code>other</code> The split-complex buffer to copy."},{"location":"api/dsp/SplitComplex/#getsize","title":"GetSize","text":"<p>[[nodiscard]] inline AmSize GetSize() const</p> <p>Gets the current size of the split-complex buffer.</p> Return The size of the split-complex buffer."},{"location":"api/dsp/SplitComplex/#release","title":"Release","text":"<p>void Release()</p> <p>Releases all allocated memory.</p>"},{"location":"api/dsp/SplitComplex/#resize","title":"Resize","text":"<p>void Resize(AmSize newSize, bool clear = false)</p> <p>Resizes the split-complex buffer to the given size.</p> Parameter <code>newSize</code> The new size of the split-complex buffer. Parameter <code>clear</code> Whether to clear the buffer after resizing."},{"location":"api/dsp/SplitComplex/#splitcomplex_1","title":"SplitComplex","text":"<p>explicit SplitComplex(AmSize initialSize = 0)</p> <p>Creates a new split-complex buffer with the given initial size.</p> Parameter <code>initialSize</code> The initial size of the split-complex buffer."},{"location":"api/dsp/SplitComplex/#im","title":"im","text":"<p>AmAudioSample* im()</p> <p>Gets the imaginary part of the split-complex buffer.</p> Return The imaginary part of the split-complex buffer. <p>[[nodiscard]] const AmAudioSample* im() const</p> <p>Gets the imaginary part of the split-complex buffer.</p> Return The imaginary part of the split-complex buffer."},{"location":"api/dsp/SplitComplex/#re","title":"re","text":"<p>AmAudioSample* re()</p> <p>Gets the real part of the split-complex buffer.</p> Return The real part of the split-complex buffer. <p>[[nodiscard]] const AmAudioSample* re() const</p> <p>Gets the real part of the split-complex buffer.</p> Return The real part of the split-complex buffer."},{"location":"api/dsp/SplitComplex/#splitcomplex_2","title":"~SplitComplex","text":"<p>~SplitComplex()</p> <p>Destroy the split-complex buffer and release all allocated memory.</p>"},{"location":"api/engine/","title":"Engine","text":"<p>Engine-specific functionalities</p>"},{"location":"api/engine/#types","title":"Types","text":"Name Description AttenuationZone The propagation shape for positional sounds. Bus An object representing one node in the tree of buses. Buses are used to adjust a set of channel gains in tandem. Channel An object that represents a single channel of audio. ChannelEvent Enumerates the events triggered by a <code>Channel</code> during playback. ChannelEventCallback A callback function for handling channel events. ChannelEventInfo The event info passed to the channel event listener. ChannelEventListener Channel Event listener. Codec Audio file reader and writer. DeviceDescription The device description. DeviceNotification The possible device notification types. DeviceState The device state. Driver Base class for audio device driver implementations. EffectInstance An instance of an <code>Effect</code> asset. Engine The Amplitude Engine. Entity An Entity represents a spatially positioned object in the game. Environment An Environment is a zone where every spatialized audio playing inside him got * applied a specific effect. EventCanceler An helper class used to cancel a running <code>Event</code>. EventInstance A triggered event. Fader Helper class to process faders. FaderInstance A Fader instance. An object of this class will be created each time a <code>Fader</code> is requested. Listener A object which can render sound sources. PlaybackOutputChannels The playback output channel layout of the device. PlaybackOutputFormat The playback output format of the device. Room Represents a physical space where sound waves can propagate. RoomMaterial Represents the material of a <code>Room</code> wall. RoomMaterialType Defines the material type of a <code>Room</code> wall. RoomWall Enumerates the walls of a <code>Room</code>. RtpcValue A RTPC compatible value is used as a wrapper to hold property values * that can be linked to RTPCs. SoundObject Base class for Amplitude sound objects. SwitchContainerItem Describes a single item within a <code>SwitchContainer</code>. SwitchState A switch state. eChannelPlaybackState Enumerates the playback states for a <code>Channel</code>. eFaderState Enumerates the list of states in a fader."},{"location":"api/engine/#macros","title":"Macros","text":"Name Description AM_AUDIO_SAMPLE_MAX The maximum value for an audio sample. AM_AUDIO_SAMPLE_MIN The minimum value for an audio sample. AM_INVALID_HANDLE Define an invalid object handle. AM_IS_VALID_HANDLE Checks if a handle is valid amEngine Macro to get the current Amplitude engine instance."},{"location":"api/engine/#functions","title":"Functions","text":"Name Description AM_CALLBACK The device notification callback. CallDeviceNotificationCallback Calls the registered device notification callback. RegisterDeviceNotificationCallback Registers a callback to listen to device state changes. UnregisterDeviceNotificationCallback Unregisters the registered device notification callback."},{"location":"api/engine/#macro-details","title":"Macro Details","text":""},{"location":"api/engine/#am_audio_sample_max","title":"AM_AUDIO_SAMPLE_MAX","text":"<p>#define AM_AUDIO_SAMPLE_MAX</p> <p>The maximum value for an audio sample.</p>"},{"location":"api/engine/#am_audio_sample_min","title":"AM_AUDIO_SAMPLE_MIN","text":"<p>#define AM_AUDIO_SAMPLE_MIN</p> <p>The minimum value for an audio sample.</p>"},{"location":"api/engine/#am_invalid_handle","title":"AM_INVALID_HANDLE","text":"<p>#define AM_INVALID_HANDLE</p> <p>Define an invalid object handle.</p>"},{"location":"api/engine/#am_is_valid_handle","title":"AM_IS_VALID_HANDLE","text":"<p>#define AM_IS_VALID_HANDLE(handle)</p> <p>Checks if a handle is valid</p> Parameter <code>handle</code> The handle to check Return <code>true</code> if the handle is valid, <code>false</code> otherwise."},{"location":"api/engine/#amengine","title":"amEngine","text":"<p>#define amEngine</p> <p>Macro to get the current Amplitude engine instance.</p>"},{"location":"api/engine/#function-details","title":"Function Details","text":""},{"location":"api/engine/#am_callback","title":"AM_CALLBACK","text":"<p>AM_CALLBACK(void, DeviceNotificationCallback)(DeviceNotification notification, const DeviceDescription&amp; device, Driver* driver)</p> <p>The device notification callback.</p> Parameter <code>notification</code> The notification type. Parameter <code>device</code> The device description. Parameter <code>driver</code> The driver which triggered the device notification."},{"location":"api/engine/#calldevicenotificationcallback","title":"CallDeviceNotificationCallback","text":"<p>void CallDeviceNotificationCallback(DeviceNotification notification, const DeviceDescription&amp; device, Driver* driver)</p> <p>Calls the registered device notification callback.</p> Parameter <code>notification</code> The notification type. Parameter <code>device</code> The device description. Parameter <code>driver</code> The driver which triggered the device notification."},{"location":"api/engine/#registerdevicenotificationcallback","title":"RegisterDeviceNotificationCallback","text":"<p>void RegisterDeviceNotificationCallback(DeviceNotificationCallback callback)</p> <p>Registers a callback to listen to device state changes.</p> Parameter <code>callback</code> The callback to register."},{"location":"api/engine/#unregisterdevicenotificationcallback","title":"UnregisterDeviceNotificationCallback","text":"<p>void UnregisterDeviceNotificationCallback()</p> <p>Unregisters the registered device notification callback.</p>"},{"location":"api/engine/AttenuationZone/","title":"AttenuationZone","text":"<p>class  AttenuationZone</p> <p>The propagation shape for positional sounds.</p> <p>This allows to increase the attenuation according to the shape of the sound propagation.</p>"},{"location":"api/engine/AttenuationZone/#functions","title":"Functions","text":"Name Description ~AttenuationZone Default destructor. GetAttenuationFactor Returns the attenuation factor. GetAttenuationFactor Returns the attenuation factor."},{"location":"api/engine/AttenuationZone/#function-details","title":"Function Details","text":""},{"location":"api/engine/AttenuationZone/#getattenuationfactor","title":"GetAttenuationFactor","text":"<p>virtual AmReal32 GetAttenuationFactor(const Attenuation* attenuation, const AmVec3&amp; soundLocation, const Listener&amp; listener) = 0</p> <p>Returns the attenuation factor.</p> <p>This method is used only for position based sound sources.</p> Parameter <code>attenuation</code> The Attenuator object to use for distance attenuation. Parameter <code>soundLocation</code> The location of the sound source. Parameter <code>listener</code> The listener for which compute the attenuation. Return The attenuation factor. <p>virtual AmReal32 GetAttenuationFactor(const Attenuation* attenuation, const Entity&amp; entity, const Listener&amp; listener) = 0</p> <p>Returns the attenuation factor.</p> <p>This method is used by position and orientation based sound sources.</p> Parameter <code>attenuation</code> The Attenuator object to use for distance attenuation. Parameter <code>entity</code> The entity which emits the sound. Parameter <code>listener</code> The listener for which compute the attenuation. Return The attenuation factor."},{"location":"api/engine/AttenuationZone/#attenuationzone_1","title":"~AttenuationZone","text":"<p>virtual ~AttenuationZone() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/Bus/","title":"Bus","text":"<p>class  Bus</p> <p>An object representing one node in the tree of buses. Buses are used to adjust a set of channel gains in tandem.</p> <p>The <code>Bus</code> class is a lightweight reference to a <code>BusInternalState</code> object which is managed by the Engine. There is always at least one bus, the master bus, and any number of additional buses may be defined as well. Each bus can be thought as a node in the tree. The gain on a <code>Bus</code> is applied to all child buses as well.</p>"},{"location":"api/engine/Bus/#functions","title":"Functions","text":"Name Description Bus Creates an uninitialized <code>Bus</code>. Bus Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Bus</code>. Valid Checks whether this <code>Bus</code> has been initialized. GetId Gets the unique ID of this <code>Bus</code>. GetName Gets the name of this <code>Bus</code>. SetGain Sets the gain of this <code>Bus</code>. GetGain Returns the user specified gain on this <code>Bus</code>. FadeTo Fades to <code>gain</code> over <code>duration</code> milliseconds. GetFinalGain Returns the final calculated gain on this <code>Bus</code>. SetMute Sets the muted state of this <code>Bus</code>. IsMuted Returns whether this <code>Bus</code> is muted. GetState Returns the internal state of this <code>Bus</code>."},{"location":"api/engine/Bus/#function-details","title":"Function Details","text":""},{"location":"api/engine/Bus/#bus_1","title":"Bus","text":"<p>Bus()</p> <p>Creates an uninitialized <code>Bus</code>.</p> <p>An uninitialized Bus cannot set or get any of it's fields.</p> <p>explicit Bus(BusInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Bus/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Bus</code>.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/engine/Bus/#fadeto","title":"FadeTo","text":"<p>void FadeTo(AmReal32 gain, AmTime duration) const</p> <p>Fades to <code>gain</code> over <code>duration</code> milliseconds.</p> Parameter <code>gain</code> The gain value to fade to. Parameter <code>duration</code> The amount of time in milliseconds to take to reach the desired gain."},{"location":"api/engine/Bus/#getfinalgain","title":"GetFinalGain","text":"<p>[[nodiscard]] AmReal32 GetFinalGain() const</p> <p>Returns the final calculated gain on this <code>Bus</code>.</p> <p>Note</p> <p>The final gain of a bus is the product of the gain specified in the bus definition file, with the gain specified by the user, and with the final gain of the parent bus.</p> Return The final calculated gain."},{"location":"api/engine/Bus/#getgain","title":"GetGain","text":"<p>[[nodiscard]] AmReal32 GetGain() const</p> <p>Returns the user specified gain on this <code>Bus</code>.</p> Return The user specified gain."},{"location":"api/engine/Bus/#getid","title":"GetId","text":"<p>[[nodiscard]] AmBusID GetId() const</p> <p>Gets the unique ID of this <code>Bus</code>.</p> Return The bus unique ID."},{"location":"api/engine/Bus/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this <code>Bus</code>.</p> Return The bus name."},{"location":"api/engine/Bus/#getstate","title":"GetState","text":"<p>[[nodiscard]] BusInternalState* GetState() const</p> <p>Returns the internal state of this <code>Bus</code>.</p> <p>Warning</p> <p>This method is only for internal usage.</p> Return The bus internal state."},{"location":"api/engine/Bus/#ismuted","title":"IsMuted","text":"<p>[[nodiscard]] bool IsMuted() const</p> <p>Returns whether this <code>Bus</code> is muted.</p> Return <code>true</code> if this Bus is muted, <code>false</code> otherwise."},{"location":"api/engine/Bus/#setgain","title":"SetGain","text":"<p>void SetGain(AmReal32 gain) const</p> <p>Sets the gain of this <code>Bus</code>.</p> Parameter <code>gain</code> The new gain value."},{"location":"api/engine/Bus/#setmute","title":"SetMute","text":"<p>void SetMute(bool mute) const</p> <p>Sets the muted state of this <code>Bus</code>.</p> Parameter <code>mute</code> The muted state."},{"location":"api/engine/Bus/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Bus</code> has been initialized.</p> Return <code>true</code> if this <code>Bus</code> has been initialized."},{"location":"api/engine/Channel/","title":"Channel","text":"<p>class  Channel</p> <p>An object that represents a single channel of audio.</p> <p>The <code>Channel</code> class is a lightweight reference to a <code>ChannelInternalState</code> object which is managed by the Engine. Multiple channels may point to the same underlying data.</p>"},{"location":"api/engine/Channel/#functions","title":"Functions","text":"Name Description Channel Construct an uninitialized <code>Channel</code>. Channel Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Channel</code>. Valid Checks whether this <code>Channel</code> has been initialized. GetId Gets the ID of this <code>Channel</code>. Playing Checks if the sound associated to this <code>Channel</code> is playing. Stop Stops the <code>Channel</code>. Pause Pauses the <code>Channel</code>. Resume Resumes the <code>Channel</code>. GetLocation Gets the location of this <code>Channel</code>. SetLocation Sets the location of this <code>Channel</code>. SetGain Sets the gain on this <code>Channel</code>. GetGain Returns the gain on this <code>Channel</code>. GetPlaybackState Returns the playback state of this <code>Channel</code>. GetEntity Returns the <code>Entity</code> associated with this <code>Channel</code>. GetListener Returns the <code>Listener</code> associated with this <code>Channel</code>. GetRoom Returns the <code>Room</code> associated with this <code>Channel</code>. GetState Returns the internal state of this Channel. On Registers a callback for a channel event."},{"location":"api/engine/Channel/#function-details","title":"Function Details","text":""},{"location":"api/engine/Channel/#channel_1","title":"Channel","text":"<p>Channel()</p> <p>Construct an uninitialized <code>Channel</code>.</p> <p>An uninitialized <code>Channel</code> cannot have its data set or queried.</p> <p>explicit Channel(ChannelInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Channel/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Channel</code>.</p> <p>Note that this does not stop the audio or destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/engine/Channel/#getentity","title":"GetEntity","text":"<p>[[nodiscard]] Entity GetEntity() const</p> <p>Returns the <code>Entity</code> associated with this <code>Channel</code>.</p> <p>Note</p> <p>If no <code>Entity</code> is associated with this <code>Channel</code>, this method will return an uninitialized <code>Entity</code> object. You should check if the entity is valid before using it.</p> Return The entity associated with this <code>Channel</code>. See Entity"},{"location":"api/engine/Channel/#getgain","title":"GetGain","text":"<p>[[nodiscard]] AmReal32 GetGain() const</p> <p>Returns the gain on this <code>Channel</code>.</p> Return The channel's gain."},{"location":"api/engine/Channel/#getid","title":"GetId","text":"<p>[[nodiscard]] AmUInt64 GetId() const</p> <p>Gets the ID of this <code>Channel</code>.</p> Return The ID of this <code>Channel</code>."},{"location":"api/engine/Channel/#getlistener","title":"GetListener","text":"<p>[[nodiscard]] Listener GetListener() const</p> <p>Returns the <code>Listener</code> associated with this <code>Channel</code>.</p> <p>Note</p> <p>If no <code>Listener</code> is associated with this <code>Channel</code>, this method will return an uninitialized <code>Listener</code> object. You should check if the listener is valid before using it.</p> Return The listener associated with this <code>Channel</code>. See Listener"},{"location":"api/engine/Channel/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the location of this <code>Channel</code>.</p> <p>If the audio on this channel is not set to be Positional, this method will return an invalid location.</p> Return The location of this <code>Channel</code>."},{"location":"api/engine/Channel/#getplaybackstate","title":"GetPlaybackState","text":"<p>[[nodiscard]] eChannelPlaybackState GetPlaybackState() const</p> <p>Returns the playback state of this <code>Channel</code>.</p> Return A <code>ChannelPlaybackState</code> enumeration value representing the current state of the <code>Channel</code>."},{"location":"api/engine/Channel/#getroom","title":"GetRoom","text":"<p>[[nodiscard]] Room GetRoom() const</p> <p>Returns the <code>Room</code> associated with this <code>Channel</code>.</p> <p>Note</p> <p>If no <code>Room</code> is associated with this <code>Channel</code>, this method will return an uninitialized <code>Room</code> object. You should check if the room is valid before using it.</p> Return The room associated with this Channel."},{"location":"api/engine/Channel/#getstate","title":"GetState","text":"<p>[[nodiscard]] ChannelInternalState* GetState() const</p> <p>Returns the internal state of this Channel.</p> Return The internal state of this Channel. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Channel/#on","title":"On","text":"<p>void On(ChannelEvent event, ChannelEventCallback callback, void* userData = nullptr) const</p> <p>Registers a callback for a channel event.</p> Parameter <code>event</code> The channel event. Parameter <code>callback</code> The callback function. Parameter <code>userData</code> The user data to pass to the callback. See ChannelEvent See ChannelEventCallback"},{"location":"api/engine/Channel/#pause","title":"Pause","text":"<p>void Pause(AmTime duration = kMinFadeDuration) const</p> <p>Pauses the <code>Channel</code>.</p> <p>A paused channel may be resumed where it left off.</p> Parameter <code>duration</code> The fade out duration before to pause the channel."},{"location":"api/engine/Channel/#playing","title":"Playing","text":"<p>[[nodiscard]] bool Playing() const</p> <p>Checks if the sound associated to this <code>Channel</code> is playing.</p> Return Whether the channel is currently playing."},{"location":"api/engine/Channel/#resume","title":"Resume","text":"<p>void Resume(AmTime duration = kMinFadeDuration) const</p> <p>Resumes the <code>Channel</code>.</p> <p>If this channel was paused it will continue where it left off.</p> Parameter <code>duration</code> The fade in duration after resuming the channel."},{"location":"api/engine/Channel/#setgain","title":"SetGain","text":"<p>void SetGain(AmReal32 gain) const</p> <p>Sets the gain on this <code>Channel</code>.</p> Parameter <code>gain</code> The new gain value."},{"location":"api/engine/Channel/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this <code>Channel</code>.</p> <p>If the audio on this channel is not set to be Positional, this method does nothing.</p> Parameter <code>location</code> The new location of the <code>Channel</code>."},{"location":"api/engine/Channel/#stop","title":"Stop","text":"<p>void Stop(AmTime duration = kMinFadeDuration) const</p> <p>Stops the <code>Channel</code>.</p> <p>A sound will stop on its own if its not set to loop. Looped audio must be explicitly stopped.</p> Parameter <code>duration</code> The fade out duration before to stop the channel."},{"location":"api/engine/Channel/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Channel</code> has been initialized.</p> Return <code>true</code> if this <code>Channel</code> has been initialized."},{"location":"api/engine/ChannelEvent/","title":"ChannelEvent","text":"<p>enum class ChannelEvent : AmUInt8</p> <p>Enumerates the events triggered by a <code>Channel</code> during playback.</p> Begin = 0 The playback of the channel has started. End = 1 The playback of the channel has ended. Resume = 2 The playback of the channel has resumed after being paused. Pause = 3 The playback of the channel has been paused. Stop = 4 The playback of the channel has been stopped. Loop = 5 The playback of the channel has looped."},{"location":"api/engine/ChannelEventCallback/","title":"ChannelEventCallback","text":"<p>typedef std::function&lt;void(ChannelEventInfo)&gt; ChannelEventCallback</p> <p>A callback function for handling channel events.</p>"},{"location":"api/engine/ChannelEventInfo/","title":"ChannelEventInfo","text":"<p>struct  ChannelEventInfo</p> <p>The event info passed to the channel event listener.</p>"},{"location":"api/engine/ChannelEventInfo/#variables","title":"Variables","text":"Name Description m_source The event source. m_userData Additional user data passed to the event listener."},{"location":"api/engine/ChannelEventInfo/#functions","title":"Functions","text":"Name Description ChannelEventInfo Constructor."},{"location":"api/engine/ChannelEventInfo/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/ChannelEventInfo/#m_source","title":"m_source","text":"<p>ChannelInternalState* m_source</p> <p>The event source.</p>"},{"location":"api/engine/ChannelEventInfo/#m_userdata","title":"m_userData","text":"<p>void* m_userData</p> <p>Additional user data passed to the event listener.</p>"},{"location":"api/engine/ChannelEventInfo/#function-details","title":"Function Details","text":""},{"location":"api/engine/ChannelEventInfo/#channeleventinfo_1","title":"ChannelEventInfo","text":"<p>explicit ChannelEventInfo(ChannelInternalState* source)</p> <p>Constructor.</p> Parameter <code>source</code> The source of the event. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/ChannelEventListener/","title":"ChannelEventListener","text":"<p>class  ChannelEventListener</p> <p>Channel Event listener.</p> <p>Event handlers are registered to the event listener through a callback to receive event notifications.</p>"},{"location":"api/engine/ChannelEventListener/#functions","title":"Functions","text":"Name Description ChannelEventListener Initializes a new channel event listener. ~ChannelEventListener Destroys the channel event listener. Add Registers a custom callback to this event listener. Call Executes the event by calling all the registered event handlers."},{"location":"api/engine/ChannelEventListener/#function-details","title":"Function Details","text":""},{"location":"api/engine/ChannelEventListener/#add","title":"Add","text":"<p>void Add(const ChannelEventCallback&amp; callback, void* userData = nullptr)</p> <p>Registers a custom callback to this event listener.</p> Parameter <code>callback</code> The event callback. Parameter <code>userData</code> The additional data to pass to the handler when this listener receive the event."},{"location":"api/engine/ChannelEventListener/#call","title":"Call","text":"<p>void Call(ChannelInternalState* channel)</p> <p>Executes the event by calling all the registered event handlers.</p> Parameter <code>channel</code> The channel which have triggered the event. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/ChannelEventListener/#channeleventlistener_1","title":"ChannelEventListener","text":"<p>ChannelEventListener()</p> <p>Initializes a new channel event listener.</p>"},{"location":"api/engine/ChannelEventListener/#channeleventlistener_2","title":"~ChannelEventListener","text":"<p>~ChannelEventListener()</p> <p>Destroys the channel event listener.</p>"},{"location":"api/engine/Codec/","title":"Codec","text":"<p>class  Codec</p> <p>Audio file reader and writer.</p> <p>The <code>Codec</code> class is used to implement an audio file reader and writer. This is the base class for all audio codecs, each implementation should allow to build decoders and encoders.</p>"},{"location":"api/engine/Codec/#types","title":"Types","text":"Name Description Decoder Audio file reader. Encoder Audio file writer."},{"location":"api/engine/Codec/#variables","title":"Variables","text":"Name Description m_name The name of this codec."},{"location":"api/engine/Codec/#functions","title":"Functions","text":"Name Description Codec Create a new Codec instance. ~Codec Default destructor. CreateDecoder Creates a new instance of the decoder associated to this codec. DestroyDecoder Destroys the decoder associated to this codec. CreateEncoder Creates a new instance of the encoder associated to this codec. DestroyEncoder Destroys the encoder associated to this codec. CanHandleFile Checks whether this <code>Codec</code> can handle the file at the given path. GetName Gets the name of this codec. Register Registers a new audio codec. Unregister Unregisters a audio codec. Find Look up a codec by name. FindCodecForFile Finds the codec which can handle the given file. LockRegistry Locks the codecs registry. UnlockRegistry Unlocks the codecs registry. GetRegistry Gets the list of registered Codecs."},{"location":"api/engine/Codec/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Codec/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this codec.</p>"},{"location":"api/engine/Codec/#function-details","title":"Function Details","text":""},{"location":"api/engine/Codec/#canhandlefile","title":"CanHandleFile","text":"<p>[[nodiscard]] virtual bool CanHandleFile(std::shared_ptr&lt;File&gt; file) const = 0</p> <p>Checks whether this <code>Codec</code> can handle the file at the given path.</p> Parameter <code>file</code> The file to check. Return <code>true</code> if the <code>Codec</code> can handle the file, <code>false</code> otherwise."},{"location":"api/engine/Codec/#codec_1","title":"Codec","text":"<p>explicit Codec(AmString name)</p> <p>Create a new Codec instance.</p> Parameter <code>name</code> The codec name. Recommended names are \"FILE_EXTENSION\". eg. \"WAV\" or \"OGG\"."},{"location":"api/engine/Codec/#createdecoder","title":"CreateDecoder","text":"<p>* CreateDecoder()</p> <p>Creates a new instance of the decoder associated to this codec.</p> Return A <code>Decoder</code> instance."},{"location":"api/engine/Codec/#createencoder","title":"CreateEncoder","text":"<p>* CreateEncoder()</p> <p>Creates a new instance of the encoder associated to this codec.</p> Return An <code>Encoder</code> instance."},{"location":"api/engine/Codec/#destroydecoder","title":"DestroyDecoder","text":"<p>virtual void DestroyDecoder(Decoder* decoder) = 0</p> <p>Destroys the decoder associated to this codec.</p> Parameter <code>decoder</code> The decoder instance to destroy."},{"location":"api/engine/Codec/#destroyencoder","title":"DestroyEncoder","text":"<p>virtual void DestroyEncoder(Encoder* encoder) = 0</p> <p>Destroys the encoder associated to this codec.</p> Parameter <code>encoder</code> The encoder instance to destroy."},{"location":"api/engine/Codec/#find","title":"Find","text":"<p>static std::shared_ptr&lt;Codec&gt; Find(const AmString&amp; name)</p> <p>Look up a codec by name.</p> Parameter <code>name</code> The name of the codec to find. Return The codec with the given name, or <code>nullptr</code> if none."},{"location":"api/engine/Codec/#findcodecforfile","title":"FindCodecForFile","text":"<p>static std::shared_ptr&lt;Codec&gt; FindCodecForFile(std::shared_ptr&lt;File&gt; file)</p> <p>Finds the codec which can handle the given file.</p> Parameter <code>file</code> The file to find the codec for. Return The codec which can handle the given file, or <code>nullptr</code> if none."},{"location":"api/engine/Codec/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this codec.</p> Return The name of this codec."},{"location":"api/engine/Codec/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, std::shared_ptr&lt;Codec&gt;&gt;&amp; GetRegistry()</p> <p>Gets the list of registered Codecs.</p> Return The registry of Codecs."},{"location":"api/engine/Codec/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the codecs registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new codecs after the engine is fully loaded.</p>"},{"location":"api/engine/Codec/#register","title":"Register","text":"<p>static void Register(std::shared_ptr&lt;Codec&gt; codec)</p> <p>Registers a new audio codec.</p> Parameter <code>codec</code> The audio codec to add in the registry."},{"location":"api/engine/Codec/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the codecs registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new codecs after the engine is fully unloaded.</p>"},{"location":"api/engine/Codec/#unregister","title":"Unregister","text":"<p>static void Unregister(std::shared_ptr&lt;const Codec&gt; codec)</p> <p>Unregisters a audio codec.</p> Parameter <code>codec</code> The audio codec to remove from the registry."},{"location":"api/engine/Codec/#codec_2","title":"~Codec","text":"<p>virtual ~Codec()</p> <p>Default destructor.</p>"},{"location":"api/engine/Codec/Decoder/","title":"Decoder","text":"<p>class  Decoder</p> <p>Audio file reader.</p> <p>The <code>Decoder</code> is built by a <code>Codec</code> instance. It's used to read an audio file and process its data. Each implementation should allow to load the entire file into memory or stream it from the file system.</p> <p>The <code>Stream()</code> method of a decoder implementation must be thread-safe.</p>"},{"location":"api/engine/Codec/Decoder/#variables","title":"Variables","text":"Name Description m_format The audio sample format of the file currently loaded by this decoder. m_codec The codec instance which built this decoder."},{"location":"api/engine/Codec/Decoder/#functions","title":"Functions","text":"Name Description Decoder Creates a new instance of the decoder for the given codec. ~Decoder Default destructor. Open Opens the given file to start decoding. Close Closes the previously opened file. GetFormat Gets the audio sample format. Load Loads the entire audio file into the output buffer. Stream Streams a part of the file from disk into the output buffer. Seek Moves the cursor to the given frame."},{"location":"api/engine/Codec/Decoder/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Codec/Decoder/#m_codec","title":"m_codec","text":"<p>const Codec* m_codec</p> <p>The codec instance which built this decoder.</p>"},{"location":"api/engine/Codec/Decoder/#m_format","title":"m_format","text":"<p>SoundFormat m_format</p> <p>The audio sample format of the file currently loaded by this decoder.</p> <p>The sound format must be filled during the initialization of this decoder.</p>"},{"location":"api/engine/Codec/Decoder/#function-details","title":"Function Details","text":""},{"location":"api/engine/Codec/Decoder/#close","title":"Close","text":"<p>virtual bool Close() = 0</p> <p>Closes the previously opened file.</p> Return <code>true</code> if the file was closed successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Decoder/#decoder_1","title":"Decoder","text":"<p>explicit Decoder(const Codec* codec)</p> <p>Creates a new instance of the decoder for the given codec.</p> Parameter <code>codec</code> The codec wrapper for the decoder."},{"location":"api/engine/Codec/Decoder/#getformat","title":"GetFormat","text":"<p>[[nodiscard]] const SoundFormat&amp; GetFormat() const</p> <p>Gets the audio sample format.</p> Return The audio sample format. See SoundFormat"},{"location":"api/engine/Codec/Decoder/#load","title":"Load","text":"<p>virtual AmUInt64 Load(AudioBuffer* out) = 0</p> <p>Loads the entire audio file into the output buffer.</p> <p>The output buffer must allocate enough size for this operation to be successful.</p> Parameter <code>out</code> The buffer to load audio data data into. Return The number of audio frames loaded into the buffer."},{"location":"api/engine/Codec/Decoder/#open","title":"Open","text":"<p>virtual bool Open(std::shared_ptr&lt;File&gt; file) = 0</p> <p>Opens the given file to start decoding.</p> Parameter <code>file</code> The file to read. Return <code>true</code> if the file was opened successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Decoder/#seek","title":"Seek","text":"<p>virtual bool Seek(AmUInt64 offset) = 0</p> <p>Moves the cursor to the given frame.</p> Parameter <code>offset</code> The offset in frames to move the cursor to. Return <code>true</code> if the cursor was moved successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Decoder/#stream","title":"Stream","text":"<p>virtual AmUInt64 Stream(AudioBuffer* out, AmUInt64 bufferOffset, AmUInt64 seekOffset, AmUInt64 length) = 0</p> <p>Streams a part of the file from disk into the output buffer.</p> Parameter <code>out</code> The buffer to stream the file data into. Parameter <code>bufferOffset</code> The offset in frames from which start to write in the <code>out</code> buffer. Parameter <code>seekOffset</code> The offset in frames from which start to read the file. Parameter <code>length</code> The length in frames to read from the file. Return The number of frames read."},{"location":"api/engine/Codec/Decoder/#decoder_2","title":"~Decoder","text":"<p>virtual ~Decoder() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/Codec/Encoder/","title":"Encoder","text":"<p>class  Encoder</p> <p>Audio file writer.</p> <p>The <code>Encoder</code> is built by a <code>Codec</code> instance. It's used to write data to an audio file.</p> <p>The <code>Write()</code> methods of an encoder implementation must be thread safe.</p>"},{"location":"api/engine/Codec/Encoder/#variables","title":"Variables","text":"Name Description m_format The audio sample format of the file to write using this encoder. m_codec The codec instance which built this decoder."},{"location":"api/engine/Codec/Encoder/#functions","title":"Functions","text":"Name Description Encoder Creates a new instance of the encoder for the given codec. ~Encoder Default destructor. Open Opens or create a file at the given path to start encoding. Close Closes a previously opened file. SetFormat Sets the audio sample format. Write Writes the given buffer into the file."},{"location":"api/engine/Codec/Encoder/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Codec/Encoder/#m_codec","title":"m_codec","text":"<p>const Codec* m_codec</p> <p>The codec instance which built this decoder.</p>"},{"location":"api/engine/Codec/Encoder/#m_format","title":"m_format","text":"<p>SoundFormat m_format</p> <p>The audio sample format of the file to write using this encoder.</p> <p>The sound format must be set before the initialization of this encoder. Otherwise, the encoder initialization should fail.</p> <p>Note</p> <p>The final behavior depend on the specific codec implementation.</p>"},{"location":"api/engine/Codec/Encoder/#function-details","title":"Function Details","text":""},{"location":"api/engine/Codec/Encoder/#close","title":"Close","text":"<p>virtual bool Close() = 0</p> <p>Closes a previously opened file.</p> Return <code>true</code> if the file was closed successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Encoder/#encoder_1","title":"Encoder","text":"<p>explicit Encoder(const Codec* codec)</p> <p>Creates a new instance of the encoder for the given codec.</p> Parameter <code>codec</code> The codec wrapper for the encoder."},{"location":"api/engine/Codec/Encoder/#open","title":"Open","text":"<p>virtual bool Open(std::shared_ptr&lt;File&gt; file) = 0</p> <p>Opens or create a file at the given path to start encoding.</p> Parameter <code>file</code> The file to write. Return <code>true</code> if the file was opened successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Encoder/#setformat","title":"SetFormat","text":"<p>virtual void SetFormat(const SoundFormat&amp; format)</p> <p>Sets the audio sample format.</p> Parameter <code>format</code> The audio sample format."},{"location":"api/engine/Codec/Encoder/#write","title":"Write","text":"<p>virtual AmUInt64 Write(AudioBuffer* in, AmUInt64 offset, AmUInt64 length) = 0</p> <p>Writes the given buffer into the file.</p> Parameter <code>in</code> The buffer to write into the the file. Parameter <code>offset</code> The offset in frames from which write the input buffer. Parameter <code>length</code> The length in frames to write from the input buffer. Return The number of frames written."},{"location":"api/engine/Codec/Encoder/#encoder_2","title":"~Encoder","text":"<p>virtual ~Encoder() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/DeviceDescription/","title":"DeviceDescription","text":"<p>struct DeviceDescription</p> <p>The device description.</p> <p>This stores the settings requested from the engine configuration and the actual settings provided by the device.</p> <p>The device settings are filled after the Amplimix initialization, and are provided by the selected Driver.</p>"},{"location":"api/engine/DeviceDescription/#variables","title":"Variables","text":"Name Description mDeviceName The device name. mDeviceID The device ID. mRequestedOutputFormat The requested device output format. mDeviceOutputFormat The actual device format. mRequestedOutputChannels The requested device output channel layout. mDeviceOutputChannels The actual device channel layout. mRequestedOutputSampleRate The requested device sample rate. mDeviceOutputSampleRate The actual device sample rate. mOutputBufferSize The device output buffer size. mDeviceState The device state."},{"location":"api/engine/DeviceDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/DeviceDescription/#mdeviceid","title":"mDeviceID","text":"<p>AmObjectID mDeviceID</p> <p>The device ID.</p>"},{"location":"api/engine/DeviceDescription/#mdevicename","title":"mDeviceName","text":"<p>AmString mDeviceName</p> <p>The device name.</p>"},{"location":"api/engine/DeviceDescription/#mdeviceoutputchannels","title":"mDeviceOutputChannels","text":"<p>PlaybackOutputChannels mDeviceOutputChannels</p> <p>The actual device channel layout.</p>"},{"location":"api/engine/DeviceDescription/#mdeviceoutputformat","title":"mDeviceOutputFormat","text":"<p>PlaybackOutputFormat mDeviceOutputFormat</p> <p>The actual device format.</p>"},{"location":"api/engine/DeviceDescription/#mdeviceoutputsamplerate","title":"mDeviceOutputSampleRate","text":"<p>AmUInt32 mDeviceOutputSampleRate</p> <p>The actual device sample rate.</p>"},{"location":"api/engine/DeviceDescription/#mdevicestate","title":"mDeviceState","text":"<p>DeviceState mDeviceState</p> <p>The device state.</p>"},{"location":"api/engine/DeviceDescription/#moutputbuffersize","title":"mOutputBufferSize","text":"<p>AmUInt32 mOutputBufferSize</p> <p>The device output buffer size.</p>"},{"location":"api/engine/DeviceDescription/#mrequestedoutputchannels","title":"mRequestedOutputChannels","text":"<p>PlaybackOutputChannels mRequestedOutputChannels</p> <p>The requested device output channel layout.</p>"},{"location":"api/engine/DeviceDescription/#mrequestedoutputformat","title":"mRequestedOutputFormat","text":"<p>PlaybackOutputFormat mRequestedOutputFormat</p> <p>The requested device output format.</p>"},{"location":"api/engine/DeviceDescription/#mrequestedoutputsamplerate","title":"mRequestedOutputSampleRate","text":"<p>AmUInt32 mRequestedOutputSampleRate</p> <p>The requested device sample rate.</p>"},{"location":"api/engine/DeviceNotification/","title":"DeviceNotification","text":"<p>enum class DeviceNotification : AmUInt8</p> <p>The possible device notification types.</p> Opened The device is opened, but not yet started. Started The device is started. Rerouted The device has changed. Stopped The device is stopped. Closed The device is closed."},{"location":"api/engine/DeviceState/","title":"DeviceState","text":"<p>enum class DeviceState : AmUInt8</p> <p>The device state.</p> Opened The device is opened, but not yet started. Started The device is started and running. Paused The device is paused. Stopped The device is stopped. Closed The device is closed."},{"location":"api/engine/Driver/","title":"Driver","text":"<p>class  Driver</p> <p>Base class for audio device driver implementations.</p> <p>A driver allows to use an audio device to output sounds and receive data from the microphone.</p>"},{"location":"api/engine/Driver/#variables","title":"Variables","text":"Name Description m_name The driver name. m_deviceDescription The device description."},{"location":"api/engine/Driver/#functions","title":"Functions","text":"Name Description Driver Creates a new AudioDriver with an unique name. ~Driver Default destructor. Open Open and start using the audio device. Close Closes the audio device. EnumerateDevices Enumerates all the available audio devices. GetName Gets the name of this driver. GetDeviceDescription Gets the description of the device currently managed by this driver. Register Registers a new audio driver. Unregister Unregisters an audio driver. Default Choose the most preferred audio driver. Find Look up a driver by name. SetDefault Set the default diver to use in the engine. LockRegistry Locks the drivers registry. UnlockRegistry Unlocks the drivers registry. GetRegistry Gets the list of registered Drivers."},{"location":"api/engine/Driver/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Driver/#m_devicedescription","title":"m_deviceDescription","text":"<p>DeviceDescription m_deviceDescription</p> <p>The device description.</p>"},{"location":"api/engine/Driver/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The driver name.</p>"},{"location":"api/engine/Driver/#function-details","title":"Function Details","text":""},{"location":"api/engine/Driver/#close","title":"Close","text":"<p>virtual bool Close() = 0</p> <p>Closes the audio device.</p> Return <code>true</code> if successful, <code>false</code> otherwise."},{"location":"api/engine/Driver/#default","title":"Default","text":"<p>static std::shared_ptr&lt;Driver&gt; Default()</p> <p>Choose the most preferred audio driver.</p> Return The default audio driver."},{"location":"api/engine/Driver/#driver_1","title":"Driver","text":"<p>explicit Driver(AmString name)</p> <p>Creates a new AudioDriver with an unique name.</p> Parameter <code>name</code> The driver name. Recommended names are \"APIName\". eg. \"MiniAudio\" or \"PortAudio\" or \"SDL\", etc..."},{"location":"api/engine/Driver/#enumeratedevices","title":"EnumerateDevices","text":"<p>virtual bool EnumerateDevices(std::vector&lt;DeviceDescription&gt;&amp; devices) = 0</p> <p>Enumerates all the available audio devices.</p> Parameter <code>devices</code> The vector in which to store the device descriptions. Return <code>true</code> if successful, <code>false</code> otherwise."},{"location":"api/engine/Driver/#find","title":"Find","text":"<p>static std::shared_ptr&lt;Driver&gt; Find(const AmString&amp; name)</p> <p>Look up a driver by name.</p> Parameter <code>name</code> The name of the audio driver. Must be registered before. Return The audio driver with the given name, or <code>nullptr</code> if none."},{"location":"api/engine/Driver/#getdevicedescription","title":"GetDeviceDescription","text":"<p>[[nodiscard]] const DeviceDescription&amp; GetDeviceDescription() const</p> <p>Gets the description of the device currently managed by this driver.</p> Return The device description."},{"location":"api/engine/Driver/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this driver.</p> Return The name of this driver."},{"location":"api/engine/Driver/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, std::shared_ptr&lt;Driver&gt;&gt;&amp; GetRegistry()</p> <p>Gets the list of registered Drivers.</p> Return The registry of Drivers."},{"location":"api/engine/Driver/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the drivers registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new divers after the engine is fully loaded.</p>"},{"location":"api/engine/Driver/#open","title":"Open","text":"<p>virtual bool Open(const DeviceDescription&amp; device) = 0</p> <p>Open and start using the audio device.</p> Parameter <code>device</code> The audio device to use description to use for initializing the physical device. Return <code>true</code> if successful, <code>false</code> otherwise."},{"location":"api/engine/Driver/#register","title":"Register","text":"<p>static void Register(std::shared_ptr&lt;Driver&gt; driver)</p> <p>Registers a new audio driver.</p> Parameter <code>driver</code> The audio driver to add in the registry."},{"location":"api/engine/Driver/#setdefault","title":"SetDefault","text":"<p>static void SetDefault(const AmString&amp; name)</p> <p>Set the default diver to use in the engine.</p> Parameter <code>name</code> The name of the audio driver. Must be registered before."},{"location":"api/engine/Driver/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the drivers registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new divers after the engine is fully unloaded.</p>"},{"location":"api/engine/Driver/#unregister","title":"Unregister","text":"<p>static void Unregister(std::shared_ptr&lt;const Driver&gt; driver)</p> <p>Unregisters an audio driver.</p> Parameter <code>driver</code> The audio driver to remove from the registry."},{"location":"api/engine/Driver/#driver_2","title":"~Driver","text":"<p>virtual ~Driver()</p> <p>Default destructor.</p>"},{"location":"api/engine/EffectInstance/","title":"EffectInstance","text":"<p>class EffectInstance</p> <p>An instance of an <code>Effect</code> asset.</p> <p>The effect instance is the real place where the filter is applied to only one sound object at a time. Each effect instance has its own state, and that state is not shared across sound objects.</p> See Effect, FilterInstance"},{"location":"api/engine/EffectInstance/#functions","title":"Functions","text":"Name Description ~EffectInstance Default destructor. GetFilter Gets the filter instance wrapped by this effect."},{"location":"api/engine/EffectInstance/#function-details","title":"Function Details","text":""},{"location":"api/engine/EffectInstance/#getfilter","title":"GetFilter","text":"<p>* GetFilter() const</p> <p>Gets the filter instance wrapped by this effect.</p> Return The filter instance."},{"location":"api/engine/EffectInstance/#effectinstance_1","title":"~EffectInstance","text":"<p>virtual ~EffectInstance() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/Engine/","title":"Engine","text":"<p>class  Engine</p> <p>The Amplitude Engine.</p> <p>This is the main class of the library that manages all the entities and provides methods to create, destroy, and manipulate them. You can also access to the internal state of the engine through the public API.</p> <p>The <code>Engine</code> is a singleton class, and you can access it using the <code>amEngine</code> macro. Before using most of the methods of the engine, you need to initialize the engine first, for example: <pre><code>amEngine-&gt;Initialize(\"config.amconfig\");\n//...\namEngine-&gt;Deinitialize();\n</code></pre></p>"},{"location":"api/engine/Engine/#functions","title":"Functions","text":"Name Description Version Gets the version structure. Initialize Initializes the Amplitude engine. Deinitialize Deinitializes the Amplitude engine. IsInitialized Checks if the Amplitude engine has been successfully initialized. SetFileSystem Sets a file system implementation to be used by the engine. GetFileSystem Gets the file system implementation used by the engine. StartOpenFileSystem Opens the file system, usually in a separate thread. TryFinalizeOpenFileSystem Checks if the file system has been fully loaded. StartCloseFileSystem Closes the file system, usually in a separate thread. TryFinalizeCloseFileSystem Checks if the file system has been fully closed. AdvanceFrame Updates the engine state for the given number of milliseconds. OnNextFrame Executes the given callback on the next frame. WaitUntilNextFrame Waits until the next frame is ready. WaitUntilFrames Waits until the specified number of frames are ready. GetTotalTime Gets the total elapsed time in milliseconds since the start of the engine. LoadSoundBank Loads a sound bank from a binary asset file (<code>.ambank</code>). LoadSoundBank Loads a sound bank from a binary asset file (<code>.ambank</code>). LoadSoundBankFromMemory Loads a sound bank from memory. LoadSoundBankFromMemory Loads a sound bank from memory. LoadSoundBankFromMemoryView Loads a sound bank from memory. LoadSoundBankFromMemoryView Loads a sound bank from memory. UnloadSoundBank Unloads a sound bank given its filename. UnloadSoundBank Unloads a sound bank given its ID. UnloadSoundBanks Unloads all the loaded sound banks. HasLoadedSoundBank Checks if a sound bank with the given filename has been loaded. HasLoadedSoundBank Checks if a sound bank with the given ID has been loaded. HasLoadedSoundBanks Checks if any sound banks have been loaded. StartLoadSoundFiles Starts the loading of sound files referenced in loaded sound banks. TryFinalizeLoadSoundFiles Checks if the loading of sound files has been completed, and releases used resources. GetSwitchContainerHandle Gets a <code>SwitchContainerHandle</code> given its name as defined in its asset file (<code>.amswitchcontainer</code>). GetSwitchContainerHandle Gets a <code>SwitchContainerHandle</code> given its ID as defined in its asset file (<code>.amswitchcontainer</code>). GetSwitchContainerHandleFromFile Gets a <code>SwitchContainerHandle</code> given its asset's filename. GetCollectionHandle Gets a <code>CollectionHandle</code> given its name as defined in its asset file (<code>.amcollection</code>). GetCollectionHandle Gets a <code>CollectionHandle</code> given its ID as defined in its asset file (<code>.amcollection</code>). GetCollectionHandleFromFile Gets a <code>CollectionHandle</code> given its asset's filename. GetSoundHandle Gets a <code>SoundHandle</code> given its name as defined in its asset file (<code>.amsound</code>). GetSoundHandle Gets a <code>SoundHandle</code> given its ID as defined in its asset file (<code>.amsound</code>). GetSoundHandleFromFile Gets a <code>SoundHandle</code> given its asset's filename. GetSoundObjectHandle Gets a <code>SoundObjectHandle</code> given its name as defined in its asset file. GetSoundObjectHandle Gets a <code>SoundObjectHandle</code> given its ID as defined in its asset file. GetSoundObjectHandleFromFile Gets a <code>SoundObjectHandle</code> given its asset's filename. GetEventHandle Gets an <code>EventHandle</code> given its name as defined in its asset file (<code>.amevent</code>). GetEventHandle Gets an <code>EventHandle</code> given its ID as defined in its asset file (<code>.amevent</code>). GetEventHandleFromFile Gets an <code>EventHandle</code> given its asset's filename. GetAttenuationHandle Gets an <code>AttenuationHandle</code> given its name as defined in its asset file (<code>.amattenuation</code>). GetAttenuationHandle Gets an <code>AttenuationHandle</code> given its ID as defined in its asset file (<code>.amattenuation</code>). GetAttenuationHandleFromFile Gets an <code>AttenuationHandle</code> given its asset's filename. GetSwitchHandle Gets a <code>SwitchHandle</code> given its name as defined in its asset file (<code>.amswitch</code>). GetSwitchHandle Gets a <code>SwitchHandle</code> given its ID as defined in its asset file (<code>.amswitch</code>). GetSwitchHandleFromFile Gets a <code>SwitchHandle</code> given its asset's filename. GetRtpcHandle Gets a <code>RtpcHandle</code> given its name as defined in its asset file (<code>.amrtpc</code>). GetRtpcHandle Gets an <code>RtpcHandle</code> given its ID as defined in its asset file (<code>.amrtpc</code>). GetRtpcHandleFromFile Gets an <code>RtpcHandle</code> given its asset's filename. GetEffectHandle Gets an <code>EffectHandle</code> given its name as defined in its asset file (<code>.amfx</code>). GetEffectHandle Gets an <code>EffectHandle</code> given its ID as defined in its asset file (<code>.amfx</code>). GetEffectHandleFromFile Gets an <code>EffectHandle</code> given its asset's filename. GetPipelineHandle Gets a <code>PipelineHandle</code> from the loaded pipeline asset file (<code>.ampipeline</code>). SetMasterGain Adjusts the master gain of the mixer. GetMasterGain Gets the mixer master gain. SetMute Mutes the engine, but keep processing audio. IsMuted Checks whether the engine is currently muted. Pause Pauses or resumes all playing sounds and streams. IsPaused Checks whether the engine is currently paused. SetDefaultListener Sets the default sound listener. SetDefaultListener Sets the default sound listener. GetDefaultListener Gets the default audio <code>Listener</code>. AddListener Initializes and returns a new <code>Listener</code>. GetListener Returns the <code>Listener</code> with the given ID. RemoveListener Removes a <code>Listener</code> given its ID. RemoveListener Removes a <code>Listener</code> given its handle. AddEntity Initializes and returns a new <code>Entity</code>. GetEntity Returns the <code>Entity</code> with the given ID. RemoveEntity Removes an <code>Entity</code>. RemoveEntity Removes an <code>Entity</code> given its ID. AddEnvironment Initializes and return a new <code>Environment</code>. GetEnvironment Returns the <code>Environment</code> with the given ID. RemoveEnvironment Removes an <code>Environment</code>. RemoveEnvironment Removes an <code>Environment</code> given its ID. AddRoom Initializes and return a new <code>Room</code>. GetRoom Returns the <code>Room</code> with the given ID. RemoveRoom Removes a <code>Room</code>. RemoveRoom Removes a <code>Room</code> given its ID. FindBus Returns the <code>Bus</code> with the specified name. FindBus Returns the <code>Bus</code> with the given ID. Play Plays a switch container associated with the given handle in the World scope. Play Plays a switch container associated with the given handle in the World scope. Play Plays a switch container associated with the given handle in the World scope. Play Plays a switch container associated with the given handle in an Entity scope. Play Plays a switch container associated with the given handle in an Entity scope. Play Plays a collection associated with the given handle in the World scope. Play Plays a collection associated with the given handle in the World scope. Play Plays a collection associated with the given handle in the World scope. Play Plays a collection associated with the given handle in the Entity scope. Play Plays a collection associated with the given handle in an Entity scope. Play Plays a sound associated with the given handle in the World scope. Play Plays a sound associated with the given handle in the World scope. Play Plays a sound associated with the given handle in the World scope. Play Plays a sound associated with the given sound handle in an Entity scope. Play Plays a sound associated with the given sound handle in an Entity. Play Plays a sound object associated with the given name in the World scope. Play Plays a sound object associated with the given name in the World scope. Play Plays a sound object associated with the given name in the World scope. Play Plays a sound object associated with the given name in an Entity scope. Play Plays a sound object associated with the given name in an Entity scope. Play Plays a sound object associated with the given ID in the  World scope. Play Plays a sound object associated with the given ID in the World scope. Play Plays a sound object associated with the given ID in the World scope. Play Plays a sound object associated with the given ID in an Entity scope. Play Plays a sound object associated with the given ID in an Entity scope. StopAll Stops all playing sound objects. Trigger Triggers the event associated to the given handle. Trigger Triggers the event associated to the given name. Trigger Triggers the event associated to the given ID. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetSwitchState Sets the active state of the defined <code>Switch</code>. SetRtpcValue Sets the value of a <code>RTPC</code>. SetRtpcValue Sets the value of a <code>RTPC</code>. SetRtpcValue Sets the value of a <code>RTPC</code>. GetDriver Gets the audio driver used by the Engine. GetMixer Gets the mixer instance. GetSoundSpeed Gets the speed of sound, as set in the loaded engine configuration file. GetDopplerFactor Get the Doppler factor, as set in the loaded engine configuration file. GetSamplesPerStream Get the number of samples to process in one stream, as set in the loaded engine configuration file. IsGameTrackingEnvironmentAmounts Checks whether the game is tracking environment amounts himself. GetMaxListenersCount Gets the maximum number of listeners handled by the engine. GetMaxEntitiesCount Gets the maximum number of game entities handled by the engine. GetOcclusionCoefficientCurve Gets the occlusion coefficient curve, as set in the loaded engine configuration file. GetOcclusionGainCurve Gets the occlusion gain curve, as set in the loaded engine configuration file. GetObstructionCoefficientCurve Gets the obstruction coefficient curve, as set in the loaded engine configuration file. GetObstructionGainCurve Gets the obstruction gain curve, as set in the loaded engine configuration file. GetPanningMode Gets the panning mode defined in the loaded engine configuration. GetHRIRSphereSamplingMode Gets the HRIR sphere sampling mode defined in the loaded engine configuration. GetHRIRSphere Gets the HRIR sphere defined in the loaded engine configuration. LoadPlugin Loads a plugin library from the given path. AddPluginSearchPath Adds a path in the plugins search paths list. RemovePluginSearchPath Removes a path from the plugins search paths list. RegisterDefaultExtensions Register all default plugins. UnregisterDefaultExtensions Unregister all default plugins. RegisterExtension Registers a plugin into Amplitude. UnregisterExtension Unregisters a plugin from Amplitude. GetInstance Returns a unique instance of the Amplitude Engine. DestroyInstance Destroys the unique instance of the Amplitude Engine."},{"location":"api/engine/Engine/#function-details","title":"Function Details","text":""},{"location":"api/engine/Engine/#addentity","title":"AddEntity","text":"<p>[[nodiscard]] virtual Entity AddEntity(AmEntityID id) const = 0</p> <p>Initializes and returns a new <code>Entity</code>.</p> Parameter <code>id</code> The game entity ID. Return An initialized <code>Entity</code>."},{"location":"api/engine/Engine/#addenvironment","title":"AddEnvironment","text":"<p>[[nodiscard]] virtual Environment AddEnvironment(AmEnvironmentID id) const = 0</p> <p>Initializes and return a new <code>Environment</code>.</p> Parameter <code>id</code> The game environment ID. Return An initialized <code>Environment</code>."},{"location":"api/engine/Engine/#addlistener","title":"AddListener","text":"<p>[[nodiscard]] virtual Listener AddListener(AmListenerID id) const = 0</p> <p>Initializes and returns a new <code>Listener</code>.</p> Parameter <code>id</code> The new listener ID. Return An initialized <code>Listener</code>."},{"location":"api/engine/Engine/#addpluginsearchpath","title":"AddPluginSearchPath","text":"<p>static void AddPluginSearchPath(const AmOsString&amp; path)</p> <p>Adds a path in the plugins search paths list.</p> Parameter <code>path</code> The path to add in the plugins search paths list."},{"location":"api/engine/Engine/#addroom","title":"AddRoom","text":"<p>[[nodiscard]] virtual Room AddRoom(AmRoomID id) const = 0</p> <p>Initializes and return a new <code>Room</code>.</p> Parameter <code>id</code> The room ID. Return An initialized <code>Room</code>."},{"location":"api/engine/Engine/#advanceframe","title":"AdvanceFrame","text":"<p>virtual void AdvanceFrame(AmTime delta) const = 0</p> <p>Updates the engine state for the given number of milliseconds.</p> Parameter <code>delta</code> The number of milliseconds since the last frame."},{"location":"api/engine/Engine/#deinitialize","title":"Deinitialize","text":"<p>virtual bool Deinitialize() = 0</p> <p>Deinitializes the Amplitude engine.</p> Return <code>true</code> when the engine has been successfully deinitialized, <code>false</code> otherwise."},{"location":"api/engine/Engine/#destroyinstance","title":"DestroyInstance","text":"<p>static void DestroyInstance()</p> <p>Destroys the unique instance of the Amplitude Engine.</p>"},{"location":"api/engine/Engine/#findbus","title":"FindBus","text":"<p>[[nodiscard]] virtual Bus FindBus(const AmString&amp; name) const = 0</p> <p>Returns the <code>Bus</code> with the specified name.</p> Parameter <code>name</code> The name of the bus. <p>Note</p> <p>The name should match one of the buses loaded from the asset file (<code>.ambus</code>).</p> Return A valid <code>Bus</code> if found, otherwise an invalid <code>Bus</code>. <p>[[nodiscard]] virtual Bus FindBus(AmBusID id) const = 0</p> <p>Returns the <code>Bus</code> with the given ID.</p> Parameter <code>id</code> The ID of the bus. <p>Note</p> <p>The ID should match one of the buses loaded from the asset file (<code>.ambus</code>).</p> Return A valid <code>Bus</code> if found, otherwise an invalid <code>Bus</code>."},{"location":"api/engine/Engine/#getattenuationhandle","title":"GetAttenuationHandle","text":"<p>[[nodiscard]] virtual AttenuationHandle GetAttenuationHandle(const AmString&amp; name) const = 0</p> <p>Gets an <code>AttenuationHandle</code> given its name as defined in its asset file (<code>.amattenuation</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>AttenuationHandle</code> for the given name, or an invalid handle if no attenuation with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual AttenuationHandle GetAttenuationHandle(AmAttenuationID id) const = 0</p> <p>Gets an <code>AttenuationHandle</code> given its ID as defined in its asset file (<code>.amattenuation</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>AttenuationHandle</code> for the given ID, or an invalid handle if no attenuation with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getattenuationhandlefromfile","title":"GetAttenuationHandleFromFile","text":"<p>[[nodiscard]] virtual AttenuationHandle GetAttenuationHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>AttenuationHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>attenuators</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"attenuators/impact.amattenuation\"\nAttenuationHandle handle = amEngine-&gt;GetAttenuationHandleFromFile(\"impact.amattenuation\");\n</code></pre> Return The <code>AttenuationHandle</code> for the given asset's filename, or an invalid handle if no attenuation with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getcollectionhandle","title":"GetCollectionHandle","text":"<p>[[nodiscard]] virtual CollectionHandle GetCollectionHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>CollectionHandle</code> given its name as defined in its asset file (<code>.amcollection</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>CollectionHandle</code> for the given name, or an invalid handle if no collection with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual CollectionHandle GetCollectionHandle(AmCollectionID id) const = 0</p> <p>Gets a <code>CollectionHandle</code> given its ID as defined in its asset file (<code>.amcollection</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>CollectionHandle</code> for the given ID, or an invalid handle if no collection with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getcollectionhandlefromfile","title":"GetCollectionHandleFromFile","text":"<p>[[nodiscard]] virtual CollectionHandle GetCollectionHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>CollectionHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>collections</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"collections/weapons/ak47_gunfires.amcollection\"\nCollectionHandle handle = amEngine-&gt;GetCollectionHandleFromFile(\"weapons/ak47_gunfires.amcollection\");\n</code></pre> Return The <code>CollectionHandle</code> for the given asset's filename, or an invalid handle if no collection with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getdefaultlistener","title":"GetDefaultListener","text":"<p>[[nodiscard]] virtual Listener GetDefaultListener() const = 0</p> <p>Gets the default audio <code>Listener</code>.</p> Return An initialized <code>Listener</code> object if a default listener was set, otherwise an uninitialized <code>Listener</code> object."},{"location":"api/engine/Engine/#getdopplerfactor","title":"GetDopplerFactor","text":"<p>[[nodiscard]] virtual AmReal32 GetDopplerFactor() const = 0</p> <p>Get the Doppler factor, as set in the loaded engine configuration file.</p> Return The Doppler factor."},{"location":"api/engine/Engine/#getdriver","title":"GetDriver","text":"<p>[[nodiscard]] virtual std::shared_ptr&lt;Driver&gt; GetDriver() const = 0</p> <p>Gets the audio driver used by the Engine.</p> Return The audio driver."},{"location":"api/engine/Engine/#geteffecthandle","title":"GetEffectHandle","text":"<p>[[nodiscard]] virtual EffectHandle GetEffectHandle(const AmString&amp; name) const = 0</p> <p>Gets an <code>EffectHandle</code> given its name as defined in its asset file (<code>.amfx</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>EffectHandle</code> for the given name, or an invalid handle if no effect with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual EffectHandle GetEffectHandle(AmEffectID id) const = 0</p> <p>Gets an <code>EffectHandle</code> given its ID as defined in its asset file (<code>.amfx</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>EffectHandle</code> for the given ID, or an invalid handle if no effect with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#geteffecthandlefromfile","title":"GetEffectHandleFromFile","text":"<p>[[nodiscard]] virtual EffectHandle GetEffectHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>EffectHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>effects</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"effects/echo.amfx\"\nEffectHandle handle = amEngine-&gt;GetEffectHandleFromFile(\"echo.amfx\");\n</code></pre> Return The <code>EffectHandle</code> for the given asset's filename, or an invalid handle if no effect with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getentity","title":"GetEntity","text":"<p>[[nodiscard]] virtual Entity GetEntity(AmEntityID id) const = 0</p> <p>Returns the <code>Entity</code> with the given ID.</p> Parameter <code>id</code> The game entity ID. Return An initialized <code>Entity</code> if that one has been registered before, otherwise an uninitialized <code>Entity</code>."},{"location":"api/engine/Engine/#getenvironment","title":"GetEnvironment","text":"<p>[[nodiscard]] virtual Environment GetEnvironment(AmEnvironmentID id) const = 0</p> <p>Returns the <code>Environment</code> with the given ID.</p> Parameter <code>id</code> The game environment ID. Return An initialized <code>Environment</code> if that one has been registered before, otherwise an uninitialized <code>Environment</code>."},{"location":"api/engine/Engine/#geteventhandle","title":"GetEventHandle","text":"<p>[[nodiscard]] virtual EventHandle GetEventHandle(const AmString&amp; name) const = 0</p> <p>Gets an <code>EventHandle</code> given its name as defined in its asset file (<code>.amevent</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>EventHandle</code> for the given name, or an invalid handle if no event with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual EventHandle GetEventHandle(AmEventID id) const = 0</p> <p>Gets an <code>EventHandle</code> given its ID as defined in its asset file (<code>.amevent</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>EventHandle</code> for the given ID, or an invalid handle if no event with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#geteventhandlefromfile","title":"GetEventHandleFromFile","text":"<p>[[nodiscard]] virtual EventHandle GetEventHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>EventHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>events</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"events/gameplay/start_menu.amevent\"\nEventHandle handle = amEngine-&gt;GetEventHandleFromFile(\"gameplay/start_menu.amevent\");\n</code></pre> Return The <code>EventHandle</code> for the given asset's filename, or an invalid handle if no event with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getfilesystem","title":"GetFileSystem","text":"<p>[[nodiscard]] virtual std::shared_ptr&lt;const FileSystem&gt; GetFileSystem() const = 0</p> <p>Gets the file system implementation used by the engine.</p> Return The current file system implementation used by the engine, or <code>nullptr</code> if no file system has been set."},{"location":"api/engine/Engine/#gethrirsphere","title":"GetHRIRSphere","text":"<p>[[nodiscard]] virtual std::shared_ptr&lt;const HRIRSphere&gt; GetHRIRSphere() const = 0</p> <p>Gets the HRIR sphere defined in the loaded engine configuration.</p> Return The HRIR sphere. If no HRIR sphere is defined, returns <code>nullptr</code>. <p>Note</p> <p>The HRIR sphere is optional and can be null in some cases. If the engine does not have an HRIR sphere defined, this function will return <code>nullptr</code>.</p> See HRIRSphere"},{"location":"api/engine/Engine/#gethrirspheresamplingmode","title":"GetHRIRSphereSamplingMode","text":"<p>[[nodiscard]] virtual eHRIRSphereSamplingMode GetHRIRSphereSamplingMode() const = 0</p> <p>Gets the HRIR sphere sampling mode defined in the loaded engine configuration.</p> Return The HRIR sphere sampling mode."},{"location":"api/engine/Engine/#getinstance","title":"GetInstance","text":"<p>[[nodiscard]] static Engine* GetInstance()</p> <p>Returns a unique instance of the Amplitude Engine.</p>"},{"location":"api/engine/Engine/#getlistener","title":"GetListener","text":"<p>[[nodiscard]] virtual Listener GetListener(AmListenerID id) const = 0</p> <p>Returns the <code>Listener</code> with the given ID.</p> Parameter <code>id</code> The listener ID. Return An initialized <code>Listener</code> if a one with the given ID has been registered before, otherwise an uninitialized <code>Listener</code>."},{"location":"api/engine/Engine/#getmastergain","title":"GetMasterGain","text":"<p>[[nodiscard]] virtual AmReal32 GetMasterGain() const = 0</p> <p>Gets the mixer master gain.</p> Return The mixer master gain."},{"location":"api/engine/Engine/#getmaxentitiescount","title":"GetMaxEntitiesCount","text":"<p>[[nodiscard]] virtual AmUInt32 GetMaxEntitiesCount() const = 0</p> <p>Gets the maximum number of game entities handled by the engine.</p> <p>This value does not reflect the maximum number of simultaneous sound handled by the engine.</p> Return The maximum number of game entities."},{"location":"api/engine/Engine/#getmaxlistenerscount","title":"GetMaxListenersCount","text":"<p>[[nodiscard]] virtual AmUInt32 GetMaxListenersCount() const = 0</p> <p>Gets the maximum number of listeners handled by the engine.</p> Return The maximum number of listeners."},{"location":"api/engine/Engine/#getmixer","title":"GetMixer","text":"<p>* GetMixer() const</p> <p>Gets the mixer instance.</p> Return The <code>Amplimix</code> mixer instance."},{"location":"api/engine/Engine/#getobstructioncoefficientcurve","title":"GetObstructionCoefficientCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetObstructionCoefficientCurve() const = 0</p> <p>Gets the obstruction coefficient curve, as set in the loaded engine configuration file.</p> Return The obstruction coefficient curve."},{"location":"api/engine/Engine/#getobstructiongaincurve","title":"GetObstructionGainCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetObstructionGainCurve() const = 0</p> <p>Gets the obstruction gain curve, as set in the loaded engine configuration file.</p> Return The obstruction gain curve."},{"location":"api/engine/Engine/#getocclusioncoefficientcurve","title":"GetOcclusionCoefficientCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetOcclusionCoefficientCurve() const = 0</p> <p>Gets the occlusion coefficient curve, as set in the loaded engine configuration file.</p> Return The occlusion coefficient curve."},{"location":"api/engine/Engine/#getocclusiongaincurve","title":"GetOcclusionGainCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetOcclusionGainCurve() const = 0</p> <p>Gets the occlusion gain curve, as set in the loaded engine configuration file.</p> Return The occlusion gain curve."},{"location":"api/engine/Engine/#getpanningmode","title":"GetPanningMode","text":"<p>[[nodiscard]] virtual ePanningMode GetPanningMode() const = 0</p> <p>Gets the panning mode defined in the loaded engine configuration.</p> Return The panning mode."},{"location":"api/engine/Engine/#getpipelinehandle","title":"GetPipelineHandle","text":"<p>[[nodiscard]] virtual PipelineHandle GetPipelineHandle() const = 0</p> <p>Gets a <code>PipelineHandle</code> from the loaded pipeline asset file (<code>.ampipeline</code>).</p> <p>Note</p> <p>Only one pipeline can be loaded at a time. The loaded pipeline asset is defined in the engine configuration file.</p> Return The <code>PipelineHandle</code> for the loaded pipeline. This method should always return a valid handle."},{"location":"api/engine/Engine/#getroom","title":"GetRoom","text":"<p>[[nodiscard]] virtual Room GetRoom(AmRoomID id) const = 0</p> <p>Returns the <code>Room</code> with the given ID.</p> Parameter <code>id</code> The room ID. Return An initialized <code>Room</code> if that one has been registered before, otherwise an uninitialized <code>Room</code>."},{"location":"api/engine/Engine/#getrtpchandle","title":"GetRtpcHandle","text":"<p>[[nodiscard]] virtual RtpcHandle GetRtpcHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>RtpcHandle</code> given its name as defined in its asset file (<code>.amrtpc</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>RtpcHandle</code> for the given name, or an invalid handle if no RTPC with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual RtpcHandle GetRtpcHandle(AmRtpcID id) const = 0</p> <p>Gets an <code>RtpcHandle</code> given its ID as defined in its asset file (<code>.amrtpc</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>RtpcHandle</code> for the given ID, or an invalid handle if no RTPC with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getrtpchandlefromfile","title":"GetRtpcHandleFromFile","text":"<p>[[nodiscard]] virtual RtpcHandle GetRtpcHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>RtpcHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>rtpc</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"rtpc/music_volume.amrtpc\"\nRtpcHandle handle = amEngine-&gt;GetRtpcHandleFromFile(\"music_volume.amrtpc\");\n</code></pre> Return The <code>RtpcHandle</code> for the given asset's filename, or an invalid handle if no RTPC with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getsamplesperstream","title":"GetSamplesPerStream","text":"<p>[[nodiscard]] virtual AmUInt32 GetSamplesPerStream() const = 0</p> <p>Get the number of samples to process in one stream, as set in the loaded engine configuration file.</p> Return The number of samples per stream."},{"location":"api/engine/Engine/#getsoundhandle","title":"GetSoundHandle","text":"<p>[[nodiscard]] virtual SoundHandle GetSoundHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SoundHandle</code> given its name as defined in its asset file (<code>.amsound</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SoundHandle</code> for the given name, or an invalid handle if no sound with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual SoundHandle GetSoundHandle(AmSoundID id) const = 0</p> <p>Gets a <code>SoundHandle</code> given its ID as defined in its asset file (<code>.amsound</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SoundHandle</code> for the given ID, or an invalid handle if no sound with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getsoundhandlefromfile","title":"GetSoundHandleFromFile","text":"<p>[[nodiscard]] virtual SoundHandle GetSoundHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SoundHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>sounds</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"sounds/env/forest/calm_lake_bg.amsound\"\nSoundHandle handle = amEngine-&gt;GetSoundHandleFromFile(\"env/forest/calm_lake_bg.amsound\");\n</code></pre> Return The <code>SoundHandle</code> for the given asset's filename, or an invalid handle if no sound with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getsoundobjecthandle","title":"GetSoundObjectHandle","text":"<p>[[nodiscard]] virtual SoundObjectHandle GetSoundObjectHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SoundObjectHandle</code> given its name as defined in its asset file.</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SoundObjectHandle</code> for the given name, or an invalid handle if no sound object with that name was found in any loaded sound bank. <p>Note</p> <p>The return value can be a <code>SwitchContainerHandle</code>, a <code>CollectionHandle</code>, or a <code>SoundHandle</code>.</p> <p>[[nodiscard]] virtual SoundObjectHandle GetSoundObjectHandle(AmSoundID id) const = 0</p> <p>Gets a <code>SoundObjectHandle</code> given its ID as defined in its asset file.</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SoundObjectHandle</code> for the given ID, or an invalid handle if no sound object with that ID was found in any loaded sound bank. <p>Note</p> <p>The return value can be a <code>SwitchContainerHandle</code>, a <code>CollectionHandle</code>, or a <code>SoundHandle</code>.</p>"},{"location":"api/engine/Engine/#getsoundobjecthandlefromfile","title":"GetSoundObjectHandleFromFile","text":"<p>[[nodiscard]] virtual SoundObjectHandle GetSoundObjectHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SoundObjectHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>sounds</code>, <code>collections</code>, or <code>switch_containers</code> directories of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"sounds/env/forest/calm_lake_bg.amsound\"\n// Note that the return value in this case is indeed a `SoundHandle`\nSoundObjectHandle handle = amEngine-&gt;GetSoundObjectHandleFromFile(\"env/forest/calm_lake_bg.amsound\");\n</code></pre> Return The <code>SoundObjectHandle</code> for the given asset's filename, or an invalid handle if no sound object with that filename was found in any loaded sound bank. <p>Note</p> <p>The return value can be a <code>SwitchContainerHandle</code>, a <code>CollectionHandle</code>, or a <code>SoundHandle</code>.</p>"},{"location":"api/engine/Engine/#getsoundspeed","title":"GetSoundSpeed","text":"<p>[[nodiscard]] virtual AmReal32 GetSoundSpeed() const = 0</p> <p>Gets the speed of sound, as set in the loaded engine configuration file.</p> Return The speed of sound."},{"location":"api/engine/Engine/#getswitchcontainerhandle","title":"GetSwitchContainerHandle","text":"<p>[[nodiscard]] virtual SwitchContainerHandle GetSwitchContainerHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SwitchContainerHandle</code> given its name as defined in its asset file (<code>.amswitchcontainer</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SwitchContainerHandle</code> for the given name, or an invalid handle if no switch container with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual SwitchContainerHandle GetSwitchContainerHandle(AmSwitchContainerID id) const = 0</p> <p>Gets a <code>SwitchContainerHandle</code> given its ID as defined in its asset file (<code>.amswitchcontainer</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SwitchContainerHandle</code> for the given ID, or an invalid handle if no switch container with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getswitchcontainerhandlefromfile","title":"GetSwitchContainerHandleFromFile","text":"<p>[[nodiscard]] virtual SwitchContainerHandle GetSwitchContainerHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SwitchContainerHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>switch_containers</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"switch_containers/footsteps.amswitchcontainer\"\nSwitchContainerHandle handle = amEngine-&gt;GetSwitchContainerHandleFromFile(\"footsteps.amswitchcontainer\");\n</code></pre> Return The <code>SwitchContainerHandle</code> for the given asset's filename, or an invalid handle if no switch container with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getswitchhandle","title":"GetSwitchHandle","text":"<p>[[nodiscard]] virtual SwitchHandle GetSwitchHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SwitchHandle</code> given its name as defined in its asset file (<code>.amswitch</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SwitchHandle</code> for the given name, or an invalid handle if no switch with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual SwitchHandle GetSwitchHandle(AmSwitchID id) const = 0</p> <p>Gets a <code>SwitchHandle</code> given its ID as defined in its asset file (<code>.amswitch</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SwitchHandle</code> for the given ID, or an invalid handle if no switch with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getswitchhandlefromfile","title":"GetSwitchHandleFromFile","text":"<p>[[nodiscard]] virtual SwitchHandle GetSwitchHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SwitchHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>switches</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"switches/env/surfaces.amswitch\"\nSwitchHandle handle = amEngine-&gt;GetSwitchHandleFromFile(\"env/surfaces.amswitch\");\n</code></pre> Return The <code>SwitchHandle</code> for the given asset's filename, or an invalid handle if no switch with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#gettotaltime","title":"GetTotalTime","text":"<p>[[nodiscard]] virtual AmTime GetTotalTime() const = 0</p> <p>Gets the total elapsed time in milliseconds since the start of the engine.</p> Return The total elapsed time in milliseconds since the start of the engine."},{"location":"api/engine/Engine/#hasloadedsoundbank","title":"HasLoadedSoundBank","text":"<p>[[nodiscard]] virtual bool HasLoadedSoundBank(const AmOsString&amp; filename) const = 0</p> <p>Checks if a sound bank with the given filename has been loaded.</p> Parameter <code>filename</code> The file to check. Return <code>true</code> if the sound bank has been loaded, <code>false</code> otherwise. <p>[[nodiscard]] virtual bool HasLoadedSoundBank(AmBankID id) const = 0</p> <p>Checks if a sound bank with the given ID has been loaded.</p> Parameter <code>id</code> The sound bank id to check. Return <code>true</code> if the sound bank has been loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#hasloadedsoundbanks","title":"HasLoadedSoundBanks","text":"<p>[[nodiscard]] virtual bool HasLoadedSoundBanks() const = 0</p> <p>Checks if any sound banks have been loaded.</p> Return <code>true</code> if any sound banks have been loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#initialize","title":"Initialize","text":"<p>virtual bool Initialize(const AmOsString&amp; configFile) = 0</p> <p>Initializes the Amplitude engine.</p> Parameter <code>configFile</code> The path to the configuration file. Return <code>true</code> when the engine has been successfully initialized, <code>false</code> otherwise."},{"location":"api/engine/Engine/#isgametrackingenvironmentamounts","title":"IsGameTrackingEnvironmentAmounts","text":"<p>[[nodiscard]] virtual bool IsGameTrackingEnvironmentAmounts() const = 0</p> <p>Checks whether the game is tracking environment amounts himself.</p> Return Whether the game is tracking environment amounts."},{"location":"api/engine/Engine/#isinitialized","title":"IsInitialized","text":"<p>[[nodiscard]] virtual bool IsInitialized() const = 0</p> <p>Checks if the Amplitude engine has been successfully initialized.</p> Return <code>true</code> if the engine has been successfully initialized, <code>false</code> otherwise."},{"location":"api/engine/Engine/#ismuted","title":"IsMuted","text":"<p>[[nodiscard]] virtual bool IsMuted() const = 0</p> <p>Checks whether the engine is currently muted.</p> Return <code>true</code> if the engine is muted, <code>false</code> otherwise."},{"location":"api/engine/Engine/#ispaused","title":"IsPaused","text":"<p>[[nodiscard]] virtual bool IsPaused() const = 0</p> <p>Checks whether the engine is currently paused.</p> Return <code>true</code> if the engine is currently paused, <code>false</code> otherwise."},{"location":"api/engine/Engine/#loadplugin","title":"LoadPlugin","text":"<p>static AmVoidPtr LoadPlugin(const AmOsString&amp; pluginLibraryName)</p> <p>Loads a plugin library from the given path.</p> Parameter <code>pluginLibraryName</code> The name of the plugin library to load. Return A handle to the loaded plugin library."},{"location":"api/engine/Engine/#loadsoundbank","title":"LoadSoundBank","text":"<p>virtual bool LoadSoundBank(const AmOsString&amp; filename) = 0</p> <p>Loads a sound bank from a binary asset file (<code>.ambank</code>).</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>filename</code> The path to the sound bank asset file. Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise. <p>virtual bool LoadSoundBank(const AmOsString&amp; filename, AmBankID&amp; outID) = 0</p> <p>Loads a sound bank from a binary asset file (<code>.ambank</code>).</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>filename</code> The path to the sound bank asset file. Parameter <code>outID</code> The ID of the loaded sound bank. Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#loadsoundbankfrommemory","title":"LoadSoundBankFromMemory","text":"<p>virtual bool LoadSoundBankFromMemory(const char* fileData) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>fileData</code> The sound bank data to be loaded. <p>Note</p> <p>The <code>fileData</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>fileData</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise. <p>virtual bool LoadSoundBankFromMemory(const char* fileData, AmBankID&amp; outID) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>fileData</code> The sound bank data to be loaded. Parameter <code>outID</code> The ID of the loaded sound bank. <p>Note</p> <p>The <code>fileData</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>fileData</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#loadsoundbankfrommemoryview","title":"LoadSoundBankFromMemoryView","text":"<p>virtual bool LoadSoundBankFromMemoryView(AmVoidPtr ptr, AmSize size) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>ptr</code> The pointer to the sound bank data to be loaded. Parameter <code>size</code> The size of the memory to read. <p>Note</p> <p>The <code>fileData</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>fileData</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise. <p>virtual bool LoadSoundBankFromMemoryView(AmVoidPtr ptr, AmSize size, AmBankID&amp; outID) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>ptr</code> The pointer to the sound bank data to be loaded. Parameter <code>size</code> The size of the memory to read. Parameter <code>outID</code> The ID of the loaded sound bank. <p>Note</p> <p>The <code>ptr</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>ptr</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#onnextframe","title":"OnNextFrame","text":"<p>virtual void OnNextFrame(std::function&lt;void(AmTime delta)&gt; callback) const = 0</p> <p>Executes the given callback on the next frame.</p> <p>Note</p> <p>The given callback will be executed at the beginning of the next frame, before doing the actual frame update.</p> Parameter <code>callback</code> The callback to be called when the next frame is ready."},{"location":"api/engine/Engine/#pause","title":"Pause","text":"<p>virtual void Pause(bool pause) const = 0</p> <p>Pauses or resumes all playing sounds and streams.</p> Parameter <code>pause</code> Whether to pause or resume the engine."},{"location":"api/engine/Engine/#play","title":"Play","text":"<p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle) const = 0</p> <p>Plays a switch container associated with the given handle in the World scope.</p> <p>This method is recommended for switch containers with spatialization disabled, since no positional information need to be provided.</p> Parameter <code>handle</code> A handle to the switch container to play. Return The channel the switch container is being played on. If the switch container could not be played, or the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const AmVec3&amp; location) const = 0</p> <p>Plays a switch container associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>location</code> The location at which switch container should be played. Return The channel the switch container is being played on. If the switch container could not be played, or the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a switch container associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>location</code> The location at which the switch container should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the switch container is being played on. If the switch container could not be played, or the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const Entity&amp; entity) const = 0</p> <p>Plays a switch container associated with the given handle in an Entity scope.</p> <p>Note</p> <p>Switch containers played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>entity</code> The entity on which the switch container should be played. Return The channel the switch container is being played on. If the switch container could not be played, the given handle is invalid, or the given entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a switch container associated with the given handle in an Entity scope.</p> <p>Note</p> <p>Switch containers played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>entity</code> The entity on which the switch container should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the switch container is being played on. If the switch container could not be played, the given handle is invalid, or the given entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle) const = 0</p> <p>Plays a collection associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the collection to play. Return The channel the collection is being played on. If the collection could not be played, or the handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const AmVec3&amp; location) const = 0</p> <p>Plays a collection associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>location</code> The location at which the collection should be played. Return The channel the collection is being played on. If the collection could not be played, or the handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a collection associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>location</code> The location at which the collection should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the collection is being played on. If the collection could not be played, or the handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const Entity&amp; entity) const = 0</p> <p>Plays a collection associated with the given handle in the Entity scope.</p> <p>Note</p> <p>Collections played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>entity</code> The entity on which the collection should be played. Return The channel the collection is being played on. If the collection could not be played, the given handle is invalid, or the given entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a collection associated with the given handle in an Entity scope.</p> <p>Note</p> <p>Collections played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>entity</code> The entity on which the collection should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the collection is being played on. If the collection could not be played, the given handle is invalid, or the given entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle) const = 0</p> <p>Plays a sound associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the sound to play. Return The channel the sound is being played on. If the sound could not be played, the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const AmVec3&amp; location) const = 0</p> <p>Plays a sound associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>location</code> The location at which the sound should be played. Return The channel the sound is being played on. If the sound could not be played, the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a sound associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>location</code> The location at which the sound should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the sound is being played on. If the sound could not be played, the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const Entity&amp; entity) const = 0</p> <p>Plays a sound associated with the given sound handle in an Entity scope.</p> <p>Note</p> <p>Sounds played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>entity</code> The entity on which the sound should be played. Return The channel the sound is being played on. If the sound could not be played, the given handle is invalid, or the given entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a sound associated with the given sound handle in an Entity.</p> <p>Note</p> <p>Sounds played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>entity</code> The entity on which the sound should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the sound is being played on. If the sound could not be played, the given handle is invalid, or the given entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name) const = 0</p> <p>Plays a sound object associated with the given name in the World scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires an internal lookup.</p> Parameter <code>name</code> The name of the sound object to play. Return The channel the sound object is being played on. If the object could not be played, or an object with the given name was not found, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const AmVec3&amp; location) const = 0</p> <p>Plays a sound object associated with the given name in the World scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires an internal lookup.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>location</code> The location at which the sound should be played. Return The channel the sound object is being played on. If the object could not be played, or an object with the given name was not found, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given name in the World scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires an internal lookup.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>location</code> The location at which the sound should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the sound object is being played on. If the object could not be played, or an object with the given name was not found, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const Entity&amp; entity) const = 0</p> <p>Plays a sound object associated with the given name in an Entity scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires an internal lookup.</p> <p>Note</p> <p>Sound objects played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>entity</code> The entity on which the sound object should be played. Return The channel the sound object is being played on. If the object could not be played, an object with the given name was not found, or the entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given name in an Entity scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires an internal lookup.</p> <p>Note</p> <p>Sound objects played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>entity</code> The entity on which the sound object should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the sound object is being played on. If the object could not be played, an object with the given name was not found, or the entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id) const = 0</p> <p>Plays a sound object associated with the given ID in the  World scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires an internal lookup.</p> Parameter <code>id</code> The ID of the sound object to play. Return The channel the sound object is being played on. If the object could not be played, or an object with the given ID was not found, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const AmVec3&amp; location) const = 0</p> <p>Plays a sound object associated with the given ID in the World scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires an internal lookup.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>location</code> The location at which the sound object should be played. Return The channel the sound object is being played on. If the object could not be played, or an object with the given ID was not found, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given ID in the World scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires an internal lookup.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>location</code> The location at which the sound object should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the sound object is being played on. If the object could not be played, or an object with the given ID was not found, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const Entity&amp; entity) const = 0</p> <p>Plays a sound object associated with the given ID in an Entity scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires an internal lookup.</p> <p>Note</p> <p>Sound objects played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>entity</code> The entity on which the sound object should be played. Return The channel the sound object is being played on. If the object could not be played, an object with the given ID was not found, or the entity is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given ID in an Entity scope.</p> <p>Tip</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires an internal lookup.</p> <p>Note</p> <p>Sound objects played using this method should have been set in the <code>Entity</code> scope from their asset file. See more here.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>entity</code> The entity on which the sound object should be played. Parameter <code>userGain</code> The gain of the sound. Must be in the range [0, 1]. <p>Note</p> <p>The <code>userGain</code> parameter will not be used directly, but instead, it will be used in the final gain computation, which may include other factors like the attenuation and the master gain.</p> Return The channel the sound object is being played on. If the object could not be played, an object with the given ID was not found, or the entity is invalid, an invalid <code>Channel</code> is returned."},{"location":"api/engine/Engine/#registerdefaultextensions","title":"RegisterDefaultExtensions","text":"<p>static bool RegisterDefaultExtensions()</p> <p>Register all default plugins.</p>"},{"location":"api/engine/Engine/#registerextension","title":"RegisterExtension","text":"<p>template&lt;typename T, class... Args&gt; static std::shared_ptr&lt;T&gt; RegisterExtension(Args&amp;&amp;... args)</p> <p>Registers a plugin into Amplitude.</p> <p>Note</p> <p>Amplitude will automatically create a new instance of the plugin by calling the class constructor with the specified arguments.</p> Parameter <code>args</code> The arguments to pass to the plugin class constructor. Return The registered plugin."},{"location":"api/engine/Engine/#removeentity","title":"RemoveEntity","text":"<p>virtual void RemoveEntity(const Entity* entity) const = 0</p> <p>Removes an <code>Entity</code>.</p> Parameter <code>entity</code> The game entity to be removed. <p>virtual void RemoveEntity(AmEntityID id) const = 0</p> <p>Removes an <code>Entity</code> given its ID.</p> Parameter <code>id</code> The ID of the game entity to be removed."},{"location":"api/engine/Engine/#removeenvironment","title":"RemoveEnvironment","text":"<p>virtual void RemoveEnvironment(const Environment* environment) const = 0</p> <p>Removes an <code>Environment</code>.</p> Parameter <code>environment</code> The game environment to be removed. <p>virtual void RemoveEnvironment(AmEnvironmentID id) const = 0</p> <p>Removes an <code>Environment</code> given its ID.</p> Parameter <code>id</code> The ID of the game environment to be removed."},{"location":"api/engine/Engine/#removelistener","title":"RemoveListener","text":"<p>virtual void RemoveListener(AmListenerID id) const = 0</p> <p>Removes a <code>Listener</code> given its ID.</p> Parameter <code>id</code> The ID of the <code>Listener</code> to be removed. <p>virtual void RemoveListener(const Listener* listener) const = 0</p> <p>Removes a <code>Listener</code> given its handle.</p> Parameter <code>listener</code> The <code>Listener</code> to be removed."},{"location":"api/engine/Engine/#removepluginsearchpath","title":"RemovePluginSearchPath","text":"<p>static void RemovePluginSearchPath(const AmOsString&amp; path)</p> <p>Removes a path from the plugins search paths list.</p> Parameter <code>path</code> The path to remove from the plugins search path list."},{"location":"api/engine/Engine/#removeroom","title":"RemoveRoom","text":"<p>virtual void RemoveRoom(const Room* room) const = 0</p> <p>Removes a <code>Room</code>.</p> Parameter <code>room</code> The room to be removed. <p>virtual void RemoveRoom(AmRoomID id) const = 0</p> <p>Removes a <code>Room</code> given its ID.</p> Parameter <code>id</code> The ID of the room to be removed."},{"location":"api/engine/Engine/#setdefaultlistener","title":"SetDefaultListener","text":"<p>virtual void SetDefaultListener(const Listener* listener) = 0</p> <p>Sets the default sound listener.</p> <p>This method will set the default listener that will render every played sound sources.</p> <p>Note</p> <p>This method takes effect only if the <code>listener_fetch_mode</code> engine setting is set to <code>Default</code>.</p> Parameter <code>listener</code> A valid and initialized <code>Listener</code> instance. <p>virtual void SetDefaultListener(AmListenerID id) = 0</p> <p>Sets the default sound listener.</p> <p>This method will set the default listener that will render every played sound sources.</p> <p>Note</p> <p>This method takes effect only if the <code>listener_fetch_mode</code> engine setting is set to <code>Default</code>.</p> Parameter <code>id</code> The ID of a valid and registered <code>Listener</code>."},{"location":"api/engine/Engine/#setfilesystem","title":"SetFileSystem","text":"<p>virtual void SetFileSystem(std::shared_ptr&lt;FileSystem&gt; fs) = 0</p> <p>Sets a file system implementation to be used by the engine.</p> Parameter <code>fs</code> The file system implementation."},{"location":"api/engine/Engine/#setmastergain","title":"SetMasterGain","text":"<p>virtual void SetMasterGain(AmReal32 gain) const = 0</p> <p>Adjusts the master gain of the mixer.</p> Parameter <code>gain</code> The master gain."},{"location":"api/engine/Engine/#setmute","title":"SetMute","text":"<p>virtual void SetMute(bool mute) const = 0</p> <p>Mutes the engine, but keep processing audio.</p> Parameter <code>mute</code> Whether to mute or unmute the engine."},{"location":"api/engine/Engine/#setrtpcvalue","title":"SetRtpcValue","text":"<p>virtual void SetRtpcValue(RtpcHandle handle, double value) const = 0</p> <p>Sets the value of a <code>RTPC</code>.</p> Parameter <code>handle</code> The handle of the <code>RTPC</code> to update. Parameter <code>value</code> The value to set to the <code>RTPC</code>. <p>virtual void SetRtpcValue(AmRtpcID id, double value) const = 0</p> <p>Sets the value of a <code>RTPC</code>.</p> Parameter <code>id</code> The ID of the <code>RTPC</code> to update. Parameter <code>value</code> The value to set to the <code>RTPC</code>. <p>virtual void SetRtpcValue(const AmString&amp; name, double value) const = 0</p> <p>Sets the value of a <code>RTPC</code>.</p> Parameter <code>name</code> THe name of the <code>RTPC</code> to update. Parameter <code>value</code> The value to set to the <code>RTPC</code>."},{"location":"api/engine/Engine/#setswitchstate","title":"SetSwitchState","text":"<p>virtual void SetSwitchState(SwitchHandle handle, AmObjectID stateId) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>handle</code> The handle of the <code>Switch</code>. Parameter <code>stateId</code> The ID of the active state to set. <p>virtual void SetSwitchState(SwitchHandle handle, const AmString&amp; stateName) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>handle</code> The handle of the <code>Switch</code>. Parameter <code>stateName</code> The name of the active state to set. <p>virtual void SetSwitchState(SwitchHandle handle, const SwitchState&amp; state) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>handle</code> The handle of the <code>Switch</code>. Parameter <code>state</code> The active state to set. <p>virtual void SetSwitchState(AmSwitchID id, AmObjectID stateId) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>id</code> The ID of the <code>Switch</code> to update. Parameter <code>stateId</code> The ID of the active state to set. <p>virtual void SetSwitchState(AmSwitchID id, const AmString&amp; stateName) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>id</code> The ID of the <code>Switch</code> to update. Parameter <code>stateName</code> The name of the active state to set. <p>virtual void SetSwitchState(AmSwitchID id, const SwitchState&amp; state) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>id</code> The ID of the <code>Switch</code> to update. Parameter <code>state</code> The active state to set. <p>virtual void SetSwitchState(const AmString&amp; name, AmObjectID stateId) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>name</code> The name of the <code>Switch</code> to update. Parameter <code>stateId</code> The ID of the active state to set. <p>virtual void SetSwitchState(const AmString&amp; name, const AmString&amp; stateName) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>name</code> The name of the <code>Switch</code> to update. Parameter <code>stateName</code> The name of the active state to set. <p>virtual void SetSwitchState(const AmString&amp; name, const SwitchState&amp; state) const = 0</p> <p>Sets the active state of the defined <code>Switch</code>.</p> Parameter <code>name</code> The name of the <code>Switch</code> to update. Parameter <code>state</code> The active state to set."},{"location":"api/engine/Engine/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>virtual void StartCloseFileSystem() = 0</p> <p>Closes the file system, usually in a separate thread.</p>"},{"location":"api/engine/Engine/#startloadsoundfiles","title":"StartLoadSoundFiles","text":"<p>virtual void StartLoadSoundFiles() = 0</p> <p>Starts the loading of sound files referenced in loaded sound banks.</p> <p>This process will run in another thread. You must call <code>TryFinalizeLoadSoundFiles()</code> to know when the loading has completed, and to automatically release used resources.</p>"},{"location":"api/engine/Engine/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>virtual void StartOpenFileSystem() = 0</p> <p>Opens the file system, usually in a separate thread.</p>"},{"location":"api/engine/Engine/#stopall","title":"StopAll","text":"<p>virtual void StopAll() const = 0</p> <p>Stops all playing sound objects.</p> <p>This is the equivalent of calling <code>Stop()</code> on all generated channels.</p>"},{"location":"api/engine/Engine/#trigger","title":"Trigger","text":"<p>[[nodiscard]] virtual EventCanceler Trigger(EventHandle handle, const Entity&amp; entity) const = 0</p> <p>Triggers the event associated to the given handle.</p> Parameter <code>handle</code> The handle of the event to trigger. Parameter <code>entity</code> The entity on which trigger the event. Return An <code>EventCanceler</code> object which may be used to cancel the execution of the event. <p>[[nodiscard]] virtual EventCanceler Trigger(const AmString&amp; name, const Entity&amp; entity) const = 0</p> <p>Triggers the event associated to the given name.</p> <p>Tip</p> <p>Triggering an event with its <code>EventHandle</code> is faster than using the event name as using the name requires an internal lookup.</p> Parameter <code>name</code> The name of event to trigger. Parameter <code>entity</code> The entity on which trigger the event. Return An <code>EventCanceler</code> object which may be used to cancel the execution of the event. <p>[[nodiscard]] virtual EventCanceler Trigger(AmEventID id, const Entity&amp; entity) const = 0</p> <p>Triggers the event associated to the given ID.</p> <p>Tip</p> <p>Triggering an event with its <code>EventHandle</code> is faster than using the event ID as using the ID requires an internal lookup.</p> Parameter <code>id</code> The ID of event to trigger. Parameter <code>entity</code> The entity on which trigger the event. Return An <code>EventCanceler</code> object which may be used to cancel the execution of the event."},{"location":"api/engine/Engine/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>virtual bool TryFinalizeCloseFileSystem() = 0</p> <p>Checks if the file system has been fully closed.</p> <p>This method is helpful when the file system implementation is closed asynchronously. You can use this method to wait until the file system is fully closed.</p> <p>Example</p> <pre><code>// Close the file system\namEngine-&gt;StartCloseFileSystem();\nwhile (!amEngine-&gt;TryFinalizeCloseFileSystem()) {\n    // Wait until the file system is fully closed\n    Thread::Sleep(100);\n}\n// The file system is now closed\n//...\n</code></pre> Return <code>true</code> if the file system has been fully closed, <code>false</code> otherwise."},{"location":"api/engine/Engine/#tryfinalizeloadsoundfiles","title":"TryFinalizeLoadSoundFiles","text":"<p>virtual bool TryFinalizeLoadSoundFiles() = 0</p> <p>Checks if the loading of sound files has been completed, and releases used resources.</p> <p>Note</p> <p>This method should be called after calling <code>StartLoadSoundFiles()</code>.</p> <p>Example</p> <pre><code>// Start loading sound files\namEngine-&gt;StartLoadSoundFiles();\nwhile (!amEngine-&gt;TryFinalizeLoadSoundFiles()) {\n    // Wait for loading to complete\n    Thread::Sleep(100);\n}\n// Sound files have been loaded, and used resources has been released\n</code></pre> Return <code>true</code> when the sound files have been successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>virtual bool TryFinalizeOpenFileSystem() = 0</p> <p>Checks if the file system has been fully loaded.</p> <p>This method is helpful when the file system implementation is loaded asynchronously. You can use this method to wait until the file system is fully loaded before using it.</p> <p>Example</p> <pre><code>// Open the file system\namEngine-&gt;StartOpenFileSystem();\nwhile (!amEngine-&gt;TryFinalizeOpenFileSystem()) {\n    // Wait until the file system is fully loaded\n    Thread::Sleep(100);\n}\n// Use the file system now\n//...\n</code></pre> Return <code>true</code> if the file system has been fully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#unloadsoundbank","title":"UnloadSoundBank","text":"<p>virtual void UnloadSoundBank(const AmOsString&amp; filename) = 0</p> <p>Unloads a sound bank given its filename.</p> Parameter <code>filename</code> The file to unload. <p>virtual void UnloadSoundBank(AmBankID id) = 0</p> <p>Unloads a sound bank given its ID.</p> Parameter <code>id</code> The sound bank id to unload."},{"location":"api/engine/Engine/#unloadsoundbanks","title":"UnloadSoundBanks","text":"<p>virtual void UnloadSoundBanks() = 0</p> <p>Unloads all the loaded sound banks.</p>"},{"location":"api/engine/Engine/#unregisterdefaultextensions","title":"UnregisterDefaultExtensions","text":"<p>static bool UnregisterDefaultExtensions()</p> <p>Unregister all default plugins.</p>"},{"location":"api/engine/Engine/#unregisterextension","title":"UnregisterExtension","text":"<p>template&lt;typename T&gt; static void UnregisterExtension(std::shared_ptr&lt;T&gt;&amp; plugin)</p> <p>Unregisters a plugin from Amplitude.</p> Parameter <code>plugin</code> The plugin to unregister. The pointer will automatically be discarded by calling this method."},{"location":"api/engine/Engine/#version","title":"Version","text":"<p>* Version() const</p> <p>Gets the version structure.</p> Return The version string structure"},{"location":"api/engine/Engine/#waituntilframes","title":"WaitUntilFrames","text":"<p>virtual void WaitUntilFrames(AmUInt64 frameCount) const = 0</p> <p>Waits until the specified number of frames are ready.</p> <p>This method blocks the current thread until the specified number of frames are ready.</p> Parameter <code>frameCount</code> The number of frames to wait until."},{"location":"api/engine/Engine/#waituntilnextframe","title":"WaitUntilNextFrame","text":"<p>virtual void WaitUntilNextFrame() const = 0</p> <p>Waits until the next frame is ready.</p> <p>This method blocks the current thread until the next frame is ready.</p>"},{"location":"api/engine/Entity/","title":"Entity","text":"<p>class  Entity</p> <p>An Entity represents a spatially positioned object in the game.</p> <p>Amplitude use entities to link sound to an object in the game. Each sounds played from an entity get the location and orientation data fom that entity.</p> <p>The <code>Entity</code> class is a lightweight reference to an <code>EntityInternalState</code> object which is managed by the <code>Engine</code>.</p>"},{"location":"api/engine/Entity/#functions","title":"Functions","text":"Name Description Entity Creates an uninitialized <code>Entity</code>. Entity Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Entity</code>. Valid Checks whether this <code>Entity</code> has been initialized. GetId Gets the ID of this <code>Entity</code>. GetVelocity Gets the velocity of the <code>Entity</code>. SetLocation Sets the location of this <code>Entity</code>. GetLocation Gets the current location of this <code>Entity</code>. SetOrientation Sets the orientation of this <code>Entity</code>. GetDirection Gets the direction vector of the <code>Entity</code>. GetUp Gets the up vector of the <code>Entity</code>. GetOrientation Gets the orientation of the <code>Entity</code>. Update Updates the state of this <code>Entity</code>. SetObstruction Sets the obstruction level of sounds played by this <code>Entity</code>. SetOcclusion Sets the occlusion level of sounds played by this <code>Entity</code>. SetDirectivity Sets the directivity and sharpness of sounds played by this <code>Entity</code>. GetObstruction Gets the obstruction level of sounds played by this <code>Entity</code>. GetOcclusion Gets the occlusion level of sounds played by this <code>Entity</code>. GetDirectivity Gets the directivity of sounds played by this <code>Entity</code>. GetDirectivitySharpness Gets the directivity sharpness of sounds played by this <code>Entity</code>. SetEnvironmentFactor Sets the environment factor for this <code>Entity</code> in the given environment. GetEnvironmentFactor Gets the environment factor of this <code>Entity</code> for the given environment. GetEnvironments Gets the list of environments where this <code>Entity</code> belongs or has visited. GetState Returns the internal state of this <code>Entity</code>."},{"location":"api/engine/Entity/#function-details","title":"Function Details","text":""},{"location":"api/engine/Entity/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Entity</code>.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p> <p>To completely destroy the <code>Entity</code>, use <code>RemoveEntity()</code> method of the <code>Engine</code> instance. <pre><code>amEngine-&gt;RemoveEntity(1234); // You should provide the entity ID\n</code></pre></p>"},{"location":"api/engine/Entity/#entity_1","title":"Entity","text":"<p>Entity()</p> <p>Creates an uninitialized <code>Entity</code>.</p> <p>An uninitialized Entity cannot provide location and orientation information, and therefore cannot play sounds.</p> <p>To create an initialized <code>Entity</code>, use the <code>AddEntity()</code> method of the <code>Engine</code> instance. <pre><code>amEngine-&gt;AddEntity(1234); // You should provide an unique ID\n</code></pre></p> <p>explicit Entity(EntityInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Entity/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the direction vector of the <code>Entity</code>.</p> Return The direction vector."},{"location":"api/engine/Entity/#getdirectivity","title":"GetDirectivity","text":"<p>[[nodiscard]] AmReal32 GetDirectivity() const</p> <p>Gets the directivity of sounds played by this <code>Entity</code>.</p> Return The directivity of sound sources."},{"location":"api/engine/Entity/#getdirectivitysharpness","title":"GetDirectivitySharpness","text":"<p>[[nodiscard]] AmReal32 GetDirectivitySharpness() const</p> <p>Gets the directivity sharpness of sounds played by this <code>Entity</code>.</p> Return The directivity sharpness of sounds played by this <code>Entity</code>."},{"location":"api/engine/Entity/#getenvironmentfactor","title":"GetEnvironmentFactor","text":"<p>[[nodiscard]] AmReal32 GetEnvironmentFactor(AmEnvironmentID environment) const</p> <p>Gets the environment factor of this <code>Entity</code> for the given environment.</p> Parameter <code>environment</code> The environment ID. Return The environment factor."},{"location":"api/engine/Entity/#getenvironments","title":"GetEnvironments","text":"<p>[[nodiscard]] const std::map&lt;AmEnvironmentID, AmReal32&gt;&amp; GetEnvironments() const</p> <p>Gets the list of environments where this <code>Entity</code> belongs or has visited.</p> Return The list of environments where this <code>Entity</code> belongs or has visited."},{"location":"api/engine/Entity/#getid","title":"GetId","text":"<p>[[nodiscard]] AmEntityID GetId() const</p> <p>Gets the ID of this <code>Entity</code>.</p> Return The <code>Entity</code> ID."},{"location":"api/engine/Entity/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this <code>Entity</code>.</p> Return The current location of this <code>Entity</code>."},{"location":"api/engine/Entity/#getobstruction","title":"GetObstruction","text":"<p>[[nodiscard]] AmReal32 GetObstruction() const</p> <p>Gets the obstruction level of sounds played by this <code>Entity</code>.</p> Return The obstruction amount."},{"location":"api/engine/Entity/#getocclusion","title":"GetOcclusion","text":"<p>[[nodiscard]] AmReal32 GetOcclusion() const</p> <p>Gets the occlusion level of sounds played by this <code>Entity</code>.</p> Return The occlusion amount."},{"location":"api/engine/Entity/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the orientation of the <code>Entity</code>.</p> Return The entity's orientation."},{"location":"api/engine/Entity/#getstate","title":"GetState","text":"<p>[[nodiscard]] EntityInternalState* GetState() const</p> <p>Returns the internal state of this <code>Entity</code>.</p> Return The <code>Entity</code> internal state. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Entity/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of the <code>Entity</code>.</p> Return The up vector."},{"location":"api/engine/Entity/#getvelocity","title":"GetVelocity","text":"<p>[[nodiscard]] const AmVec3&amp; GetVelocity() const</p> <p>Gets the velocity of the <code>Entity</code>.</p> Return The entity's velocity."},{"location":"api/engine/Entity/#setdirectivity","title":"SetDirectivity","text":"<p>void SetDirectivity(AmReal32 directivity, AmReal32 sharpness) const</p> <p>Sets the directivity and sharpness of sounds played by this <code>Entity</code>.</p> Parameter <code>directivity</code> The directivity of the sound source, in the range [0, 1]. Parameter <code>sharpness</code> The directivity sharpness of the sound source, in the range [1, +INF]. Increasing this value increases the directivity towards the front of the source."},{"location":"api/engine/Entity/#setenvironmentfactor","title":"SetEnvironmentFactor","text":"<p>void SetEnvironmentFactor(AmEnvironmentID environment, AmReal32 factor) const</p> <p>Sets the environment factor for this <code>Entity</code> in the given environment.</p> Parameter <code>environment</code> The environment ID. Parameter <code>factor</code> The environment factor."},{"location":"api/engine/Entity/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this <code>Entity</code>.</p> Parameter <code>location</code> The new location."},{"location":"api/engine/Entity/#setobstruction","title":"SetObstruction","text":"<p>void SetObstruction(AmReal32 obstruction) const</p> <p>Sets the obstruction level of sounds played by this <code>Entity</code>.</p> Parameter <code>obstruction</code> The obstruction amount."},{"location":"api/engine/Entity/#setocclusion","title":"SetOcclusion","text":"<p>void SetOcclusion(AmReal32 occlusion) const</p> <p>Sets the occlusion level of sounds played by this <code>Entity</code>.</p> Parameter <code>occlusion</code> The occlusion amount."},{"location":"api/engine/Entity/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the orientation of this <code>Entity</code>.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/engine/Entity/#update","title":"Update","text":"<p>void Update() const</p> <p>Updates the state of this <code>Entity</code>.</p> <p>This method is called automatically by the <code>Engine</code> on each frames to update the internal state of the <code>Entity</code></p> <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Entity/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Entity</code> has been initialized.</p> Return <code>true</code> if this <code>Entity</code> is initialized, <code>false</code> otherwise."},{"location":"api/engine/Environment/","title":"Environment","text":"<p>class  Environment</p> <p>An Environment is a zone where every spatialized audio playing inside him got      * applied a specific effect.</p> <p>The <code>Environment</code> class is a lightweight reference to an <code>EnvironmentInternalState</code> object which is managed by the <code>Engine</code>.</p>"},{"location":"api/engine/Environment/#functions","title":"Functions","text":"Name Description Environment Creates an uninitialized <code>Environment</code>. Environment Creates a wrapper instance over the provided state. Clear Uninitializes this Environment. Valid Checks whether this <code>Environment</code> has been initialized. GetId Returns the unique ID of this <code>Environment</code>. SetLocation Sets the location of this <code>Environment</code>. GetLocation Gets the current location of this <code>Environment</code>. SetOrientation Sets the orientation of this <code>Environment</code>. GetOrientation Gets the current orientation of this <code>Environment</code>. GetDirection Gets the direction vector of the <code>Environment</code>. GetUp Gets the up vector of the <code>Environment</code>. GetFactor Gets the <code>Environment</code> factor for the given location. GetFactor Gets the <code>Environment</code> factor for the given entity. SetEffect Sets the <code>Effect</code> applied in the <code>Environment</code>. SetEffect Sets the <code>Effect</code> applied in the <code>Environment</code>. SetEffect Sets the <code>Effect</code> applied in the <code>Environment</code>. GetEffect Gets the <code>Effect</code> linked to this environment. SetZone Sets the <code>Zone</code> for this environment. GetZone Gets the <code>Zone</code> linked to this environment. GetState Returns the internal state of this <code>Environment</code>. Update Updates the state of this <code>Environment</code>."},{"location":"api/engine/Environment/#function-details","title":"Function Details","text":""},{"location":"api/engine/Environment/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this Environment.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/engine/Environment/#environment_1","title":"Environment","text":"<p>Environment()</p> <p>Creates an uninitialized <code>Environment</code>.</p> <p>An uninitialized Environment cannot provide location and orientation information, and therefore cannot play sounds.</p> <p>explicit Environment(EnvironmentInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Environment/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the direction vector of the <code>Environment</code>.</p> Return The direction vector."},{"location":"api/engine/Environment/#geteffect","title":"GetEffect","text":"<p>[[nodiscard]] const Effect* GetEffect() const</p> <p>Gets the <code>Effect</code> linked to this environment.</p> Return An <code>Effect</code> instance."},{"location":"api/engine/Environment/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] AmReal32 GetFactor(const AmVec3&amp; location) const</p> <p>Gets the <code>Environment</code> factor for the given location.</p> Parameter <code>location</code> The location for which compute the environment factor. Return The environment factor. <p>[[nodiscard]] AmReal32 GetFactor(const Entity&amp; entity) const</p> <p>Gets the <code>Environment</code> factor for the given entity.</p> Parameter <code>entity</code> The entity for which compute the environment factor. Return The environment factor."},{"location":"api/engine/Environment/#getid","title":"GetId","text":"<p>[[nodiscard]] AmEnvironmentID GetId() const</p> <p>Returns the unique ID of this <code>Environment</code>.</p> Return The <code>Environment</code> unique ID."},{"location":"api/engine/Environment/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this <code>Environment</code>.</p> Return The current location of this <code>Environment</code>."},{"location":"api/engine/Environment/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the current orientation of this <code>Environment</code>.</p> Return The current orientation of this <code>Environment</code>."},{"location":"api/engine/Environment/#getstate","title":"GetState","text":"<p>[[nodiscard]] EnvironmentInternalState* GetState() const</p> <p>Returns the internal state of this <code>Environment</code>.</p> Return The <code>Environment</code> internal state. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Environment/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of the <code>Environment</code>.</p> Return The up vector."},{"location":"api/engine/Environment/#getzone","title":"GetZone","text":"<p>[[nodiscard]] std::shared_ptr&lt;Zone&gt; GetZone() const</p> <p>Gets the <code>Zone</code> linked to this environment.</p> Return An <code>Zone</code> instance."},{"location":"api/engine/Environment/#seteffect","title":"SetEffect","text":"<p>void SetEffect(AmEffectID effect) const</p> <p>Sets the <code>Effect</code> applied in the <code>Environment</code>.</p> Parameter <code>effect</code> The ID of the effect to apply in the <code>Environment</code>. <p>void SetEffect(const AmString&amp; effect) const</p> <p>Sets the <code>Effect</code> applied in the <code>Environment</code>.</p> Parameter <code>effect</code> The name of the effect to apply in the <code>Environment</code>. <p>void SetEffect(const Effect* effect) const</p> <p>Sets the <code>Effect</code> applied in the <code>Environment</code>.</p> Parameter <code>effect</code> The effect to apply in the <code>Environment</code>."},{"location":"api/engine/Environment/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this <code>Environment</code>.</p> Parameter <code>location</code> The new location."},{"location":"api/engine/Environment/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the orientation of this <code>Environment</code>.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/engine/Environment/#setzone","title":"SetZone","text":"<p>void SetZone(std::shared_ptr&lt;Zone&gt; zone) const</p> <p>Sets the <code>Zone</code> for this environment.</p> Parameter <code>zone</code> The environment's zone."},{"location":"api/engine/Environment/#update","title":"Update","text":"<p>void Update() const</p> <p>Updates the state of this <code>Environment</code>.</p> <p>This method is called automatically by the <code>Engine</code> on each frames to update the internal state of the <code>Environment</code>.</p> <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Environment/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Environment</code> has been initialized.</p> Return <code>true</code> if this <code>Environment</code> is initialized, <code>false</code> otherwise."},{"location":"api/engine/EventCanceler/","title":"EventCanceler","text":"<p>class  EventCanceler</p> <p>An helper class used to cancel a running <code>Event</code>.</p> See Event"},{"location":"api/engine/EventCanceler/#functions","title":"Functions","text":"Name Description EventCanceler Creates an uninitialized <code>EventCanceler</code>. EventCanceler Creates an <code>EventCanceler</code> which will abort * the given event once cancelled. ~EventCanceler Destroys the event canceller and releases * the wrapped event instance. Valid Checks whether this <code>EventCanceler</code> has been initialized. Cancel Cancels and abort the wrapped <code>Event</code>. GetEvent Returns the <code>Event</code> wrapped by this <code>EventCanceler</code>."},{"location":"api/engine/EventCanceler/#function-details","title":"Function Details","text":""},{"location":"api/engine/EventCanceler/#cancel","title":"Cancel","text":"<p>void Cancel() const</p> <p>Cancels and abort the wrapped <code>Event</code>.</p>"},{"location":"api/engine/EventCanceler/#eventcanceler_1","title":"EventCanceler","text":"<p>EventCanceler()</p> <p>Creates an uninitialized <code>EventCanceler</code>.</p> <p>An uninitialized <code>EventCanceler</code> cannot be canceled.</p> <p>explicit EventCanceler(EventInstance* event)</p> <p>Creates an <code>EventCanceler</code> which will abort          * the given event once cancelled.</p> Parameter <code>event</code> The event instance to cancel."},{"location":"api/engine/EventCanceler/#getevent","title":"GetEvent","text":"<p>[[nodiscard]] EventInstance* GetEvent() const</p> <p>Returns the <code>Event</code> wrapped by this <code>EventCanceler</code>.</p> Return The <code>Event</code> wrapped by this <code>EventCanceler</code>."},{"location":"api/engine/EventCanceler/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>EventCanceler</code> has been initialized.</p> Return <code>true</code> if this <code>EventCanceler</code> has been initialized, <code>false</code> otherwise."},{"location":"api/engine/EventCanceler/#eventcanceler_2","title":"~EventCanceler","text":"<p>~EventCanceler()</p> <p>Destroys the event canceller and releases          * the wrapped event instance.</p>"},{"location":"api/engine/EventInstance/","title":"EventInstance","text":"<p>class  EventInstance</p> <p>A triggered event.</p> <p><code>EventInstance</code> objects are created when an <code>Event</code> is triggered. They represent the lifetime of that event at that particular time.</p> <p>The internal state of an <code>EventInstance</code> is owned by that <code>EventInstance</code>, that means each time you trigger an <code>Event</code>, a new instance with its own state is created.</p> See Event"},{"location":"api/engine/EventInstance/#functions","title":"Functions","text":"Name Description ~EventInstance Default constructor. AdvanceFrame Applies a frame update on this <code>Event</code>. IsRunning Returns whether this <code>EventInstance</code> is running. Abort Aborts the execution of this <code>Event</code>."},{"location":"api/engine/EventInstance/#function-details","title":"Function Details","text":""},{"location":"api/engine/EventInstance/#abort","title":"Abort","text":"<p>virtual void Abort() = 0</p> <p>Aborts the execution of this <code>Event</code>.</p>"},{"location":"api/engine/EventInstance/#advanceframe","title":"AdvanceFrame","text":"<p>virtual void AdvanceFrame(AmTime deltaTime) = 0</p> <p>Applies a frame update on this <code>Event</code>.</p> <p>This method is called once per frame to update the event instance's state.</p> Parameter <code>deltaTime</code> The time elapsed since the last frame. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/EventInstance/#isrunning","title":"IsRunning","text":"<p>[[nodiscard]] virtual bool IsRunning() const = 0</p> <p>Returns whether this <code>EventInstance</code> is running.</p> Return <code>true</code> if the event is running, <code>false</code> otherwise."},{"location":"api/engine/EventInstance/#eventinstance_1","title":"~EventInstance","text":"<p>virtual ~EventInstance() = default</p> <p>Default constructor.</p>"},{"location":"api/engine/Fader/","title":"Fader","text":"<p>class  Fader</p> <p>Helper class to process faders.</p> <p>A fader is used to move a value to a specific target value during an amount of time and according to a fading algorithm.</p>"},{"location":"api/engine/Fader/#variables","title":"Variables","text":"Name Description m_name The name of this Fader."},{"location":"api/engine/Fader/#functions","title":"Functions","text":"Name Description Fader Create a new Fader instance. Fader Default Fader constructor. ~Fader Default destructor. CreateInstance Creates a new instance of the Fader. DestroyInstance Destroys an instance of the Fader. GetName Gets the name of this Fader. GetControlPoints Gets the control points of the transition curve used by this Fader. Register Registers a new fader. Unregister Unregister a fader. Construct Creates a new instance of the fader with the given name and returns its pointer. Destruct Destroys the given fader instance. LockRegistry Locks the faders registry. UnlockRegistry Unlocks the fader's registry. GetRegistry Gets the list of registered Faders."},{"location":"api/engine/Fader/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Fader/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this Fader.</p>"},{"location":"api/engine/Fader/#function-details","title":"Function Details","text":""},{"location":"api/engine/Fader/#construct","title":"Construct","text":"<p>static FaderInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the fader with the given name and returns its pointer.</p> <p>Note</p> <p>The returned pointer should be deleted using <code>Destruct()</code>.</p> Parameter <code>name</code> The name of the fader. Return The fader with the given name, or <code>nullptr</code> if none."},{"location":"api/engine/Fader/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance()</p> <p>Creates a new instance of the Fader.</p> Return A new instance of the Fader."},{"location":"api/engine/Fader/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(FaderInstance* instance) = 0</p> <p>Destroys an instance of the Fader.</p> <p>Note</p> <p>The instance should have been created with CreateInstance().</p> Parameter <code>instance</code> The Fader instance to be destroyed."},{"location":"api/engine/Fader/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, FaderInstance* instance)</p> <p>Destroys the given fader instance.</p> Parameter <code>name</code> The name of the fader. Parameter <code>instance</code> The fader instance to destroy."},{"location":"api/engine/Fader/#fader_1","title":"Fader","text":"<p>explicit Fader(AmString name)</p> <p>Create a new Fader instance.</p> Parameter <code>name</code> The Fader name. eg. \"MiniAudioLinear\". <p>Fader()</p> <p>Default Fader constructor.</p> <p>This will not automatically register the Fader. It's meant for internal Faders only.</p>"},{"location":"api/engine/Fader/#getcontrolpoints","title":"GetControlPoints","text":"<p>[[nodiscard]] virtual BezierCurveControlPoints GetControlPoints() const = 0</p> <p>Gets the control points of the transition curve used by this Fader.</p> Return The control points of the transition curve used by this Fader."},{"location":"api/engine/Fader/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this Fader.</p> Return The name of this Fader."},{"location":"api/engine/Fader/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, std::shared_ptr&lt;Fader&gt;&gt;&amp; GetRegistry()</p> <p>Gets the list of registered Faders.</p> Return The registry of Faders."},{"location":"api/engine/Fader/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the faders registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new fader after the engine is fully loaded.</p>"},{"location":"api/engine/Fader/#register","title":"Register","text":"<p>static void Register(std::shared_ptr&lt;Fader&gt; fader)</p> <p>Registers a new fader.</p> Parameter <code>fader</code> The Fader to add in the registry."},{"location":"api/engine/Fader/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the fader's registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new fader after the engine is fully unloaded.</p>"},{"location":"api/engine/Fader/#unregister","title":"Unregister","text":"<p>static void Unregister(std::shared_ptr&lt;const Fader&gt; fader)</p> <p>Unregister a fader.</p> Parameter <code>fader</code> The Fader to remove from the registry."},{"location":"api/engine/Fader/#fader_2","title":"~Fader","text":"<p>virtual ~Fader()</p> <p>Default destructor.</p>"},{"location":"api/engine/FaderInstance/","title":"FaderInstance","text":"<p>class  FaderInstance</p> <p>A Fader instance. An object of this class will be created each time a <code>Fader</code> is requested.</p>"},{"location":"api/engine/FaderInstance/#types","title":"Types","text":"Name Description Transition Create an animation transition function using * a one-dimensional cubic B\u00e9zier curve."},{"location":"api/engine/FaderInstance/#functions","title":"Functions","text":"Name Description FaderInstance Constructs a new FaderInstance object. ~FaderInstance Default destructor. Set Set up fader. Set Set up fader. SetDuration Sets the duration of the transition. GetFromTime Gets the current fading value. GetFromPercentage Gets the current fading value. GetState Gets the state of this Fader. SetState Sets the state of this Fader. Start Sets the fading start time."},{"location":"api/engine/FaderInstance/#function-details","title":"Function Details","text":""},{"location":"api/engine/FaderInstance/#faderinstance_1","title":"FaderInstance","text":"<p>FaderInstance()</p> <p>Constructs a new FaderInstance object.</p> <p>This will initialize the fader instance state to default values.</p>"},{"location":"api/engine/FaderInstance/#getfrompercentage","title":"GetFromPercentage","text":"<p>virtual AmReal64 GetFromPercentage(AmReal64 percentage)</p> <p>Gets the current fading value.</p> Parameter <code>percentage</code> The percentage of time elapsed. This should be in the range [0, 1]. Return The current value."},{"location":"api/engine/FaderInstance/#getfromtime","title":"GetFromTime","text":"<p>virtual AmReal64 GetFromTime(AmTime time)</p> <p>Gets the current fading value.</p> <p>To use this method you first need to define the fading start time using <code>Start()</code>.</p> Parameter <code>time</code> The time at which the value should be calculated. Return The current value."},{"location":"api/engine/FaderInstance/#getstate","title":"GetState","text":"<p>[[nodiscard]] inline eFaderState GetState() const</p> <p>Gets the state of this Fader.</p> Return The Fader state."},{"location":"api/engine/FaderInstance/#set","title":"Set","text":"<p>void Set(AmReal64 from, AmReal64 to, AmTime duration)</p> <p>Set up fader.</p> Parameter <code>from</code> The start value. Parameter <code>to</code> The target value. Parameter <code>duration</code> The duration of transition. <p>void Set(AmReal64 from, AmReal64 to)</p> <p>Set up fader.</p> Parameter <code>from</code> The start value. Parameter <code>to</code> The target value."},{"location":"api/engine/FaderInstance/#setduration","title":"SetDuration","text":"<p>void SetDuration(AmTime duration)</p> <p>Sets the duration of the transition.</p> Parameter <code>duration</code> The transition duration."},{"location":"api/engine/FaderInstance/#setstate","title":"SetState","text":"<p>inline void SetState(eFaderState state)</p> <p>Sets the state of this Fader.</p> Parameter <code>state</code> The state to set."},{"location":"api/engine/FaderInstance/#start","title":"Start","text":"<p>void Start(AmTime time = 0.0)</p> <p>Sets the fading start time.</p> Parameter <code>time</code> The fading start time."},{"location":"api/engine/FaderInstance/#faderinstance_2","title":"~FaderInstance","text":"<p>virtual ~FaderInstance() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/FaderInstance/Transition/","title":"Transition","text":"<p>struct Transition</p> <p>Create an animation transition function using          * a one-dimensional cubic B\u00e9zier curve.</p> <p>This use the exact same algorithm as in CSS. The first and last control points of the cubic B\u00e9zier curve are fixed to (0,0) and (1,1) respectively.</p>"},{"location":"api/engine/FaderInstance/Transition/#variables","title":"Variables","text":"Name Description m_controlPoints The control points."},{"location":"api/engine/FaderInstance/Transition/#functions","title":"Functions","text":"Name Description Transition Constructs a new Transition curve. Transition Constructs a new Transition curve. Ease Given an animation duration percentage (in the range [0, 1]), * it calculates the animation progression percentage from the configured curve."},{"location":"api/engine/FaderInstance/Transition/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/FaderInstance/Transition/#m_controlpoints","title":"m_controlPoints","text":"<p>BezierCurveControlPoints m_controlPoints</p> <p>The control points.</p>"},{"location":"api/engine/FaderInstance/Transition/#function-details","title":"Function Details","text":""},{"location":"api/engine/FaderInstance/Transition/#ease","title":"Ease","text":"<p>[[nodiscard]] AmTime Ease(AmTime t) const</p> <p>Given an animation duration percentage (in the range [0, 1]),              * it calculates the animation progression percentage from the configured curve.</p> Parameter <code>t</code> The animation duration percentage (in the range [0, 1]). Return The animation progress percentage (in the range [0, 1])."},{"location":"api/engine/FaderInstance/Transition/#transition_1","title":"Transition","text":"<p>Transition(AmReal32 x1, AmReal32 y1, AmReal32 x2, AmReal32 y2)</p> <p>Constructs a new Transition curve.</p> Parameter <code>x1</code> The x coordinate of the second control point. Parameter <code>y1</code> The y coordinate of the second control point. Parameter <code>x2</code> The x coordinate of the third control point. Parameter <code>y2</code> The y coordinate of the third control point. <p>Transition(const BezierCurveControlPoints&amp; controlPoints)</p> <p>Constructs a new Transition curve.</p> Parameter <code>controlPoints</code> The control points of the curve."},{"location":"api/engine/Listener/","title":"Listener","text":"<p>class  Listener</p> <p>A object which can render sound sources.</p> <p>The <code>Listener</code> class is a lightweight reference to a <code>ListenerInternalState</code> which is managed by the <code>Engine</code>. Multiple <code>Listener</code> objects may point to the same underlying data.</p>"},{"location":"api/engine/Listener/#functions","title":"Functions","text":"Name Description Listener Construct an uninitialized <code>Listener</code>. Listener Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Listener</code>. Valid Checks whether this <code>Listener</code> has been initialized. GetId Gets the ID of this <code>Listener</code>. GetVelocity Gets the velocity of the <code>Listener</code>. GetLocation Gets the location of this <code>Listener</code>. SetLocation Sets the location of this <code>Listener</code>. GetDirection Gets the direction vector of the <code>Listener</code>. GetUp Gets the up vector of the <code>Listener</code>. SetOrientation Sets the location, direction and up vector of this <code>Listener</code>. GetOrientation Gets the orientation of the <code>Listener</code>. SetDirectivity Sets the directivity and sharpness of <code>Listener</code>. This affects how sounds are perceived * by the <code>Listener</code>. GetDirectivity Gets the directivity of sounds played by this <code>Listener</code>. GetDirectivitySharpness Gets the directivity sharpness of sounds played by this <code>Listener</code>. GetInverseMatrix Gets the inverse matrix of the <code>Listener</code>. Update Update the state of this <code>Listener</code>. GetState Returns the internal state of this Listener."},{"location":"api/engine/Listener/#function-details","title":"Function Details","text":""},{"location":"api/engine/Listener/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Listener</code>.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p> <p>To completely destroy the <code>Listener</code>, use <code>RemoveListener()</code> method of the <code>Engine</code> instance. <pre><code>amEngine-&gt;RemoveListener(1234); // You should provide the listener ID\n</code></pre></p>"},{"location":"api/engine/Listener/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the direction vector of the <code>Listener</code>.</p> Return The direction vector."},{"location":"api/engine/Listener/#getdirectivity","title":"GetDirectivity","text":"<p>[[nodiscard]] AmReal32 GetDirectivity() const</p> <p>Gets the directivity of sounds played by this <code>Listener</code>.</p> Return The directivity of sound sources."},{"location":"api/engine/Listener/#getdirectivitysharpness","title":"GetDirectivitySharpness","text":"<p>[[nodiscard]] AmReal32 GetDirectivitySharpness() const</p> <p>Gets the directivity sharpness of sounds played by this <code>Listener</code>.</p> Return The directivity sharpness of sounds played by this <code>Listener</code>."},{"location":"api/engine/Listener/#getid","title":"GetId","text":"<p>[[nodiscard]] AmListenerID GetId() const</p> <p>Gets the ID of this <code>Listener</code>.</p> Return The <code>Listener</code> ID."},{"location":"api/engine/Listener/#getinversematrix","title":"GetInverseMatrix","text":"<p>[[nodiscard]] const AmMat4&amp; GetInverseMatrix() const</p> <p>Gets the inverse matrix of the <code>Listener</code>.</p> <p>You can use this matrix to convert locations from global space to <code>Listener</code> space.</p>"},{"location":"api/engine/Listener/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the location of this <code>Listener</code>.</p> Return The location of this <code>Listener</code>."},{"location":"api/engine/Listener/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] Orientation GetOrientation() const</p> <p>Gets the orientation of the <code>Listener</code>.</p> Return The orientation of this <code>Listener</code>."},{"location":"api/engine/Listener/#getstate","title":"GetState","text":"<p>[[nodiscard]] ListenerInternalState* GetState() const</p> <p>Returns the internal state of this Listener.</p> Return The <code>Listener</code> internal state. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Listener/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of the <code>Listener</code>.</p> Return The up vector."},{"location":"api/engine/Listener/#getvelocity","title":"GetVelocity","text":"<p>[[nodiscard]] const AmVec3&amp; GetVelocity() const</p> <p>Gets the velocity of the <code>Listener</code>.</p> Return The listener's velocity."},{"location":"api/engine/Listener/#listener_1","title":"Listener","text":"<p>Listener()</p> <p>Construct an uninitialized <code>Listener</code>.</p> <p>An uninitialized <code>Listener</code> cannot have its location set or queried, nor render sound sources.</p> <p>To create an initialized <code>Listener</code>, use the <code>AddListener()</code> method of the <code>Engine</code> instance. <pre><code>amEngine-&gt;AddListener(1234); // You should provide an unique ID\n</code></pre></p> <p>explicit Listener(ListenerInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Listener/#setdirectivity","title":"SetDirectivity","text":"<p>void SetDirectivity(AmReal32 directivity, AmReal32 sharpness) const</p> <p>Sets the directivity and sharpness of <code>Listener</code>. This affects how sounds are perceived          * by the <code>Listener</code>.</p> Parameter <code>directivity</code> The directivity of the listener, in the range [0, 1]. Parameter <code>sharpness</code> The directivity sharpness of the listener, in the range [1, +INF]. Increasing this value increases the directivity towards the front of the listener."},{"location":"api/engine/Listener/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this <code>Listener</code>.</p> Parameter <code>location</code> The new location of this <code>Listener</code>."},{"location":"api/engine/Listener/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the location, direction and up vector of this <code>Listener</code>.</p> Parameter <code>orientation</code> The new orientation of this <code>Listener</code>."},{"location":"api/engine/Listener/#update","title":"Update","text":"<p>void Update() const</p> <p>Update the state of this <code>Listener</code>.</p> <p>This method is called automatically by the <code>Engine</code> on each frames to update the internal state of the <code>Listener</code></p> <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Listener/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Listener</code> has been initialized.</p> Return <code>true</code> if this <code>Listener</code> is initialized, <code>false</code> otherwise."},{"location":"api/engine/PlaybackOutputChannels/","title":"PlaybackOutputChannels","text":"<p>enum class PlaybackOutputChannels : AmUInt16</p> <p>The playback output channel layout of the device.</p> Default = 0 The default output channel layout of the device. <p>This instruct to use the output channel layout provided by the device.</p> Mono = 1 Encodes audio stream as a 1D mono stream. Stereo = 2 Encodes audio stream as a 2D stereo stream. Quad = 4 Encodes audio stream as a 2D quadratic stream. Surround_5_1 = 6 Encodes audio stream as a 2D stream following 5.1 surround specifications. Surround_7_1 = 8 Encodes audio stream as a 2D stream following 7.1 surround specifications."},{"location":"api/engine/PlaybackOutputFormat/","title":"PlaybackOutputFormat","text":"<p>enum class PlaybackOutputFormat : AmUInt16</p> <p>The playback output format of the device.</p> Default = 0 The default output format of the device. <p>This instruct to use the output format provided by the device.</p> UInt8 = 1 Send audio samples as unsigned 8-bit integers to the device. Int16 = 2 Send audio samples as signed 16-bit integers to the device. Int24 = 3 Send audio samples as signed 24-bit integers to the device. Int32 = 4 Send audio samples as signed 32-bit integers to the device. Float32 = 5 Send audio samples as 32-bit floating point values to the device."},{"location":"api/engine/Room/","title":"Room","text":"<p>class  Room</p> <p>Represents a physical space where sound waves can propagate.</p> <p>Any sound source within the room will be affected by the room's properties, and got applied early reflections and reverberation effects.</p> <p>This class is a lightweight wrapper around the internal <code>RoomInternalState</code> class.</p>"},{"location":"api/engine/Room/#functions","title":"Functions","text":"Name Description Room Creates an uninitialized <code>Room</code>. Room Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Room</code>. Valid Checks whether this <code>Room</code> has been initialized. GetId Returns the unique ID of this <code>Room</code>. SetLocation Sets the location <code>Room</code>. GetLocation Gets the current location of this <code>Room</code>. SetOrientation Sets the orientation of this <code>Room</code>. GetOrientation Gets the current orientation of this <code>Room</code>. GetDirection Gets the direction vector of this <code>Room</code>. GetUp Gets the up vector of this <code>Room</code>. SetDimensions Sets the shape's dimensions of this <code>Room</code>. SetShape Sets the shape representing this <code>Room</code>. GetShape Gets the shape representing this <code>Room</code>. SetWallMaterial Sets the material of a specific wall of this <code>Room</code>. SetAllWallMaterials Sets the material of all walls of this <code>Room</code>. SetWallMaterials Sets the material of each wall of this <code>Room</code>. GetWallMaterial Gets the material of a specific wall of this <code>Room</code>. SetGain Sets the room effects gain. GetGain Gets the room effects gain. GetVolume Gets the volume of the <code>Room</code> in m3. GetDimensions Gets the dimensions of the <code>Room</code> in meters. GetSurfaceArea Gets the surface area of a specific wall of this <code>Room</code>. Update Updates the state of this <code>Room</code>. GetState Gets the internal state of the <code>Room</code>."},{"location":"api/engine/Room/#function-details","title":"Function Details","text":""},{"location":"api/engine/Room/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Room</code>.</p> <p>This doesn't destroy the internal state it references, it just removes this reference to it.</p> <p>To completely destroy the <code>Room</code>, use <code>RemoveRoom()</code> method of the <code>Engine</code> instance. <pre><code>amEngine-&gt;RemoveRoom(1234); // You should provide the room ID\n</code></pre></p>"},{"location":"api/engine/Room/#getdimensions","title":"GetDimensions","text":"<p>[[nodiscard]] AmVec3 GetDimensions() const</p> <p>Gets the dimensions of the <code>Room</code> in meters.</p> Return The dimensions of the room's shape."},{"location":"api/engine/Room/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the direction vector of this <code>Room</code>.</p> Return The direction (forward) vector."},{"location":"api/engine/Room/#getgain","title":"GetGain","text":"<p>[[nodiscard]] AmReal32 GetGain() const</p> <p>Gets the room effects gain.</p> Return The room effects gain."},{"location":"api/engine/Room/#getid","title":"GetId","text":"<p>[[nodiscard]] AmRoomID GetId() const</p> <p>Returns the unique ID of this <code>Room</code>.</p> Return The <code>Room</code> unique ID."},{"location":"api/engine/Room/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this <code>Room</code>.</p> Return The current location of this <code>Room</code>."},{"location":"api/engine/Room/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the current orientation of this <code>Room</code>.</p> Return The current orientation of this <code>Room</code>."},{"location":"api/engine/Room/#getshape","title":"GetShape","text":"<p>[[nodiscard]] const BoxShape&amp; GetShape() const</p> <p>Gets the shape representing this <code>Room</code>.</p> Return The <code>Room</code> shape."},{"location":"api/engine/Room/#getstate","title":"GetState","text":"<p>[[nodiscard]] RoomInternalState* GetState() const</p> <p>Gets the internal state of the <code>Room</code>.</p> Return The <code>Room</code> internal state. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Room/#getsurfacearea","title":"GetSurfaceArea","text":"<p>[[nodiscard]] AmReal32 GetSurfaceArea(RoomWall wall) const</p> <p>Gets the surface area of a specific wall of this <code>Room</code>.</p> Parameter <code>wall</code> The wall to get the surface area for. Return The surface area of the specified wall."},{"location":"api/engine/Room/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of this <code>Room</code>.</p> Return The up vector."},{"location":"api/engine/Room/#getvolume","title":"GetVolume","text":"<p>[[nodiscard]] AmReal32 GetVolume() const</p> <p>Gets the volume of the <code>Room</code> in m3.</p> Return The volume of the room's shape."},{"location":"api/engine/Room/#getwallmaterial","title":"GetWallMaterial","text":"<p>[[nodiscard]] const RoomMaterial&amp; GetWallMaterial(RoomWall wall) const</p> <p>Gets the material of a specific wall of this <code>Room</code>.</p> Parameter <code>wall</code> The wall to get the material for. Return The material of the specified wall."},{"location":"api/engine/Room/#room_1","title":"Room","text":"<p>Room()</p> <p>Creates an uninitialized <code>Room</code>.</p> <p>An uninitialized <code>Room</code> doesn't affect sound sources.</p> <p>To create an initialized <code>Room</code>, use the <code>AddRoom()</code> method of the <code>Engine</code> instance. <pre><code>amEngine-&gt;AddRoom(1234); // You should provide an unique ID\n</code></pre></p> <p>explicit Room(RoomInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Room/#setallwallmaterials","title":"SetAllWallMaterials","text":"<p>void SetAllWallMaterials(const RoomMaterial&amp; material) const</p> <p>Sets the material of all walls of this <code>Room</code>.</p> Parameter <code>material</code> The new material."},{"location":"api/engine/Room/#setdimensions","title":"SetDimensions","text":"<p>void SetDimensions(AmVec3 dimensions) const</p> <p>Sets the shape's dimensions of this <code>Room</code>.</p> Parameter <code>dimensions</code> The new dimensions."},{"location":"api/engine/Room/#setgain","title":"SetGain","text":"<p>void SetGain(AmReal32 gain) const</p> <p>Sets the room effects gain.</p> Parameter <code>gain</code> The gain applied to early reflections and reverberations effects."},{"location":"api/engine/Room/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location <code>Room</code>.</p> Parameter <code>location</code> The new location."},{"location":"api/engine/Room/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the orientation of this <code>Room</code>.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/engine/Room/#setshape","title":"SetShape","text":"<p>void SetShape(const BoxShape&amp; shape) const</p> <p>Sets the shape representing this <code>Room</code>.</p> Parameter <code>shape</code> The new shape."},{"location":"api/engine/Room/#setwallmaterial","title":"SetWallMaterial","text":"<p>void SetWallMaterial(RoomWall wall, const RoomMaterial&amp; material) const</p> <p>Sets the material of a specific wall of this <code>Room</code>.</p> Parameter <code>wall</code> The wall to set the material for. Parameter <code>material</code> The new material."},{"location":"api/engine/Room/#setwallmaterials","title":"SetWallMaterials","text":"<p>void SetWallMaterials( const RoomMaterial&amp; leftWallMaterial, const RoomMaterial&amp; rightWallMaterial, const RoomMaterial&amp; floorMaterial, const RoomMaterial&amp; ceilingMaterial, const RoomMaterial&amp; frontWallMaterial, const RoomMaterial&amp; backWallMaterial) const</p> <p>Sets the material of each wall of this <code>Room</code>.</p> Parameter <code>leftWallMaterial</code> The material for the left wall. Parameter <code>rightWallMaterial</code> The material for the right wall. Parameter <code>floorMaterial</code> The material for the floor. Parameter <code>ceilingMaterial</code> The material for the ceiling. Parameter <code>frontWallMaterial</code> The material for the front wall. Parameter <code>backWallMaterial</code> The material for the back wall."},{"location":"api/engine/Room/#update","title":"Update","text":"<p>void Update() const</p> <p>Updates the state of this <code>Room</code>.</p> <p>This method is called automatically by the Engine on each frames to update the internal state of the <code>Room</code></p> <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/Room/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Room</code> has been initialized.</p> Return <code>true</code> if this <code>Room</code> has been initialized with a valid state."},{"location":"api/engine/RoomMaterial/","title":"RoomMaterial","text":"<p>struct  RoomMaterial</p> <p>Represents the material of a <code>Room</code> wall.</p>"},{"location":"api/engine/RoomMaterial/#variables","title":"Variables","text":"Name Description m_type The type of the material."},{"location":"api/engine/RoomMaterial/#operators","title":"Operators","text":"Name Description operator== The absorption coefficients of the material. Checks if two <code>RoomMaterial</code> objects are equal. operator!= Checks if two <code>RoomMaterial</code> objects are not equal."},{"location":"api/engine/RoomMaterial/#functions","title":"Functions","text":"Name Description RoomMaterial Constructs a new <code>RoomMaterial</code>. RoomMaterial Constructs a new predefined <code>RoomMaterial</code>."},{"location":"api/engine/RoomMaterial/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/RoomMaterial/#m_type","title":"m_type","text":"<p>RoomMaterialType m_type</p> <p>The type of the material.</p>"},{"location":"api/engine/RoomMaterial/#operator-details","title":"Operator Details","text":""},{"location":"api/engine/RoomMaterial/#operator","title":"operator!=","text":"<p>bool operator!=(const RoomMaterial&amp; other) const</p> <p>Checks if two <code>RoomMaterial</code> objects are not equal.</p> Parameter <code>other</code> The other <code>RoomMaterial</code> to compare with. Return <code>true</code> if the materials are not equal, <code>false</code> otherwise."},{"location":"api/engine/RoomMaterial/#operator_1","title":"operator==","text":"<p>bool operator==(const RoomMaterial&amp; other) const</p> <p>The absorption coefficients of the material.</p> <p>Checks if two <code>RoomMaterial</code> objects are equal.</p> Parameter <code>other</code> The other <code>RoomMaterial</code> to compare with. Return <code>true</code> if the materials are equal, <code>false</code> otherwise."},{"location":"api/engine/RoomMaterial/#function-details","title":"Function Details","text":""},{"location":"api/engine/RoomMaterial/#roommaterial_1","title":"RoomMaterial","text":"<p>RoomMaterial()</p> <p>Constructs a new <code>RoomMaterial</code>.</p> <p>Note</p> <p>This constructor initializes a <code>RoomMaterialType::Custom</code> material.</p> <p>explicit RoomMaterial(RoomMaterialType type)</p> <p>Constructs a new predefined <code>RoomMaterial</code>.</p> Parameter <code>type</code> The type of the material."},{"location":"api/engine/RoomMaterialType/","title":"RoomMaterialType","text":"<p>enum class RoomMaterialType : AmUInt8</p> <p>Defines the material type of a <code>Room</code> wall.</p> <p>Use this enum when you want use predefined absorption coefficients for a wall. Note that the predefined coefficients are only for reference, and may not be accurate for your specific use case.</p> <p>You can use the <code>RoomMaterialType::Custom</code> to define a custom material. This will need you to provide the absorption coefficients yourself.</p>"},{"location":"api/engine/RoomWall/","title":"RoomWall","text":"<p>enum class RoomWall : AmUInt8</p> <p>Enumerates the walls of a <code>Room</code>.</p> Left = 0 The left wall. Right The right wall. Floor The bottom wall. Ceiling The top wall. Front The front wall. Back The back wall. Invalid An Invalid wall. Also used to mark the maximum value of the enum."},{"location":"api/engine/RtpcValue/","title":"RtpcValue","text":"<p>struct  RtpcValue</p> <p>A RTPC compatible value is used as a wrapper to hold property values      * that can be linked to RTPCs.</p> <p>A property value that can be linked to a RTPC can be either a single static value that never updates, or a curve and an RTPC value that is updated by the game. The curve is used here as a function that takes the current RTPC value and returns the parameter value.</p>"},{"location":"api/engine/RtpcValue/#functions","title":"Functions","text":"Name Description RtpcValue Creates an uninitialized <code>RtpcValue</code> object. RtpcValue Creates a copy of the <code>RtpcValue</code> object. ~RtpcValue Destroys the RtpcValue object. Init Creates a <code>RtpcValue</code> object with a static value. Init Creates a <code>RtpcValue</code> object with a curve and an RTPC object. Init Creates a <code>RtpcValue</code> object from an asset definition. GetValue Gets the current RTPC value. For static values, this will always * return the value passed to the constructor or set from an asset definition. IsStatic Checks if the RTPC value is static."},{"location":"api/engine/RtpcValue/#function-details","title":"Function Details","text":""},{"location":"api/engine/RtpcValue/#getvalue","title":"GetValue","text":"<p>[[nodiscard]] AmReal32 GetValue() const</p> <p>Gets the current RTPC value. For static values, this will always          * return the value passed to the constructor or set from an asset definition.</p> Return The current RTPC value."},{"location":"api/engine/RtpcValue/#init","title":"Init","text":"<p>void Init(AmReal32 value)</p> <p>Creates a <code>RtpcValue</code> object with a static value.</p> Parameter <code>value</code> The static value to set. <p>void Init(const Rtpc* rtpc, Curve* curve)</p> <p>Creates a <code>RtpcValue</code> object with a curve and an RTPC object.</p> Parameter <code>rtpc</code> The RTPC to link to. Parameter <code>curve</code> The curve to use. <p>void Init(const RtpcCompatibleValue* definition)</p> <p>Creates a <code>RtpcValue</code> object from an asset definition.</p> Parameter <code>definition</code> The RTPC-compatible value asset definition."},{"location":"api/engine/RtpcValue/#isstatic","title":"IsStatic","text":"<p>[[nodiscard]] bool IsStatic() const</p> <p>Checks if the RTPC value is static.</p> Return <code>true</code> if the RTPC value is static, <code>false</code> otherwise."},{"location":"api/engine/RtpcValue/#rtpcvalue_1","title":"RtpcValue","text":"<p>RtpcValue()</p> <p>Creates an uninitialized <code>RtpcValue</code> object.</p> <p>An uninitialized <code>RtpcValue</code> object cannot be used to update values.</p> <p>RtpcValue(const RtpcValue&amp; other)</p> <p>Creates a copy of the <code>RtpcValue</code> object.</p> Parameter <code>other</code> The <code>RtpcValue</code> object to copy."},{"location":"api/engine/RtpcValue/#rtpcvalue_2","title":"~RtpcValue","text":"<p>~RtpcValue()</p> <p>Destroys the RtpcValue object.</p>"},{"location":"api/engine/SoundObject/","title":"SoundObject","text":"<p>class  SoundObject</p> <p>Base class for Amplitude sound objects.</p>"},{"location":"api/engine/SoundObject/#functions","title":"Functions","text":"Name Description ~SoundObject Default destructor. GetGain Gets the linear gain of the sound object. GetPitch Gets the actual pitch of the sound object. GetPriority Gets the actual priority of the sound object. GetEffect Gets the Effect object associated with this sound object. GetAttenuation Gets the Attenuation object associated with this sound object. GetBus Returns the bus this sound object will play on. GetSpatialization Returns the spatialization mode of the sound object. GetScope Returns the scope of the sound object."},{"location":"api/engine/SoundObject/#function-details","title":"Function Details","text":""},{"location":"api/engine/SoundObject/#getattenuation","title":"GetAttenuation","text":"<p>* GetAttenuation() const</p> <p>Gets the Attenuation object associated with this sound object.</p> Return The Attenuation object."},{"location":"api/engine/SoundObject/#getbus","title":"GetBus","text":"<p>[[nodiscard]] virtual Bus GetBus() const = 0</p> <p>Returns the bus this sound object will play on.</p> Return The bus this sound object will play on."},{"location":"api/engine/SoundObject/#geteffect","title":"GetEffect","text":"<p>* GetEffect() const</p> <p>Gets the Effect object associated with this sound object.</p> Return The Effect object."},{"location":"api/engine/SoundObject/#getgain","title":"GetGain","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetGain() const = 0</p> <p>Gets the linear gain of the sound object.</p> Return The sound object linear gain."},{"location":"api/engine/SoundObject/#getpitch","title":"GetPitch","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetPitch() const = 0</p> <p>Gets the actual pitch of the sound object.</p> Return The sound object pitch."},{"location":"api/engine/SoundObject/#getpriority","title":"GetPriority","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetPriority() const = 0</p> <p>Gets the actual priority of the sound object.</p> Return The sound object priority."},{"location":"api/engine/SoundObject/#getscope","title":"GetScope","text":"<p>[[nodiscard]] virtual eScope GetScope() const = 0</p> <p>Returns the scope of the sound object.</p> Return The scope of the sound object."},{"location":"api/engine/SoundObject/#getspatialization","title":"GetSpatialization","text":"<p>[[nodiscard]] virtual eSpatialization GetSpatialization() const = 0</p> <p>Returns the spatialization mode of the sound object.</p> Return The spatialization mode of the sound object."},{"location":"api/engine/SoundObject/#soundobject_1","title":"~SoundObject","text":"<p>virtual ~SoundObject() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/SwitchContainerItem/","title":"SwitchContainerItem","text":"<p>struct SwitchContainerItem</p> <p>Describes a single item within a <code>SwitchContainer</code>.</p> See SwitchContainer"},{"location":"api/engine/SwitchContainerItem/#variables","title":"Variables","text":"Name Description m_id The object ID of the item. m_continueBetweenStates Whether to continue playing this item when the <code>SwitchContainer</code> * changes its state between one of the values where this item is registered. m_fadeInDuration The fade duration in milliseconds when this item starts playing. m_fadeInAlgorithm The name of the fading algorithm to use when this item starts playing. m_fadeOutDuration The fade duration in milliseconds when this item stops playing. m_fadeOutAlgorithm The name of the fading algorithm to use when this item stops playing. m_gain The custom linear gain applied on this item. m_pitch The custom pitch applied on this item."},{"location":"api/engine/SwitchContainerItem/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/SwitchContainerItem/#m_continuebetweenstates","title":"m_continueBetweenStates","text":"<p>bool m_continueBetweenStates</p> <p>Whether to continue playing this item when the <code>SwitchContainer</code>          * changes its state between one of the values where this item is registered.</p> <p>If this value is set to <code>false</code>, each sound will be stopped and played again from the beginning.</p>"},{"location":"api/engine/SwitchContainerItem/#m_fadeinalgorithm","title":"m_fadeInAlgorithm","text":"<p>AmString m_fadeInAlgorithm</p> <p>The name of the fading algorithm to use when this item starts playing.</p>"},{"location":"api/engine/SwitchContainerItem/#m_fadeinduration","title":"m_fadeInDuration","text":"<p>AmTime m_fadeInDuration</p> <p>The fade duration in milliseconds when this item starts playing.</p>"},{"location":"api/engine/SwitchContainerItem/#m_fadeoutalgorithm","title":"m_fadeOutAlgorithm","text":"<p>AmString m_fadeOutAlgorithm</p> <p>The name of the fading algorithm to use when this item stops playing.</p>"},{"location":"api/engine/SwitchContainerItem/#m_fadeoutduration","title":"m_fadeOutDuration","text":"<p>AmTime m_fadeOutDuration</p> <p>The fade duration in milliseconds when this item stops playing.</p>"},{"location":"api/engine/SwitchContainerItem/#m_gain","title":"m_gain","text":"<p>RtpcValue m_gain</p> <p>The custom linear gain applied on this item.</p> <p>The final gain will be computed with this value multiplied with the gain of the attenuation model, if any.</p>"},{"location":"api/engine/SwitchContainerItem/#m_id","title":"m_id","text":"<p>AmObjectID m_id</p> <p>The object ID of the item.</p> <p>May be a <code>AmSoundID</code> or a <code>AmCollectionID</code>.</p>"},{"location":"api/engine/SwitchContainerItem/#m_pitch","title":"m_pitch","text":"<p>RtpcValue m_pitch</p> <p>The custom pitch applied on this item.</p> <p>The final pitch will be computed with this value multiplied with the pitch of the doppler effect, if this switch container's spatialization mode is set to position.</p>"},{"location":"api/engine/SwitchState/","title":"SwitchState","text":"<p>struct  SwitchState</p> <p>A switch state.</p> <p>A switch state is a single state that can be applied to a <code>SwitchContainer</code> to control which sounds are played. Only one state can be active at a time in the same <code>Switch</code> asset.</p> See Switch, SwitchContainer"},{"location":"api/engine/SwitchState/#variables","title":"Variables","text":"Name Description m_id The ID of this switch state. m_name The name of this switch state."},{"location":"api/engine/SwitchState/#operators","title":"Operators","text":"Name Description operator== Compares this switch state with another one for equality. operator!= Compares this switch state with another one for inequality."},{"location":"api/engine/SwitchState/#functions","title":"Functions","text":"Name Description Valid Checks whether this switch state is valid."},{"location":"api/engine/SwitchState/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/SwitchState/#m_id","title":"m_id","text":"<p>AmObjectID m_id</p> <p>The ID of this switch state.</p> <p>This ID is unique only in the parent switch.</p>"},{"location":"api/engine/SwitchState/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this switch state.</p>"},{"location":"api/engine/SwitchState/#operator-details","title":"Operator Details","text":""},{"location":"api/engine/SwitchState/#operator","title":"operator!=","text":"<p>bool operator!=(const SwitchState&amp; other) const</p> <p>Compares this switch state with another one for inequality.</p> Parameter <code>other</code> The other switch state to compare with. Return <code>true</code> if the switch states are not equal, <code>false</code> otherwise."},{"location":"api/engine/SwitchState/#operator_1","title":"operator==","text":"<p>bool operator==(const SwitchState&amp; other) const</p> <p>Compares this switch state with another one for equality.</p> Parameter <code>[im]</code> other The other switch state to compare with. Return <code>true</code> if the switch states are equal, <code>false</code> otherwise."},{"location":"api/engine/SwitchState/#function-details","title":"Function Details","text":""},{"location":"api/engine/SwitchState/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this switch state is valid.</p> Return <code>true</code> if the switch state is valid, <code>false</code> otherwise."},{"location":"api/engine/eChannelPlaybackState/","title":"eChannelPlaybackState","text":"<p>enum eChannelPlaybackState : AmUInt8</p> <p>Enumerates the playback states for a <code>Channel</code>.</p> eChannelPlaybackState_Stopped = 0 The channel is stopped and not rendering audio. eChannelPlaybackState_Playing = 1 The channel is playing audio. eChannelPlaybackState_FadingIn = 2 The channel has just been played or resumed and is fading in to the <code>Playing</code> state. eChannelPlaybackState_FadingOut = 3 The channel has just been stopped or paused and is fading out to the <code>Stopped</code> or <code>Paused</code> state. eChannelPlaybackState_SwitchingState = 4 The channel is updating the value of his linked switch state. eChannelPlaybackState_Paused = 5 The channel is playing audio but in a paused state."},{"location":"api/engine/eFaderState/","title":"eFaderState","text":"<p>enum eFaderState : AmInt8</p> <p>Enumerates the list of states in a fader.</p> eFaderState_Stopped = -1 The fader is stopped eFaderState_Disabled = 0 The fader is disabled eFaderState_Active = 1 The fader is active and fading"},{"location":"api/io/","title":"IO","text":"<p>Input/Output API</p>"},{"location":"api/io/#types","title":"Types","text":"Name Description DiskFile A <code>File</code> implementation that reads and writes a file on disk. DiskFileSystem A <code>FileSystem</code> implementation that reads and write files from disk. File Base class for a file in a <code>FileSystem</code>. FileSystem Base class for files and resources loaders. MemoryFile A <code>File</code> implementation that reads from and writes to a memory buffer. PackageFileHeaderDescription Provides metadata about the package file. PackageFileItemDescription Describes an item in the package file. PackageFileSystem A <code>FileSystem</code> implementation that provides access to an Amplitude package file. PackageItemFile A <code>File</code> implementation that provides access to an item in an Amplitude package file. Resource An Amplitude resource in a <code>FileSystem</code>. eFileOpenKind The type of file being opened. eFileOpenMode Describes the mode in which to open a file. eFileSeekOrigin Defines from where to seek in the file. ePackageFileCompressionAlgorithm Defines the algorithms a package file can be compressed with."},{"location":"api/io/DiskFile/","title":"DiskFile","text":"<p>class  DiskFile : public File</p> <p>A <code>File</code> implementation that reads and writes a file on disk.</p>"},{"location":"api/io/DiskFile/#functions","title":"Functions","text":"Name Description DiskFile Creates a new <code>DiskFile</code> instance. DiskFile Creates a new <code>DiskFile</code> instance from a file handle. DiskFile Creates a new DiskFile instance by opening a file at the given path. ~DiskFile Destroys the instance and release the file handler. GetPath @inherit Eof @inherit Read @inherit Write @inherit Length @inherit Seek @inherit Position @inherit GetPtr @inherit IsValid @inherit Open Opens a file at the given path. Close Closes the file."},{"location":"api/io/DiskFile/#function-details","title":"Function Details","text":""},{"location":"api/io/DiskFile/#close","title":"Close","text":"<p>void Close()</p> <p>Closes the file.</p>"},{"location":"api/io/DiskFile/#diskfile_1","title":"DiskFile","text":"<p>DiskFile()</p> <p>Creates a new <code>DiskFile</code> instance.</p> <p>explicit DiskFile(AmFileHandle fp)</p> <p>Creates a new <code>DiskFile</code> instance from a file handle.</p> Parameter <code>fp</code> The file handle to manage in this instance. <p>explicit DiskFile( const std::filesystem::path&amp; fileName, eFileOpenMode mode = eFileOpenMode_Read, eFileOpenKind kind = eFileOpenKind_Binary)</p> <p>Creates a new DiskFile instance by opening a file at the given path.</p> Parameter <code>fileName</code> The path to the file to open. Parameter <code>mode</code> The open mode to use. Parameter <code>kind</code> The type of file to open."},{"location":"api/io/DiskFile/#eof","title":"Eof","text":"<p>bool Eof() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#getpath","title":"GetPath","text":"<p>[[nodiscard]] AmOsString GetPath() const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#getptr","title":"GetPtr","text":"<p>AmVoidPtr GetPtr() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#length","title":"Length","text":"<p>AmSize Length() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#open","title":"Open","text":"<p>AmResult Open( const std::filesystem::path&amp; filePath, eFileOpenMode mode = eFileOpenMode_Read, eFileOpenKind kind = eFileOpenKind_Binary)</p> <p>Opens a file at the given path.</p> Parameter <code>filePath</code> The path to the file to open. Parameter <code>mode</code> The open mode to use. Parameter <code>kind</code> The type of file to open. Return The result of the operation."},{"location":"api/io/DiskFile/#position","title":"Position","text":"<p>AmSize Position() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#read","title":"Read","text":"<p>AmSize Read(AmUInt8Buffer dst, AmSize bytes) override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#seek","title":"Seek","text":"<p>void Seek(AmInt64 offset, eFileSeekOrigin origin) override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#write","title":"Write","text":"<p>AmSize Write(AmConstUInt8Buffer src, AmSize bytes) override</p> <p>@inherit</p>"},{"location":"api/io/DiskFile/#diskfile_2","title":"~DiskFile","text":"<p>~DiskFile() override</p> <p>Destroys the instance and release the file handler.</p>"},{"location":"api/io/DiskFileSystem/","title":"DiskFileSystem","text":"<p>class  DiskFileSystem final : public FileSystem</p> <p>A <code>FileSystem</code> implementation that reads and write files from disk.</p>"},{"location":"api/io/DiskFileSystem/#functions","title":"Functions","text":"Name Description DiskFileSystem Creates a new instance of the DiskFileSystem class. SetBasePath @inherit GetBasePath @inherit ResolvePath @inherit Exists @inherit IsDirectory @inherit Join @inherit OpenFile @inherit StartOpenFileSystem @inherit TryFinalizeOpenFileSystem @inherit StartCloseFileSystem @inherit TryFinalizeCloseFileSystem @inherit"},{"location":"api/io/DiskFileSystem/#function-details","title":"Function Details","text":""},{"location":"api/io/DiskFileSystem/#diskfilesystem_1","title":"DiskFileSystem","text":"<p>DiskFileSystem()</p> <p>Creates a new instance of the DiskFileSystem class.</p>"},{"location":"api/io/DiskFileSystem/#exists","title":"Exists","text":"<p>[[nodiscard]] bool Exists(const AmOsString&amp; path) const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#getbasepath","title":"GetBasePath","text":"<p>[[nodiscard]] const AmOsString&amp; GetBasePath() const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#isdirectory","title":"IsDirectory","text":"<p>[[nodiscard]] bool IsDirectory(const AmOsString&amp; path) const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#join","title":"Join","text":"<p>[[nodiscard]] AmOsString Join(const std::vector&lt;AmOsString&gt;&amp; parts) const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#openfile","title":"OpenFile","text":"<p>[[nodiscard]] std::shared_ptr&lt;File&gt; OpenFile(const AmOsString&amp; path, eFileOpenMode mode) const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#resolvepath","title":"ResolvePath","text":"<p>[[nodiscard]] AmOsString ResolvePath(const AmOsString&amp; path) const override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#setbasepath","title":"SetBasePath","text":"<p>void SetBasePath(const AmOsString&amp; basePath) override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>void StartCloseFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>void StartOpenFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>bool TryFinalizeCloseFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/DiskFileSystem/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>bool TryFinalizeOpenFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/File/","title":"File","text":"<p>class  File</p> <p>Base class for a file in a <code>FileSystem</code>.</p>"},{"location":"api/io/File/#functions","title":"Functions","text":"Name Description ~File Default destructor. GetPath Gets the path to the file in the loaded <code>FileSystem</code>. Read8 Reads a single byte from the file in an <code>AmUInt8</code>. Read16 Reads two bytes from the file in an <code>AmUInt16</code>. Read32 Reads four bytes from the file in an <code>AmUInt32</code>. Read64 Reads eight bytes from the file in an <code>AmUInt64</code>. ReadString Reads a string from the file. Write8 Writes a single byte to the file from an <code>AmUInt8</code>. Write16 Writes two bytes to the file from an <code>AmUInt16</code>. Write32 Writes four bytes to the file from an <code>AmUInt32</code>. Write64 Writes eight bytes to the file from an <code>AmUInt64</code>. WriteString Writes a string to the file. Eof Checks if the read cursor is at the end of the file. Read Reads data from the file. Write Writes data to the file. Length Gets the size of the file in bytes. Seek Seeks the read/write to the specified offset. Seek Seeks the read/write to the specified offset, starting at the given origin. Position Gets the current position of the read/write cursor. GetPtr Gets the pointer to the internal file handle. IsValid Checks if the file is valid."},{"location":"api/io/File/#function-details","title":"Function Details","text":""},{"location":"api/io/File/#eof","title":"Eof","text":"<p>virtual bool Eof() = 0</p> <p>Checks if the read cursor is at the end of the file.</p> Return <code>true</code> if the read cursor is at the end of the file, <code>false</code> otherwise."},{"location":"api/io/File/#getpath","title":"GetPath","text":"<p>[[nodiscard]] virtual AmOsString GetPath() const = 0</p> <p>Gets the path to the file in the loaded <code>FileSystem</code>.</p> Return The path to the file."},{"location":"api/io/File/#getptr","title":"GetPtr","text":"<p>virtual AmVoidPtr GetPtr()</p> <p>Gets the pointer to the internal file handle.</p> Return The internal file handle. This depends on the implementation."},{"location":"api/io/File/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] virtual bool IsValid() const = 0</p> <p>Checks if the file is valid.</p> <p>Validity of a file is determined by the underlying implementation. But this should primarily mean that the file exists AND has been opened.</p> Return <code>true</code> if the file is valid, <code>false</code> otherwise."},{"location":"api/io/File/#length","title":"Length","text":"<p>virtual AmSize Length() = 0</p> <p>Gets the size of the file in bytes.</p> Return The size of the file in bytes."},{"location":"api/io/File/#position","title":"Position","text":"<p>virtual AmSize Position() = 0</p> <p>Gets the current position of the read/write cursor.</p> Return The actual position of the read/write cursor."},{"location":"api/io/File/#read","title":"Read","text":"<p>virtual AmSize Read(AmUInt8Buffer dst, AmSize bytes) = 0</p> <p>Reads data from the file.</p> Parameter <code>dst</code> The destination buffer of the read data. Parameter <code>bytes</code> The number of bytes to read from the file. The destination buffer must be at least as large as the number of bytes to read. Return The number of bytes read from the file."},{"location":"api/io/File/#read16","title":"Read16","text":"<p>AmUInt16 Read16()</p> <p>Reads two bytes from the file in an <code>AmUInt16</code>.</p> Return The read value."},{"location":"api/io/File/#read32","title":"Read32","text":"<p>AmUInt32 Read32()</p> <p>Reads four bytes from the file in an <code>AmUInt32</code>.</p> Return The read value."},{"location":"api/io/File/#read64","title":"Read64","text":"<p>AmUInt64 Read64()</p> <p>Reads eight bytes from the file in an <code>AmUInt64</code>.</p> Return The read value."},{"location":"api/io/File/#read8","title":"Read8","text":"<p>AmUInt8 Read8()</p> <p>Reads a single byte from the file in an <code>AmUInt8</code>.</p> Return The read value."},{"location":"api/io/File/#readstring","title":"ReadString","text":"<p>AmString ReadString()</p> <p>Reads a string from the file.</p> Return The read value."},{"location":"api/io/File/#seek","title":"Seek","text":"<p>void Seek(AmSize offset)</p> <p>Seeks the read/write to the specified offset.</p> Parameter <code>offset</code> The offset in bytes from the beginning of the file. <p>virtual void Seek(AmInt64 offset, eFileSeekOrigin origin) = 0</p> <p>Seeks the read/write to the specified offset, starting at the given origin.</p> Parameter <code>offset</code> The offset in bytes from the beginning of the file. Parameter <code>origin</code> The origin from which to begin seeking."},{"location":"api/io/File/#write","title":"Write","text":"<p>virtual AmSize Write(AmConstUInt8Buffer src, AmSize bytes) = 0</p> <p>Writes data to the file.</p> Parameter <code>src</code> The source buffer of the data to write. Parameter <code>bytes</code> The number of bytes to write to the file. The source buffer must be at least as large as the number of bytes to write. Return The number of bytes written to the file."},{"location":"api/io/File/#write16","title":"Write16","text":"<p>AmSize Write16(AmUInt16 value)</p> <p>Writes two bytes to the file from an <code>AmUInt16</code>.</p> Parameter <code>value</code> The value to write."},{"location":"api/io/File/#write32","title":"Write32","text":"<p>AmSize Write32(AmUInt32 value)</p> <p>Writes four bytes to the file from an <code>AmUInt32</code>.</p> Parameter <code>value</code> The value to write."},{"location":"api/io/File/#write64","title":"Write64","text":"<p>AmSize Write64(AmUInt64 value)</p> <p>Writes eight bytes to the file from an <code>AmUInt64</code>.</p> Parameter <code>value</code> The value to write."},{"location":"api/io/File/#write8","title":"Write8","text":"<p>AmSize Write8(AmUInt8 value)</p> <p>Writes a single byte to the file from an <code>AmUInt8</code>.</p> Parameter <code>value</code> The value to write."},{"location":"api/io/File/#writestring","title":"WriteString","text":"<p>AmSize WriteString(const AmString&amp; value)</p> <p>Writes a string to the file.</p> Parameter <code>value</code> The value to write."},{"location":"api/io/File/#file_1","title":"~File","text":"<p>virtual ~File() = default</p> <p>Default destructor.</p>"},{"location":"api/io/FileSystem/","title":"FileSystem","text":"<p>class  FileSystem</p> <p>Base class for files and resources loaders.</p> <p>The <code>FileSystem</code> class is used by the engine as an interface to load files and other resources. It provides basic functionalities needed by a file system.</p> <p>You are able to implement your own <code>FileSystem</code> subclass to fit your needs, for example, reading files from a network drive or a custom storage system.</p>"},{"location":"api/io/FileSystem/#functions","title":"Functions","text":"Name Description ~FileSystem Default destructor. SetBasePath Changes the file system base path. GetBasePath Returns the base path of the file system. ResolvePath Resolves a relative path from the file system base path. Exists Checks if an item (file or folder) exists on the file system. IsDirectory Checks if an item (file or folder) is a directory. Join Merge the given parts of the path into a single path, by joining them with the file system's path separator. OpenFile Opens the file at the given path. StartOpenFileSystem Opens the <code>FileSystem</code>. TryFinalizeOpenFileSystem Checks if the <code>FileSystem</code> is loaded. StartCloseFileSystem Stops the <code>FileSystem</code>. TryFinalizeCloseFileSystem Checks if the <code>FileSystem</code> is stopped."},{"location":"api/io/FileSystem/#function-details","title":"Function Details","text":""},{"location":"api/io/FileSystem/#exists","title":"Exists","text":"<p>[[nodiscard]] virtual bool Exists(const AmOsString&amp; path) const = 0</p> <p>Checks if an item (file or folder) exists on the file system.</p> Parameter <code>path</code> The path to the item. Return <code>true</code> if the file exists, <code>false</code> otherwise."},{"location":"api/io/FileSystem/#getbasepath","title":"GetBasePath","text":"<p>[[nodiscard]] virtual const AmOsString&amp; GetBasePath() const = 0</p> <p>Returns the base path of the file system.</p> Return The base path for resolving relative paths from which the engine will load resources."},{"location":"api/io/FileSystem/#isdirectory","title":"IsDirectory","text":"<p>[[nodiscard]] virtual bool IsDirectory(const AmOsString&amp; path) const = 0</p> <p>Checks if an item (file or folder) is a directory.</p> Parameter <code>path</code> The path to the item. Return <code>true</code> if the file is a directory, <code>false</code> otherwise."},{"location":"api/io/FileSystem/#join","title":"Join","text":"<p>[[nodiscard]] virtual AmOsString Join(const std::vector&lt;AmOsString&gt;&amp; parts) const = 0</p> <p>Merge the given parts of the path into a single path, by joining them with the file system's path separator.</p> Parameter <code>parts</code> The parts of the path. Return A path concatenated with the given parts and the file system path separator."},{"location":"api/io/FileSystem/#openfile","title":"OpenFile","text":"<p>[[nodiscard]] virtual std::shared_ptr&lt;File&gt; OpenFile(const AmOsString&amp; path, eFileOpenMode mode = eFileOpenMode_Read) const = 0</p> <p>Opens the file at the given path.</p> Parameter <code>path</code> The path to the file to open. Parameter <code>mode</code> The file open mode. Return The opened file. The returned <code>File</code> implementation depends on the <code>FileSystem</code> implementation."},{"location":"api/io/FileSystem/#resolvepath","title":"ResolvePath","text":"<p>[[nodiscard]] virtual AmOsString ResolvePath(const AmOsString&amp; path) const = 0</p> <p>Resolves a relative path from the file system base path.</p> Return The resolved path."},{"location":"api/io/FileSystem/#setbasepath","title":"SetBasePath","text":"<p>virtual void SetBasePath(const AmOsString&amp; basePath) = 0</p> <p>Changes the file system base path.</p> <p>That path is interpreted by the implementation and doesn't necessarily have to be a real path on disk. It's just used as the base path for resolving relative paths from which the engine will load resources.</p> Parameter <code>basePath</code> The file system base path."},{"location":"api/io/FileSystem/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>virtual void StartCloseFileSystem() = 0</p> <p>Stops the <code>FileSystem</code>.</p> <p>This function MUST be called when the <code>FileSystem</code> is no longer needed. It is used to stop the file system (eg: unmounting an archive).</p> <p>Tip</p> <p>For implementations, it is recommended to process the stopping in a separate thread.</p> <p>The implementation is free to ignore this if not needed.</p>"},{"location":"api/io/FileSystem/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>virtual void StartOpenFileSystem() = 0</p> <p>Opens the <code>FileSystem</code>.</p> <p>This function MUST be called before any other actions in the file system. It is used to initialize the file system (eg: mounting an archive).</p> <p>Tip</p> <p>For implementations, It is recommended to process the initialization in a separate thread.</p> <p>The implementation is free to ignore this if not needed.</p>"},{"location":"api/io/FileSystem/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>virtual bool TryFinalizeCloseFileSystem() = 0</p> <p>Checks if the <code>FileSystem</code> is stopped.</p> <p>Since the <code>StartCloseFileSystem()</code> function is designed to be asynchronous, this function is used to check if the <code>FileSystem</code> has been successfully stopped.</p> Return <code>true</code> if the <code>FileSystem</code> has been fully stopped, <code>false</code> otherwise."},{"location":"api/io/FileSystem/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>virtual bool TryFinalizeOpenFileSystem() = 0</p> <p>Checks if the <code>FileSystem</code> is loaded.</p> <p>Since the <code>StartOpenFileSystem()</code> function is designed to be asynchronous, this function is used to check if the <code>FileSystem</code> has been successfully initialized.</p> Return <code>true</code> if the <code>FileSystem</code> has been fully loaded, <code>false</code> otherwise."},{"location":"api/io/FileSystem/#filesystem_1","title":"~FileSystem","text":"<p>virtual ~FileSystem() = default</p> <p>Default destructor.</p>"},{"location":"api/io/MemoryFile/","title":"MemoryFile","text":"<p>class  MemoryFile : public File</p> <p>A <code>File</code> implementation that reads from and writes to a memory buffer.</p>"},{"location":"api/io/MemoryFile/#functions","title":"Functions","text":"Name Description MemoryFile Creates a new <code>MemoryFile</code> instance. MemoryFile Creates a new <code>MemoryFile</code> instance from a memory buffer. ~MemoryFile Destroys the instance and release the memory buffer if owned. GetPath @inherit Eof @inherit Read @inherit Write @inherit Length @inherit Seek @inherit Position @inherit GetPtr @inherit IsValid @inherit Open Opens a new memory buffer with the specified size. OpenMem Opens a memory buffer. OpenToMem Opens a memory buffer from a file content. OpenFileToMem Copies data from a file instance to a memory buffer. The file content is entirely copied. Close Closes the memory buffer and releases associated resources."},{"location":"api/io/MemoryFile/#function-details","title":"Function Details","text":""},{"location":"api/io/MemoryFile/#close","title":"Close","text":"<p>void Close()</p> <p>Closes the memory buffer and releases associated resources.</p>"},{"location":"api/io/MemoryFile/#eof","title":"Eof","text":"<p>bool Eof() override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#getpath","title":"GetPath","text":"<p>[[nodiscard]] AmOsString GetPath() const override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#getptr","title":"GetPtr","text":"<p>AmVoidPtr GetPtr() override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#length","title":"Length","text":"<p>AmSize Length() override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#memoryfile_1","title":"MemoryFile","text":"<p>MemoryFile()</p> <p>Creates a new <code>MemoryFile</code> instance.</p> <p>MemoryFile(AmUInt8Buffer buffer, AmSize size, bool copy = false, bool takeOwnership = true)</p> <p>Creates a new <code>MemoryFile</code> instance from a memory buffer.</p> Parameter <code>buffer</code> The memory buffer to manage in this instance. Parameter <code>size</code> The size of the memory buffer. Parameter <code>copy</code> If true, the memory buffer will be copied. Parameter <code>takeOwnership</code> If true, the memory buffer will be owned by this instance, and released when this instance is destroyed."},{"location":"api/io/MemoryFile/#open","title":"Open","text":"<p>AmResult Open(AmSize size)</p> <p>Opens a new memory buffer with the specified size.</p> Parameter <code>size</code> The size of the buffer. Return The result of the operation."},{"location":"api/io/MemoryFile/#openfiletomem","title":"OpenFileToMem","text":"<p>AmResult OpenFileToMem(File* file)</p> <p>Copies data from a file instance to a memory buffer. The file content is entirely copied.</p> Parameter <code>file</code> The file instance to copy data from. Return The result of the operation."},{"location":"api/io/MemoryFile/#openmem","title":"OpenMem","text":"<p>AmResult OpenMem(AmConstUInt8Buffer buffer, AmSize size, bool copy = false, bool takeOwnership = true)</p> <p>Opens a memory buffer.</p> Parameter <code>buffer</code> The memory buffer to open. Parameter <code>size</code> The size of the memory buffer. Parameter <code>copy</code> If true, the memory buffer will be copied. Parameter <code>takeOwnership</code> If true, the memory buffer will be owned by this instance, and released when this instance is destroyed. Return The result of the operation."},{"location":"api/io/MemoryFile/#opentomem","title":"OpenToMem","text":"<p>AmResult OpenToMem(const std::filesystem::path&amp; fileName)</p> <p>Opens a memory buffer from a file content.</p> Parameter <code>fileName</code> The path to the file to open. Return The result of the operation."},{"location":"api/io/MemoryFile/#position","title":"Position","text":"<p>AmSize Position() override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#read","title":"Read","text":"<p>AmSize Read(AmUInt8Buffer dst, AmSize bytes) override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#seek","title":"Seek","text":"<p>void Seek(AmInt64 offset, eFileSeekOrigin origin) override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#write","title":"Write","text":"<p>AmSize Write(AmConstUInt8Buffer src, AmSize bytes) override</p> <p>@inherit</p>"},{"location":"api/io/MemoryFile/#memoryfile_2","title":"~MemoryFile","text":"<p>~MemoryFile() override</p> <p>Destroys the instance and release the memory buffer if owned.</p>"},{"location":"api/io/PackageFileHeaderDescription/","title":"PackageFileHeaderDescription","text":"<p>struct PackageFileHeaderDescription</p> <p>Provides metadata about the package file.</p>"},{"location":"api/io/PackageFileHeaderDescription/#variables","title":"Variables","text":"Name Description m_Version Package file header tag.Package file version. m_CompressionAlgorithm The compression algorithm used for this package file. m_Items The description of each item in the package file."},{"location":"api/io/PackageFileHeaderDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/io/PackageFileHeaderDescription/#m_compressionalgorithm","title":"m_CompressionAlgorithm","text":"<p>ePackageFileCompressionAlgorithm m_CompressionAlgorithm</p> <p>The compression algorithm used for this package file.</p>"},{"location":"api/io/PackageFileHeaderDescription/#m_items","title":"m_Items","text":"<p>std::vector&lt;PackageFileItemDescription&gt; m_Items</p> <p>The description of each item in the package file.</p> <p>The total number of descriptions should match the number of items.</p>"},{"location":"api/io/PackageFileHeaderDescription/#m_version","title":"m_Version","text":"<p>AmUInt16 m_Version</p> <p>Package file header tag.</p> <p>Note</p> <p>Should be equal to 'AMPK'.</p> <p>Package file version.</p> <p>This is used to implement new features in package     files and still be backward compatible with old versions.</p>"},{"location":"api/io/PackageFileItemDescription/","title":"PackageFileItemDescription","text":"<p>struct PackageFileItemDescription</p> <p>Describes an item in the package file.</p> <p>The item description is stored in the package file's header.</p>"},{"location":"api/io/PackageFileItemDescription/#variables","title":"Variables","text":"Name Description m_Name The name of the package item. m_Offset The offset of the package item in the package file. m_Size The size of the package item in bytes."},{"location":"api/io/PackageFileItemDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/io/PackageFileItemDescription/#m_name","title":"m_Name","text":"<p>AmString m_Name</p> <p>The name of the package item.</p> <p>Note</p> <p>It usually refers to the resource path.</p>"},{"location":"api/io/PackageFileItemDescription/#m_offset","title":"m_Offset","text":"<p>AmSize m_Offset</p> <p>The offset of the package item in the package file.</p>"},{"location":"api/io/PackageFileItemDescription/#m_size","title":"m_Size","text":"<p>AmSize m_Size</p> <p>The size of the package item in bytes.</p>"},{"location":"api/io/PackageFileSystem/","title":"PackageFileSystem","text":"<p>class  PackageFileSystem final : public FileSystem</p> <p>A <code>FileSystem</code> implementation that provides access to an Amplitude package file.</p>"},{"location":"api/io/PackageFileSystem/#functions","title":"Functions","text":"Name Description PackageFileSystem Constructs a new <code>PackageFileSystem</code> instance. ~PackageFileSystem Destroys the <code>PackageFileSystem</code> instance. SetBasePath @inherit GetBasePath @inherit ResolvePath @inherit Exists @inherit IsDirectory @inherit Join @inherit OpenFile @inherit StartOpenFileSystem @inherit TryFinalizeOpenFileSystem @inherit StartCloseFileSystem @inherit TryFinalizeCloseFileSystem @inherit IsValid Returns if the package file is valid and loaded."},{"location":"api/io/PackageFileSystem/#function-details","title":"Function Details","text":""},{"location":"api/io/PackageFileSystem/#exists","title":"Exists","text":"<p>[[nodiscard]] bool Exists(const AmOsString&amp; path) const override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#getbasepath","title":"GetBasePath","text":"<p>[[nodiscard]] const AmOsString&amp; GetBasePath() const override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#isdirectory","title":"IsDirectory","text":"<p>[[nodiscard]] bool IsDirectory(const AmOsString&amp; path) const override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const</p> <p>Returns if the package file is valid and loaded.</p> Return <code>true</code> if the package file is valid and loaded, <code>false</code> otherwise."},{"location":"api/io/PackageFileSystem/#join","title":"Join","text":"<p>[[nodiscard]] AmOsString Join(const std::vector&lt;AmOsString&gt;&amp; parts) const override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#openfile","title":"OpenFile","text":"<p>[[nodiscard]] std::shared_ptr&lt;File&gt; OpenFile(const AmOsString&amp; path, eFileOpenMode mode = eFileOpenMode_Read) const override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#packagefilesystem_1","title":"PackageFileSystem","text":"<p>PackageFileSystem()</p> <p>Constructs a new <code>PackageFileSystem</code> instance.</p>"},{"location":"api/io/PackageFileSystem/#resolvepath","title":"ResolvePath","text":"<p>[[nodiscard]] AmOsString ResolvePath(const AmOsString&amp; path) const override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#setbasepath","title":"SetBasePath","text":"<p>void SetBasePath(const AmOsString&amp; basePath) override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>void StartCloseFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>void StartOpenFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>bool TryFinalizeCloseFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>bool TryFinalizeOpenFileSystem() override</p> <p>@inherit</p>"},{"location":"api/io/PackageFileSystem/#packagefilesystem_2","title":"~PackageFileSystem","text":"<p>~PackageFileSystem() override</p> <p>Destroys the <code>PackageFileSystem</code> instance.</p>"},{"location":"api/io/PackageItemFile/","title":"PackageItemFile","text":"<p>class  PackageItemFile : public DiskFile</p> <p>A <code>File</code> implementation that provides access to an item in an Amplitude package file.</p>"},{"location":"api/io/PackageItemFile/#functions","title":"Functions","text":"Name Description PackageItemFile Constructs a new <code>PackageItemFile</code> instance. GetPath @inherit Eof @inherit Read @inherit Write @inherit ! Length @inherit Seek @inherit Position @inherit"},{"location":"api/io/PackageItemFile/#function-details","title":"Function Details","text":""},{"location":"api/io/PackageItemFile/#eof","title":"Eof","text":"<p>bool Eof() override</p> <p>@inherit</p>"},{"location":"api/io/PackageItemFile/#getpath","title":"GetPath","text":"<p>[[nodiscard]] AmOsString GetPath() const override</p> <p>@inherit</p>"},{"location":"api/io/PackageItemFile/#length","title":"Length","text":"<p>AmSize Length() override</p> <p>@inherit</p>"},{"location":"api/io/PackageItemFile/#packageitemfile_1","title":"PackageItemFile","text":"<p>PackageItemFile(const PackageFileItemDescription* item, const std::filesystem::path&amp; packageFile, AmSize headerSize)</p> <p>Constructs a new <code>PackageItemFile</code> instance.</p> Parameter <code>item</code> The description of the package item. Parameter <code>packageFile</code> The path to the package file. Parameter <code>headerSize</code> The size of the package file header."},{"location":"api/io/PackageItemFile/#position","title":"Position","text":"<p>AmSize Position() override</p> <p>@inherit</p>"},{"location":"api/io/PackageItemFile/#read","title":"Read","text":"<p>AmSize Read(AmUInt8Buffer dst, AmSize bytes) override</p> <p>@inherit</p>"},{"location":"api/io/PackageItemFile/#seek","title":"Seek","text":"<p>void Seek(AmInt64 offset, eFileSeekOrigin origin) override</p> <p>@inherit</p>"},{"location":"api/io/PackageItemFile/#write","title":"Write","text":"<p>AmSize Write(AmConstUInt8Buffer src, AmSize bytes) override</p> <p>@inherit</p> <p>Note</p> <p>Writing is disabled for packages item files.</p>"},{"location":"api/io/Resource/","title":"Resource","text":"<p>class  Resource</p> <p>An Amplitude resource in a <code>FileSystem</code>.</p> <p>This base class represents a resource (sound files, assets, etc.) in a <code>FileSystem</code>.</p>"},{"location":"api/io/Resource/#functions","title":"Functions","text":"Name Description ~Resource Default destructor. GetPath Gets the path to the resource. Load Loads the resource from the given FileSystem."},{"location":"api/io/Resource/#function-details","title":"Function Details","text":""},{"location":"api/io/Resource/#getpath","title":"GetPath","text":"<p>[[nodiscard]] virtual const AmOsString&amp; GetPath() const = 0</p> <p>Gets the path to the resource.</p>"},{"location":"api/io/Resource/#load","title":"Load","text":"<p>virtual void Load(std::shared_ptr&lt;const FileSystem&gt; loader) = 0</p> <p>Loads the resource from the given FileSystem.</p>"},{"location":"api/io/Resource/#resource_1","title":"~Resource","text":"<p>virtual ~Resource() = default</p> <p>Default destructor.</p>"},{"location":"api/io/eFileOpenKind/","title":"eFileOpenKind","text":"<p>enum eFileOpenKind : AmUInt8</p> <p>The type of file being opened.</p>"},{"location":"api/io/eFileOpenMode/","title":"eFileOpenMode","text":"<p>enum eFileOpenMode : AmUInt8</p> <p>Describes the mode in which to open a file.</p>"},{"location":"api/io/eFileSeekOrigin/","title":"eFileSeekOrigin","text":"<p>enum eFileSeekOrigin : AmUInt8</p> <p>Defines from where to seek in the file.</p>"},{"location":"api/io/ePackageFileCompressionAlgorithm/","title":"ePackageFileCompressionAlgorithm","text":"<p>enum ePackageFileCompressionAlgorithm : AmUInt8</p> <p>Defines the algorithms a package file can be compressed with.</p> ePackageFileCompressionAlgorithm_None No compression algorithm has been used for the package file. ePackageFileCompressionAlgorithm_ZLib The package file has been compressed using ZLib. ePackageFileCompressionAlgorithm_Invalid Invalid compression algorithm."},{"location":"api/math/","title":"Math","text":"<p>Math libraries and utilities</p>"},{"location":"api/math/#types","title":"Types","text":"Name Description BarycentricCoordinates Represents barycentric coordinates between a point and 3 vertices of a triangle. BezierCurveControlPoints A structure containing control points for a B\u00e9zier curve. BoxShape A box shape, defined by a width, an height, and a depth. BoxZone A <code>Zone</code> built with an inner <code>BoxShape</code> and an outer <code>BoxShape</code>. CapsuleShape A capsule shape, defined by a radius and an height. CapsuleZone A <code>Zone</code> built with an inner <code>CapsuleShape</code> and an outer <code>CapsuleShape</code>. CartesianCoordinateSystem A class representing a cartesian coordinate system. ConeShape A cone shape, defined by a radius and an height. ConeZone A <code>Zone</code> built with an inner <code>ConeShape</code> and an outer <code>ConeShape</code>. Curve A <code>Curve</code> which describe the variation of a value (on the Y-axis) according to another (on the X-axis). CurvePart A segment of a <code>Curve</code>. CurvePoint A single point in a Curve. Edge Represents an edge. Face Represents a triangulated face. Orientation Represents an orientation in 3D space. Shape A geometrical closed 3D shape. SphereShape A sphere shape, defined by a radius. SphereZone A <code>Zone</code> built with an inner <code>SphereShape</code> and an outer <code>SphereShape</code>. SphericalPosition Spherical coordinates representation. Zone A tuple of shapes that represents a zone in the world."},{"location":"api/math/#macros","title":"Macros","text":"Name Description AM_BETWEEN Checks if a value is between a and b. AM_CLAMP Clamps a value between a and b."},{"location":"api/math/#functions","title":"Functions","text":"Name Description AmDitherReal32 Generates a random number between <code>ditherMin</code> and <code>ditherMax</code>. AmFloatToFixedPoint Converts a 32-bit floating-point audio sample to a fixed-point representation. AmInt16ToReal32 Converts a 16-bit signed integer audio sample to a 32-bit floating-point representation. AmInt32ToReal32 Converts a 32-bit signed integer audio sample to a 32-bit floating-point representation. AmReal32ToInt16 Converts a 32-bit floating-point audio sample to a 16-bit signed integer representation. CatmullRom Computes the Catmull-Rom interpolation value at a given time <code>t</code> between four points. ComputeDopplerFactor Computes the Doppler factor for a sound source at a given location. FindGCD Finds the greatest common divisor (GCD) of two integers. GetRelativeDirection Returns a direction vector relative to a given position and rotation. IntegerPow Computes the value base^exp using the squared exponentiation method. NextPowerOf2 Returns the next power of 2 of a given number."},{"location":"api/math/#macro-details","title":"Macro Details","text":""},{"location":"api/math/#am_between","title":"AM_BETWEEN","text":"<p>#define AM_BETWEEN(v, a, b)</p> <p>Checks if a value is between a and b.</p> Parameter <code>v</code> The value to check Parameter <code>a</code> The minimum value Parameter <code>b</code> The maximum value Return <code>true</code> if the value is between a and b, <code>false</code> otherwise."},{"location":"api/math/#am_clamp","title":"AM_CLAMP","text":"<p>#define AM_CLAMP(v, a, b)</p> <p>Clamps a value between a and b.</p> Parameter <code>v</code> The value to clamp Parameter <code>a</code> The minimum value Parameter <code>b</code> The maximum value Return The clamped value"},{"location":"api/math/#function-details","title":"Function Details","text":""},{"location":"api/math/#amditherreal32","title":"AmDitherReal32","text":"<p>inline AmReal32 AmDitherReal32(const AmReal32 ditherMin, const AmReal32 ditherMax)</p> <p>Generates a random number between <code>ditherMin</code> and <code>ditherMax</code>.</p> Parameter <code>ditherMin</code> The minimum value for the random number. Parameter <code>ditherMax</code> The maximum value for the random number. Return A random number between <code>ditherMin</code> and <code>ditherMax</code>."},{"location":"api/math/#amfloattofixedpoint","title":"AmFloatToFixedPoint","text":"<p>inline AmInt32 AmFloatToFixedPoint(const AmReal32 x)</p> <p>Converts a 32-bit floating-point audio sample to a fixed-point representation.</p> Parameter <code>x</code> The 32-bit floating-point audio sample to convert. Return The fixed-point representation of the input 32-bit floating-point audio sample."},{"location":"api/math/#amint16toreal32","title":"AmInt16ToReal32","text":"<p>inline AmReal32 AmInt16ToReal32(const AmInt16 x)</p> <p>Converts a 16-bit signed integer audio sample to a 32-bit floating-point representation.</p> Parameter <code>x</code> The 16-bit signed integer audio sample to convert. Return The 32-bit floating-point representation of the input 16-bit signed integer audio sample. <p>Tip</p> <p>For more accurate conversion, the SDK should be compiled with the <code>AM_ACCURATE_CONVERSION</code> macro defined.</p>"},{"location":"api/math/#amint32toreal32","title":"AmInt32ToReal32","text":"<p>inline AmReal32 AmInt32ToReal32(const AmInt32 x)</p> <p>Converts a 32-bit signed integer audio sample to a 32-bit floating-point representation.</p> Parameter <code>x</code> The 32-bit signed integer audio sample to convert. Return The 32-bit floating-point representation of the input 32-bit signed integer audio sample. <p>Tip</p> <p>For more accurate conversion, the SDK should be compiled with the <code>AM_ACCURATE_CONVERSION</code> macro defined.</p>"},{"location":"api/math/#amreal32toint16","title":"AmReal32ToInt16","text":"<p>inline AmInt16 AmReal32ToInt16(const AmReal32 x, bool dithering = false)</p> <p>Converts a 32-bit floating-point audio sample to a 16-bit signed integer representation.</p> Parameter <code>x</code> The 32-bit floating-point audio sample to convert. Parameter <code>dithering</code> If <code>true</code>, adds a dithering noise to the output. Return The 16-bit signed integer representation of the input 32-bit floating-point audio sample. <p>Tip</p> <p>For more accurate conversion, the SDK should be compiled with the <code>AM_ACCURATE_CONVERSION</code> macro defined.</p>"},{"location":"api/math/#catmullrom","title":"CatmullRom","text":"<p>inline AmReal32 CatmullRom(const AmReal32 t, const AmReal32 p0, const AmReal32 p1, const AmReal32 p2, const AmReal32 p3)</p> <p>Computes the Catmull-Rom interpolation value at a given time <code>t</code> between four points.</p> Parameter <code>t</code> The time value between 0 and 1. Parameter <code>p0</code> The first point. Parameter <code>p1</code> The second point. Parameter <code>p2</code> The third point. Parameter <code>p3</code> The fourth point. Return The Catmull-Rom interpolation value at the given time <code>t</code>."},{"location":"api/math/#computedopplerfactor","title":"ComputeDopplerFactor","text":"<p>inline AmReal32 ComputeDopplerFactor( const AmVec3&amp; locationDelta, const AmVec3&amp; sourceVelocity, const AmVec3&amp; listenerVelocity, const AmReal32 soundSpeed, const AmReal32 dopplerFactor)</p> <p>Computes the Doppler factor for a sound source at a given location.</p> Parameter <code>locationDelta</code> The distance vector from the listener to the sound source. Parameter <code>sourceVelocity</code> The velocity of the sound source. Parameter <code>listenerVelocity</code> The velocity of the listener. Parameter <code>soundSpeed</code> The speed of sound. Parameter <code>dopplerFactor</code> The Doppler factor. Return The computed Doppler factor."},{"location":"api/math/#findgcd","title":"FindGCD","text":"<p>inline AmInt64 FindGCD(AmInt64 a, AmInt64 b)</p> <p>Finds the greatest common divisor (GCD) of two integers.</p> Parameter <code>a</code> First integer. Parameter <code>b</code> Second integer. Return The greatest common divisor of a and b."},{"location":"api/math/#getrelativedirection","title":"GetRelativeDirection","text":"<p>inline AmVec3 GetRelativeDirection(const AmVec3&amp; originPosition, const AmQuat&amp; originRotation, const AmVec3&amp; position)</p> <p>Returns a direction vector relative to a given position and rotation.</p> Parameter <code>originPosition</code> Origin position of the direction. Parameter <code>originRotation</code> Origin rotation of the direction. Parameter <code>position</code> Target position of the direction. Return A relative direction vector (not normalized)."},{"location":"api/math/#integerpow","title":"IntegerPow","text":"<p>template&lt;typename T&gt; inline T IntegerPow(T base, AmInt32 exp)</p> <p>Computes the value base^exp using the squared exponentiation method.</p> Template parameter <code>T</code> An integer type, a floating-point type, or any other type where operator *= is defined. Parameter <code>base</code> Input of the power function. Parameter <code>exp</code> The exponent of the power function. Must be non-negative. Return The result of raising the base to the power of the exponent."},{"location":"api/math/#nextpowerof2","title":"NextPowerOf2","text":"<p>template&lt;typename T&gt; inline T NextPowerOf2(const T&amp; val)</p> <p>Returns the next power of 2 of a given number.</p> Template parameter <code>T</code> An integer type, a floating-point type, or a any other type where operator *= is defined. Parameter <code>val</code> The number. Return The next power of 2."},{"location":"api/math/BarycentricCoordinates/","title":"BarycentricCoordinates","text":"<p>struct  BarycentricCoordinates</p> <p>Represents barycentric coordinates between a point and 3 vertices of a triangle.</p>"},{"location":"api/math/BarycentricCoordinates/#functions","title":"Functions","text":"Name Description RayTriangleIntersection Computes the barycentric coordinates of the intersection of a ray with a triangle. BarycentricCoordinates Default constructor. BarycentricCoordinates Computes barycentric coordinates from a position and a triangle. IsValid Checks whether the coordinates are valid."},{"location":"api/math/BarycentricCoordinates/#function-details","title":"Function Details","text":""},{"location":"api/math/BarycentricCoordinates/#barycentriccoordinates_1","title":"BarycentricCoordinates","text":"<p>BarycentricCoordinates()</p> <p>Default constructor.</p> <p>BarycentricCoordinates(const AmVec3&amp; position, const std::array&lt;AmVec3, 3&gt;&amp; triangle)</p> <p>Computes barycentric coordinates from a position and a triangle.</p> Parameter <code>position</code> The position of the intersection. Parameter <code>triangle</code> The triangle."},{"location":"api/math/BarycentricCoordinates/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const</p> <p>Checks whether the coordinates are valid.</p> Return <code>true</code> if the coordinates are valid, <code>false</code> otherwise."},{"location":"api/math/BarycentricCoordinates/#raytriangleintersection","title":"RayTriangleIntersection","text":"<p>static bool RayTriangleIntersection( const AmVec3&amp; rayOrigin, const AmVec3&amp; rayDirection, const std::array&lt;AmVec3, 3&gt;&amp; triangle, BarycentricCoordinates&amp; result)</p> <p>Computes the barycentric coordinates of the intersection of a ray with a triangle.</p> Parameter <code>rayOrigin</code> The origin of the ray. Parameter <code>rayDirection</code> The direction of the ray. Parameter <code>triangle</code> The vertices of the triangle. Parameter <code>result</code> The result of the intersection. Return <code>true</code> if the ray intersects the triangle, <code>false</code> otherwise."},{"location":"api/math/BezierCurveControlPoints/","title":"BezierCurveControlPoints","text":"<p>struct BezierCurveControlPoints</p> <p>A structure containing control points for a B\u00e9zier curve.</p>"},{"location":"api/math/BezierCurveControlPoints/#variables","title":"Variables","text":"Name Description x1 The x coordinate of the second control point. y1 The y coordinate of the second control point. x2 The x coordinate of the third control point. y2 The y coordinate of the third control point."},{"location":"api/math/BezierCurveControlPoints/#variable-details","title":"Variable Details","text":""},{"location":"api/math/BezierCurveControlPoints/#x1","title":"x1","text":"<p>AmReal32 x1</p> <p>The x coordinate of the second control point.</p>"},{"location":"api/math/BezierCurveControlPoints/#x2","title":"x2","text":"<p>AmReal32 x2</p> <p>The x coordinate of the third control point.</p>"},{"location":"api/math/BezierCurveControlPoints/#y1","title":"y1","text":"<p>AmReal32 y1</p> <p>The y coordinate of the second control point.</p>"},{"location":"api/math/BezierCurveControlPoints/#y2","title":"y2","text":"<p>AmReal32 y2</p> <p>The y coordinate of the third control point.</p>"},{"location":"api/math/BoxShape/","title":"BoxShape","text":"<p>class  BoxShape : public Shape</p> <p>A box shape, defined by a width, an height, and a depth.</p>"},{"location":"api/math/BoxShape/#operators","title":"Operators","text":"Name Description operator== Compares this shape with another shape for equality. operator!= Compares this shape with another shape for inequality."},{"location":"api/math/BoxShape/#functions","title":"Functions","text":"Name Description Create Creates a new <code>BoxShape</code> from a definition. BoxShape Constructs a new <code>BoxShape</code>. BoxShape Constructs a new <code>BoxShape</code>. GetHalfWidth Gets the half width of the <code>BoxShape</code>. GetHalfHeight Gets the half height of the <code>BoxShape</code>. GetHalfDepth Gets the half depth of the <code>BoxShape</code>. GetWidth Gets the width of the <code>BoxShape</code>. GetHeight Gets the height of the <code>BoxShape</code>. GetDepth Gets the depth of the <code>BoxShape</code>. SetHalfWidth Sets the half width of the <code>BoxShape</code>. SetHalfHeight Sets the half height of the <code>BoxShape</code>. SetHalfDepth Sets the half depth of the <code>BoxShape</code>. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape. GetClosestPoint Gets the closest point to the given location. GetCorners Gets the corners of the box shape."},{"location":"api/math/BoxShape/#operator-details","title":"Operator Details","text":""},{"location":"api/math/BoxShape/#operator","title":"operator!=","text":"<p>bool operator!=(const BoxShape&amp; other) const</p> <p>Compares this shape with another shape for inequality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>false</code> if the shapes are equal, <code>true</code> otherwise."},{"location":"api/math/BoxShape/#operator_1","title":"operator==","text":"<p>bool operator==(const BoxShape&amp; other) const</p> <p>Compares this shape with another shape for equality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>true</code> if the shapes are equal, <code>false</code> otherwise."},{"location":"api/math/BoxShape/#function-details","title":"Function Details","text":""},{"location":"api/math/BoxShape/#boxshape_1","title":"BoxShape","text":"<p>explicit BoxShape(AmReal32 halfWidth, AmReal32 halfHeight, AmReal32 halfDepth)</p> <p>Constructs a new <code>BoxShape</code>.</p> Parameter <code>halfWidth</code> The half width of the box shape. Parameter <code>halfHeight</code> The half height of the box shape. Parameter <code>halfDepth</code> The half depth of the box shape. <p>explicit BoxShape(const AmVec3&amp; position, const AmVec3&amp; dimensions)</p> <p>Constructs a new <code>BoxShape</code>.</p> Parameter <code>position</code> The position of the box shape. Parameter <code>dimensions</code> The dimensions of the box shape."},{"location":"api/math/BoxShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return <code>true</code> if the shape contains the given position, <code>false</code> otherwise."},{"location":"api/math/BoxShape/#create","title":"Create","text":"<p>static std::shared_ptr&lt;BoxShape&gt; Create(const BoxShapeDefinition* definition)</p> <p>Creates a new <code>BoxShape</code> from a definition.</p> Parameter <code>definition</code> The definition of the shape generated from a flatbuffer binary. <p>Warning</p> <p>This method is intended for internal usage only.</p>"},{"location":"api/math/BoxShape/#getclosestpoint","title":"GetClosestPoint","text":"<p>[[nodiscard]] AmVec3 GetClosestPoint(const AmVec3&amp; location) const</p> <p>Gets the closest point to the given location.</p> Parameter <code>location</code> The location to get the closest point for. Return The closest point to the given location."},{"location":"api/math/BoxShape/#getcorners","title":"GetCorners","text":"<p>[[nodiscard]] std::array&lt;AmVec3, 8&gt; GetCorners() const</p> <p>Gets the corners of the box shape.</p> <p>The returned corners are arranged in the following order:</p> <pre><code>6 - - - - 4\n| \\       | \\\n|   3 - - - - 5\n|   |     |   |\n 1  | - - 7   |\n  \\ |       \\ |\n    0 - - - - 2\n</code></pre> Return The corners of the box shape."},{"location":"api/math/BoxShape/#getdepth","title":"GetDepth","text":"<p>[[nodiscard]] AmReal32 GetDepth() const</p> <p>Gets the depth of the <code>BoxShape</code>.</p> Return The box shape's depth."},{"location":"api/math/BoxShape/#gethalfdepth","title":"GetHalfDepth","text":"<p>[[nodiscard]] AmReal32 GetHalfDepth() const</p> <p>Gets the half depth of the <code>BoxShape</code>.</p> Return The box shape's half depth."},{"location":"api/math/BoxShape/#gethalfheight","title":"GetHalfHeight","text":"<p>[[nodiscard]] AmReal32 GetHalfHeight() const</p> <p>Gets the half height of the <code>BoxShape</code>.</p> Return The box shape's half height."},{"location":"api/math/BoxShape/#gethalfwidth","title":"GetHalfWidth","text":"<p>[[nodiscard]] AmReal32 GetHalfWidth() const</p> <p>Gets the half width of the <code>BoxShape</code>.</p> Return The box shape's half width."},{"location":"api/math/BoxShape/#getheight","title":"GetHeight","text":"<p>[[nodiscard]] AmReal32 GetHeight() const</p> <p>Gets the height of the <code>BoxShape</code>.</p> Return The box shape's height."},{"location":"api/math/BoxShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/math/BoxShape/#getwidth","title":"GetWidth","text":"<p>[[nodiscard]] AmReal32 GetWidth() const</p> <p>Gets the width of the <code>BoxShape</code>.</p> Return The box shape's width."},{"location":"api/math/BoxShape/#sethalfdepth","title":"SetHalfDepth","text":"<p>void SetHalfDepth(AmReal32 halfDepth)</p> <p>Sets the half depth of the <code>BoxShape</code>.</p> Parameter <code>halfDepth</code> The new box shape's half depth."},{"location":"api/math/BoxShape/#sethalfheight","title":"SetHalfHeight","text":"<p>void SetHalfHeight(AmReal32 halfHeight)</p> <p>Sets the half height of the <code>BoxShape</code>.</p> Parameter <code>halfHeight</code> The new box shape's half height."},{"location":"api/math/BoxShape/#sethalfwidth","title":"SetHalfWidth","text":"<p>void SetHalfWidth(AmReal32 halfWidth)</p> <p>Sets the half width of the <code>BoxShape</code>.</p> Parameter <code>halfWidth</code> The new box shape's half width."},{"location":"api/math/BoxZone/","title":"BoxZone","text":"<p>class  BoxZone : public Zone</p> <p>A <code>Zone</code> built with an inner <code>BoxShape</code> and an outer <code>BoxShape</code>.</p>"},{"location":"api/math/BoxZone/#functions","title":"Functions","text":"Name Description BoxZone Constructs a new <code>BoxZone</code>. GetFactor @inherit"},{"location":"api/math/BoxZone/#function-details","title":"Function Details","text":""},{"location":"api/math/BoxZone/#boxzone_1","title":"BoxZone","text":"<p>BoxZone(std::shared_ptr&lt;BoxShape&gt; inner, std::shared_ptr&lt;BoxShape&gt; outer)</p> <p>Constructs a new <code>BoxZone</code>.</p> Parameter <code>inner</code> The inner <code>BoxShape</code>. Parameter <code>outer</code> The outer <code>BoxShape</code>."},{"location":"api/math/BoxZone/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] AmReal32 GetFactor(const AmVec3&amp; position) final</p> <p>@inherit</p>"},{"location":"api/math/CapsuleShape/","title":"CapsuleShape","text":"<p>class  CapsuleShape : public Shape</p> <p>A capsule shape, defined by a radius and an height.</p>"},{"location":"api/math/CapsuleShape/#operators","title":"Operators","text":"Name Description operator== Compares this shape with another shape for equality. operator!= Compares this shape with another shape for inequality."},{"location":"api/math/CapsuleShape/#functions","title":"Functions","text":"Name Description Create Creates a new <code>CapsuleShape</code> from a definition. CapsuleShape Constructs a new <code>CapsuleShape</code>. GetRadius Gets the radius of the capsule shape. GetHalfHeight Gets the half height of the capsule shape. GetDiameter Gets the diameter of the capsule shape. GetHeight Gets the height of the capsule shape. SetRadius Sets the radius of the capsule shape. SetHalfHeight Sets the half height of the capsule shape. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape."},{"location":"api/math/CapsuleShape/#operator-details","title":"Operator Details","text":""},{"location":"api/math/CapsuleShape/#operator","title":"operator!=","text":"<p>bool operator!=(const CapsuleShape&amp; other) const</p> <p>Compares this shape with another shape for inequality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>false</code> if the shapes are equal, <code>true</code> otherwise."},{"location":"api/math/CapsuleShape/#operator_1","title":"operator==","text":"<p>bool operator==(const CapsuleShape&amp; other) const</p> <p>Compares this shape with another shape for equality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>true</code> if the shapes are equal, <code>false</code> otherwise."},{"location":"api/math/CapsuleShape/#function-details","title":"Function Details","text":""},{"location":"api/math/CapsuleShape/#capsuleshape_1","title":"CapsuleShape","text":"<p>explicit CapsuleShape(AmReal32 radius, AmReal32 halfHeight)</p> <p>Constructs a new <code>CapsuleShape</code>.</p> Parameter <code>radius</code> The capsule radius. Parameter <code>halfHeight</code> The capsule half height."},{"location":"api/math/CapsuleShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return <code>true</code> if the shape contains the given position, <code>false</code> otherwise."},{"location":"api/math/CapsuleShape/#create","title":"Create","text":"<p>static std::shared_ptr&lt;CapsuleShape&gt; Create(const CapsuleShapeDefinition* definition)</p> <p>Creates a new <code>CapsuleShape</code> from a definition.</p> Parameter <code>definition</code> The definition of the shape generated from a flatbuffer binary. <p>Warning</p> <p>This method is intended for internal usage only.</p>"},{"location":"api/math/CapsuleShape/#getdiameter","title":"GetDiameter","text":"<p>[[nodiscard]] AmReal32 GetDiameter() const</p> <p>Gets the diameter of the capsule shape.</p> Return The capsule's diameter."},{"location":"api/math/CapsuleShape/#gethalfheight","title":"GetHalfHeight","text":"<p>[[nodiscard]] AmReal32 GetHalfHeight() const</p> <p>Gets the half height of the capsule shape.</p> Return The capsule's half height."},{"location":"api/math/CapsuleShape/#getheight","title":"GetHeight","text":"<p>[[nodiscard]] AmReal32 GetHeight() const</p> <p>Gets the height of the capsule shape.</p> Return The capsule's height."},{"location":"api/math/CapsuleShape/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] AmReal32 GetRadius() const</p> <p>Gets the radius of the capsule shape.</p> Return The capsule's radius."},{"location":"api/math/CapsuleShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/math/CapsuleShape/#sethalfheight","title":"SetHalfHeight","text":"<p>void SetHalfHeight(AmReal32 halfHeight)</p> <p>Sets the half height of the capsule shape.</p> Parameter <code>halfHeight</code> The capsule's half height."},{"location":"api/math/CapsuleShape/#setradius","title":"SetRadius","text":"<p>void SetRadius(AmReal32 radius)</p> <p>Sets the radius of the capsule shape.</p> Parameter <code>radius</code> The capsule's radius."},{"location":"api/math/CapsuleZone/","title":"CapsuleZone","text":"<p>class  CapsuleZone : public Zone</p> <p>A <code>Zone</code> built with an inner <code>CapsuleShape</code> and an outer <code>CapsuleShape</code>.</p>"},{"location":"api/math/CapsuleZone/#functions","title":"Functions","text":"Name Description CapsuleZone Constructs a new <code>CapsuleZone</code>. GetFactor @inherit"},{"location":"api/math/CapsuleZone/#function-details","title":"Function Details","text":""},{"location":"api/math/CapsuleZone/#capsulezone_1","title":"CapsuleZone","text":"<p>CapsuleZone(std::shared_ptr&lt;CapsuleShape&gt; inner, std::shared_ptr&lt;CapsuleShape&gt; outer)</p> <p>Constructs a new <code>CapsuleZone</code>.</p> Parameter <code>inner</code> The inner <code>CapsuleShape</code>. Parameter <code>outer</code> The outer <code>CapsuleShape</code>."},{"location":"api/math/CapsuleZone/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] AmReal32 GetFactor(const AmVec3&amp; position) final</p> <p>@inherit</p>"},{"location":"api/math/CartesianCoordinateSystem/","title":"CartesianCoordinateSystem","text":"<p>class  CartesianCoordinateSystem</p> <p>A class representing a cartesian coordinate system.</p> <p>It's used to know which direction is positive along each axis, and also allows Amplitude to convert incoming data to the internal coordinate system.</p>"},{"location":"api/math/CartesianCoordinateSystem/#types","title":"Types","text":"Name Description Axis Enumerates the axes of the cartesian coordinate system. Converter Converts values from one cartesian coordinate system to another."},{"location":"api/math/CartesianCoordinateSystem/#functions","title":"Functions","text":"Name Description Default Creates a cartesian coordinate system which match the one used in Amplitude. AmbiX Creates a cartesian coordinate system suitable for the AmbiX ambisonics format. RightHandedYUp Creates a right-handed, Y-up cartesian coordinate system. LeftHandedYUp Creates a left-handed, Y-up cartesian coordinate system. RightHandedZUp Creates a right-handed, Z-up cartesian coordinate system. LeftHandedZUp Creates a left-handed, Z-up cartesian coordinate system. Convert Converts a vector from one coordinate system to another. Convert Converts a quaternion rotation from one coordinate system to another. Convert Converts a scalar from one coordinate system to another. ConvertToDefault Converts a vector from one coordinate system to the default coordinate system. GetVector Gets a vector corresponding to the given axis. CartesianCoordinateSystem Creates a new cartesian coordinate system with the given axes. GetRightVector Gets the vector corresponding to the coordinate system's right axis. GetForwardVector Gets the vector corresponding to the coordinate system's forward axis. GetUpVector Gets the vector corresponding to the coordinate system's up axis. Convert Converts a vector from one coordinate system to the current one. Convert Converts a quaternion from one coordinate system to the current one. Convert Converts a scalar from one coordinate system to the current one."},{"location":"api/math/CartesianCoordinateSystem/#function-details","title":"Function Details","text":""},{"location":"api/math/CartesianCoordinateSystem/#ambix","title":"AmbiX","text":"<p>static CartesianCoordinateSystem AmbiX()</p> <p>Creates a cartesian coordinate system suitable for the AmbiX ambisonics format.</p> Return AmbiX format's cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#cartesiancoordinatesystem_1","title":"CartesianCoordinateSystem","text":"<p>CartesianCoordinateSystem(Axis right, Axis forward, Axis up)</p> <p>Creates a new cartesian coordinate system with the given axes.</p> Parameter <code>right</code> The right axis of the new coordinate system. Parameter <code>forward</code> The forward axis of the new coordinate system. Parameter <code>up</code> The up axis of the new coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#convert","title":"Convert","text":"<p>static AmVec3 Convert(const AmVec3&amp; vector, const CartesianCoordinateSystem&amp; from, const CartesianCoordinateSystem&amp; to)</p> <p>Converts a vector from one coordinate system to another.</p> Parameter <code>vector</code> The vector to convert. Parameter <code>from</code> The source coordinate system. Parameter <code>to</code> The destination coordinate system. Return The converted vector. <p>static AmQuat Convert(const AmQuat&amp; rotation, const CartesianCoordinateSystem&amp; from, const CartesianCoordinateSystem&amp; to)</p> <p>Converts a quaternion rotation from one coordinate system to another.</p> Parameter <code>rotation</code> The rotation to convert. Parameter <code>from</code> The source coordinate system. Parameter <code>to</code> The destination coordinate system. Return The converted rotation. <p>static AmReal32 Convert(AmReal32 scalar, const CartesianCoordinateSystem&amp; from, const CartesianCoordinateSystem&amp; to)</p> <p>Converts a scalar from one coordinate system to another.</p> Parameter <code>scalar</code> The scalar to convert. Parameter <code>from</code> The source coordinate system. Parameter <code>to</code> The destination coordinate system. Return The converted scalar. <p>[[nodiscard]] AmVec3 Convert(const AmVec3&amp; vector, const CartesianCoordinateSystem&amp; from) const</p> <p>Converts a vector from one coordinate system to the current one.</p> Parameter <code>vector</code> The vector to convert. Parameter <code>from</code> The original coordinate system of the vector. Return The converted vector in the current coordinate system. <p>[[nodiscard]] AmQuat Convert(const AmQuat&amp; quaternion, const CartesianCoordinateSystem&amp; from) const</p> <p>Converts a quaternion from one coordinate system to the current one.</p> Parameter <code>quaternion</code> The quaternion to convert. Parameter <code>from</code> The original coordinate system of the quaternion. Return The converted quaternion in the current coordinate system. <p>[[nodiscard]] AmReal32 Convert(const AmReal32&amp; scalar, const CartesianCoordinateSystem&amp; from) const</p> <p>Converts a scalar from one coordinate system to the current one.</p> Parameter <code>scalar</code> The scalar to convert. Parameter <code>from</code> The original coordinate system of the scalar. Return The converted scalar in the current coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#converttodefault","title":"ConvertToDefault","text":"<p>static AmVec3 ConvertToDefault(const AmVec3&amp; vector, const CartesianCoordinateSystem&amp; from)</p> <p>Converts a vector from one coordinate system to the default coordinate system.</p> Parameter <code>vector</code> The vector to convert. Parameter <code>from</code> The source coordinate system. Return The converted vector."},{"location":"api/math/CartesianCoordinateSystem/#default","title":"Default","text":"<p>static CartesianCoordinateSystem Default()</p> <p>Creates a cartesian coordinate system which match the one used in Amplitude.</p> Return Amplitude's internal coordinate system for right-handed, Z-up cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#getforwardvector","title":"GetForwardVector","text":"<p>[[nodiscard]] inline AmVec3 GetForwardVector() const</p> <p>Gets the vector corresponding to the coordinate system's forward axis.</p> Return The coordinate system's forward vector."},{"location":"api/math/CartesianCoordinateSystem/#getrightvector","title":"GetRightVector","text":"<p>[[nodiscard]] inline AmVec3 GetRightVector() const</p> <p>Gets the vector corresponding to the coordinate system's right axis.</p> Return The coordinate system's right vector."},{"location":"api/math/CartesianCoordinateSystem/#getupvector","title":"GetUpVector","text":"<p>[[nodiscard]] inline AmVec3 GetUpVector() const</p> <p>Gets the vector corresponding to the coordinate system's up axis.</p> Return The coordinate system's up vector."},{"location":"api/math/CartesianCoordinateSystem/#getvector","title":"GetVector","text":"<p>[[nodiscard]] static AmVec3 GetVector(Axis axis)</p> <p>Gets a vector corresponding to the given axis.</p> Parameter <code>axis</code> The axis to get the vector for. Return A vector corresponding to the given axis."},{"location":"api/math/CartesianCoordinateSystem/#lefthandedyup","title":"LeftHandedYUp","text":"<p>static CartesianCoordinateSystem LeftHandedYUp()</p> <p>Creates a left-handed, Y-up cartesian coordinate system.</p> Return A left-handed, Y-up cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#lefthandedzup","title":"LeftHandedZUp","text":"<p>static CartesianCoordinateSystem LeftHandedZUp()</p> <p>Creates a left-handed, Z-up cartesian coordinate system.</p> Return A left-handed, Z-up cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#righthandedyup","title":"RightHandedYUp","text":"<p>static CartesianCoordinateSystem RightHandedYUp()</p> <p>Creates a right-handed, Y-up cartesian coordinate system.</p> Return A right-handed, Y-up cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/#righthandedzup","title":"RightHandedZUp","text":"<p>static CartesianCoordinateSystem RightHandedZUp()</p> <p>Creates a right-handed, Z-up cartesian coordinate system.</p> Return A right-handed, Z-up cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/Axis/","title":"Axis","text":"<p>enum class Axis</p> <p>Enumerates the axes of the cartesian coordinate system.</p> PositiveX The positive X axis (1, 0, 0). PositiveY The positive Y axis (0, 1, 0). PositiveZ The positive Z axis (0, 0, 1). NegativeX The negative X axis (-1, 0, 0). NegativeY The negative Y axis (0, -1, 0). NegativeZ The negative Z axis (0, 0, -1)."},{"location":"api/math/CartesianCoordinateSystem/Converter/","title":"Converter","text":"<p>class  Converter</p> <p>Converts values from one cartesian coordinate system to another.</p>"},{"location":"api/math/CartesianCoordinateSystem/Converter/#functions","title":"Functions","text":"Name Description Converter Constructs a converter from two cartesian coordinate systems. Forward Converts a vector from the source coordinate system to the target coordinate system. Forward Converts a quaternion from the source coordinate system to the target coordinate system. Forward Converts a scalar from the source coordinate system to the target coordinate system. Backward Converts a vector from the target coordinate system to the source coordinate system. Backward Converts a quaternion from the target coordinate system to the source coordinate system. Backward Converts a scalar from the target coordinate system to the source coordinate system."},{"location":"api/math/CartesianCoordinateSystem/Converter/#function-details","title":"Function Details","text":""},{"location":"api/math/CartesianCoordinateSystem/Converter/#backward","title":"Backward","text":"<p>[[nodiscard]] AmVec3 Backward(const AmVec3&amp; vector) const</p> <p>Converts a vector from the target coordinate system to the source coordinate system.</p> Parameter <code>vector</code> The vector to convert. Return A vector in the source coordinate system. <p>[[nodiscard]] AmQuat Backward(const AmQuat&amp; quaternion) const</p> <p>Converts a quaternion from the target coordinate system to the source coordinate system.</p> Parameter <code>quaternion</code> The quaternion to convert. Return A quaternion in the source coordinate system. <p>[[nodiscard]] AmReal32 Backward(const AmReal32&amp; scalar) const</p> <p>Converts a scalar from the target coordinate system to the source coordinate system.</p> Parameter <code>scalar</code> The scalar to convert. Return A scalar in the source coordinate system."},{"location":"api/math/CartesianCoordinateSystem/Converter/#converter_1","title":"Converter","text":"<p>Converter(const CartesianCoordinateSystem&amp; from, const CartesianCoordinateSystem&amp; to)</p> <p>Constructs a converter from two cartesian coordinate systems.</p> Parameter <code>from</code> The source cartesian coordinate system. Parameter <code>to</code> The target cartesian coordinate system."},{"location":"api/math/CartesianCoordinateSystem/Converter/#forward","title":"Forward","text":"<p>[[nodiscard]] AmVec3 Forward(const AmVec3&amp; vector) const</p> <p>Converts a vector from the source coordinate system to the target coordinate system.</p> Parameter <code>vector</code> The vector to convert. Return A vector in the target coordinate system. <p>[[nodiscard]] AmQuat Forward(const AmQuat&amp; quaternion) const</p> <p>Converts a quaternion from the source coordinate system to the target coordinate system.</p> Parameter <code>quaternion</code> The quaternion to convert. Return A quaternion in the target coordinate system. <p>[[nodiscard]] AmReal32 Forward(const AmReal32&amp; scalar) const</p> <p>Converts a scalar from the source coordinate system to the target coordinate system.</p> Parameter <code>scalar</code> The scalar to convert. Return A scalar in the target coordinate system."},{"location":"api/math/ConeShape/","title":"ConeShape","text":"<p>class  ConeShape : public Shape</p> <p>A cone shape, defined by a radius and an height.</p>"},{"location":"api/math/ConeShape/#operators","title":"Operators","text":"Name Description operator== Compares this shape with another shape for equality. operator!= Compares this shape with another shape for inequality."},{"location":"api/math/ConeShape/#functions","title":"Functions","text":"Name Description Create Creates a new ConeShape from a definition. ConeShape Constructs a new <code>ConeShape</code>. GetRadius Gets the radius of the cone shape. GetDiameter Gets the diameter of the cone shape. GetHeight Gets the height of the cone shape. SetRadius Sets the radius of the cone shape. SetHeight Sets the height of the cone shape. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape."},{"location":"api/math/ConeShape/#operator-details","title":"Operator Details","text":""},{"location":"api/math/ConeShape/#operator","title":"operator!=","text":"<p>bool operator!=(const ConeShape&amp; other) const</p> <p>Compares this shape with another shape for inequality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>false</code> if the shapes are equal, <code>true</code> otherwise."},{"location":"api/math/ConeShape/#operator_1","title":"operator==","text":"<p>bool operator==(const ConeShape&amp; other) const</p> <p>Compares this shape with another shape for equality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>true</code> if the shapes are equal, <code>false</code> otherwise."},{"location":"api/math/ConeShape/#function-details","title":"Function Details","text":""},{"location":"api/math/ConeShape/#coneshape_1","title":"ConeShape","text":"<p>explicit ConeShape(AmReal32 radius, AmReal32 height)</p> <p>Constructs a new <code>ConeShape</code>.</p> Parameter <code>radius</code> The radius of the cone's base. Parameter <code>height</code> The height of the cone."},{"location":"api/math/ConeShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/math/ConeShape/#create","title":"Create","text":"<p>static std::shared_ptr&lt;ConeShape&gt; Create(const ConeShapeDefinition* definition)</p> <p>Creates a new ConeShape from a definition.</p> Parameter <code>definition</code> The definition of the shape generated from a flatbuffer binary. <p>Warning</p> <p>This method is intended for internal usage only.</p>"},{"location":"api/math/ConeShape/#getdiameter","title":"GetDiameter","text":"<p>[[nodiscard]] AmReal32 GetDiameter() const</p> <p>Gets the diameter of the cone shape.</p> Return The cone base's diameter."},{"location":"api/math/ConeShape/#getheight","title":"GetHeight","text":"<p>[[nodiscard]] AmReal32 GetHeight() const</p> <p>Gets the height of the cone shape.</p> Return The cone's height."},{"location":"api/math/ConeShape/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] AmReal32 GetRadius() const</p> <p>Gets the radius of the cone shape.</p> Return The cone base's radius."},{"location":"api/math/ConeShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/math/ConeShape/#setheight","title":"SetHeight","text":"<p>void SetHeight(AmReal32 height)</p> <p>Sets the height of the cone shape.</p> Parameter <code>height</code> The cone's height."},{"location":"api/math/ConeShape/#setradius","title":"SetRadius","text":"<p>void SetRadius(AmReal32 radius)</p> <p>Sets the radius of the cone shape.</p> Parameter <code>radius</code> The cone base's radius."},{"location":"api/math/ConeZone/","title":"ConeZone","text":"<p>class  ConeZone : public Zone</p> <p>A <code>Zone</code> built with an inner <code>ConeShape</code> and an outer <code>ConeShape</code>.</p>"},{"location":"api/math/ConeZone/#functions","title":"Functions","text":"Name Description ConeZone Constructs a new <code>ConeZone</code>. GetFactor @inherit"},{"location":"api/math/ConeZone/#function-details","title":"Function Details","text":""},{"location":"api/math/ConeZone/#conezone_1","title":"ConeZone","text":"<p>ConeZone(std::shared_ptr&lt;ConeShape&gt; inner, std::shared_ptr&lt;ConeShape&gt; outer)</p> <p>Constructs a new <code>ConeZone</code>.</p> Parameter <code>inner</code> The inner <code>ConeShape</code>. Parameter <code>outer</code> The outer <code>ConeShape</code>."},{"location":"api/math/ConeZone/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] AmReal32 GetFactor(const AmVec3&amp; position) final</p> <p>@inherit</p>"},{"location":"api/math/Curve/","title":"Curve","text":"<p>class  Curve</p> <p>A <code>Curve</code> which describe the variation of a value (on the Y-axis) according to another (on the X-axis).</p>"},{"location":"api/math/Curve/#functions","title":"Functions","text":"Name Description Curve Creates an empty <code>Curve</code>. Initialize Initializes curve parts from the given definition. Initialize Initializes curve parts from the given vector. Get Get the curve value corresponding to the given X value."},{"location":"api/math/Curve/#function-details","title":"Function Details","text":""},{"location":"api/math/Curve/#curve_1","title":"Curve","text":"<p>Curve()</p> <p>Creates an empty <code>Curve</code>.</p>"},{"location":"api/math/Curve/#get","title":"Get","text":"<p>[[nodiscard]] AmReal32 Get(AmReal64 x) const</p> <p>Get the curve value corresponding to the given X value.</p> Parameter <code>x</code> The X value. Return The curve value."},{"location":"api/math/Curve/#initialize","title":"Initialize","text":"<p>void Initialize(const CurveDefinition* definition)</p> <p>Initializes curve parts from the given definition.</p> Parameter <code>definition</code> The curve definition data. <p>void Initialize(const std::vector&lt;CurvePart&gt;&amp; parts)</p> <p>Initializes curve parts from the given vector.</p> Parameter <code>parts</code> The vector of curve parts."},{"location":"api/math/CurvePart/","title":"CurvePart","text":"<p>class  CurvePart</p> <p>A segment of a <code>Curve</code>.</p> <p>A <code>CurvePart</code> allows a curve to have different fading algorithms at the same time. Each <code>CurvePart</code> has a start and end point, and the fading algorithm which moves the value from the start point to the end point.</p>"},{"location":"api/math/CurvePart/#operators","title":"Operators","text":"Name Description operator= Copy assignment operator."},{"location":"api/math/CurvePart/#functions","title":"Functions","text":"Name Description CurvePart Creates an empty <code>CurvePart</code>. CurvePart Copy constructor. ~CurvePart Destroys this <code>CurvePart</code>. Initialize Initializes this <code>CurvePart</code> from a definition. GetStart Returns the start point of this <code>CurvePart</code>. SetStart Sets the start point of this <code>CurvePart</code>. GetEnd Returns the end point of this <code>CurvePart</code>. SetEnd Sets the end point of this <code>CurvePart</code>. GetFader Returns the Fader of this <code>CurvePart</code>. SetFader Sets the fader of this <code>CurvePart</code>. Get Gets the Y coordinates of a point given its coordinates over the X axis."},{"location":"api/math/CurvePart/#operator-details","title":"Operator Details","text":""},{"location":"api/math/CurvePart/#operator","title":"operator=","text":"<p>CurvePart&amp; operator=(const CurvePart&amp; other)</p> <p>Copy assignment operator.</p> Parameter <code>other</code> The other <code>CurvePart</code> to copy. Return A copy of this <code>CurvePart</code>."},{"location":"api/math/CurvePart/#function-details","title":"Function Details","text":""},{"location":"api/math/CurvePart/#curvepart_1","title":"CurvePart","text":"<p>CurvePart()</p> <p>Creates an empty <code>CurvePart</code>.</p> <p>CurvePart(const CurvePart&amp; other)</p> <p>Copy constructor.</p> Parameter <code>other</code> The <code>CurvePart</code> to copy."},{"location":"api/math/CurvePart/#get","title":"Get","text":"<p>[[nodiscard]] AmReal32 Get(AmReal64 x) const</p> <p>Gets the Y coordinates of a point given its coordinates over the X axis.</p> Parameter <code>x</code> The coordinates of the point over the X axis. Return The Y coordinates of the point."},{"location":"api/math/CurvePart/#getend","title":"GetEnd","text":"<p>[[nodiscard]] const CurvePoint&amp; GetEnd() const</p> <p>Returns the end point of this <code>CurvePart</code>.</p> Return The end point of this <code>CurvePart</code>."},{"location":"api/math/CurvePart/#getfader","title":"GetFader","text":"<p>[[nodiscard]] FaderInstance* GetFader() const</p> <p>Returns the Fader of this <code>CurvePart</code>.</p> Return The <code>FaderInstance</code> of this <code>CurvePart</code>."},{"location":"api/math/CurvePart/#getstart","title":"GetStart","text":"<p>[[nodiscard]] const CurvePoint&amp; GetStart() const</p> <p>Returns the start point of this <code>CurvePart</code>.</p> Return The start point of this <code>CurvePart</code>."},{"location":"api/math/CurvePart/#initialize","title":"Initialize","text":"<p>void Initialize(const CurvePartDefinition* definition)</p> <p>Initializes this <code>CurvePart</code> from a definition.</p> Parameter <code>definition</code> The definition of the curve part generated from a flatbuffer binary."},{"location":"api/math/CurvePart/#setend","title":"SetEnd","text":"<p>void SetEnd(const CurvePoint&amp; end)</p> <p>Sets the end point of this <code>CurvePart</code>.</p> Parameter <code>end</code> The new end point."},{"location":"api/math/CurvePart/#setfader","title":"SetFader","text":"<p>void SetFader(const AmString&amp; fader)</p> <p>Sets the fader of this <code>CurvePart</code>.</p> Parameter <code>fader</code> The name of the <code>Fader</code> to set."},{"location":"api/math/CurvePart/#setstart","title":"SetStart","text":"<p>void SetStart(const CurvePoint&amp; start)</p> <p>Sets the start point of this <code>CurvePart</code>.</p> Parameter <code>start</code> The new start point."},{"location":"api/math/CurvePart/#curvepart_2","title":"~CurvePart","text":"<p>~CurvePart()</p> <p>Destroys this <code>CurvePart</code>.</p>"},{"location":"api/math/CurvePoint/","title":"CurvePoint","text":"<p>struct  CurvePoint</p> <p>A single point in a Curve.</p>"},{"location":"api/math/CurvePoint/#variables","title":"Variables","text":"Name Description x The coordinates of the point over the X axis. y The coordinates of the point over the Y axis."},{"location":"api/math/CurvePoint/#variable-details","title":"Variable Details","text":""},{"location":"api/math/CurvePoint/#x","title":"x","text":"<p>AmReal64 x</p> <p>The coordinates of the point over the X axis.</p>"},{"location":"api/math/CurvePoint/#y","title":"y","text":"<p>AmReal32 y</p> <p>The coordinates of the point over the Y axis.</p>"},{"location":"api/math/Edge/","title":"Edge","text":"<p>struct  Edge</p> <p>Represents an edge.</p> <p>An edge is defined by two vertices. This structure is optimized for use with an existing indexed vertex array, so only the indices of each edge's vertex need to be provided.</p>"},{"location":"api/math/Edge/#variables","title":"Variables","text":"Name Description m_E0 Index of the first vertex. m_E1 Index of the second vertex."},{"location":"api/math/Edge/#variable-details","title":"Variable Details","text":""},{"location":"api/math/Edge/#m_e0","title":"m_E0","text":"<p>AmSize m_E0</p> <p>Index of the first vertex.</p>"},{"location":"api/math/Edge/#m_e1","title":"m_E1","text":"<p>AmSize m_E1</p> <p>Index of the second vertex.</p>"},{"location":"api/math/Face/","title":"Face","text":"<p>struct  Face</p> <p>Represents a triangulated face.</p> <p>A face is defined by three vertices. This structure is optimized for use with an existing indexed vertex array, so only the indices of each face's vertex need to be provided.</p>"},{"location":"api/math/Face/#variables","title":"Variables","text":"Name Description m_A Index of the first vertex. m_B Index of the second vertex. m_C Index of the third vertex."},{"location":"api/math/Face/#functions","title":"Functions","text":"Name Description IsValid Checks if the face is valid."},{"location":"api/math/Face/#variable-details","title":"Variable Details","text":""},{"location":"api/math/Face/#m_a","title":"m_A","text":"<p>AmSize m_A</p> <p>Index of the first vertex.</p>"},{"location":"api/math/Face/#m_b","title":"m_B","text":"<p>AmSize m_B</p> <p>Index of the second vertex.</p>"},{"location":"api/math/Face/#m_c","title":"m_C","text":"<p>AmSize m_C</p> <p>Index of the third vertex.</p>"},{"location":"api/math/Face/#function-details","title":"Function Details","text":""},{"location":"api/math/Face/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const</p> <p>Checks if the face is valid.</p> Return <code>true</code> if the face is valid, <code>false</code> otherwise."},{"location":"api/math/Orientation/","title":"Orientation","text":"<p>struct  Orientation</p> <p>Represents an orientation in 3D space.</p> <p>This class provides methods for converting between different coordinate systems and manipulating orientations. The orientation can be built from yaw, pitch, and roll angles, or from a forward and up vector. Once built, the orientation is stored in the ZYX representation (yaw, pitch, roll), in the ZYZ representation, in the quaternion representation, and in forward-up vectors representation.</p>"},{"location":"api/math/Orientation/#functions","title":"Functions","text":"Name Description Zero Gets a zero Orientation instance. Orientation Constructs an Orientation instance with the given yaw, pitch, and roll angles. Orientation Constructs an Orientation instance from a forward and up vector. Orientation Constructs an Orientation instance from a quaternion. GetYaw The angle of rotation around the Z-axis in radians following the ZYX convention. GetPitch The angle of rotation around the Y-axis in radians following the ZYX convention. GetRoll The angle of rotation around the X-axis in radians following the ZYX convention. GetForward The forward vector of the orientation. GetUp The up vector of the orientation. GetAlpha The angle of rotation around the Z-axis in radians following the ZYZ convention. GetBeta The angle of rotation around the Y-axis in radians following the ZYZ convention. GetGamma The angle of rotation around the new Z-axis in radians following the ZYZ convention. GetQuaternion The quaternion representation of the orientation. GetRotationMatrix Converts the orientation to a rotation matrix. GetLookAtMatrix Converts the orientation to a look-at matrix."},{"location":"api/math/Orientation/#function-details","title":"Function Details","text":""},{"location":"api/math/Orientation/#getalpha","title":"GetAlpha","text":"<p>[[nodiscard]] inline AmReal32 GetAlpha() const</p> <p>The angle of rotation around the Z-axis in radians following the ZYZ convention.</p>"},{"location":"api/math/Orientation/#getbeta","title":"GetBeta","text":"<p>[[nodiscard]] inline AmReal32 GetBeta() const</p> <p>The angle of rotation around the Y-axis in radians following the ZYZ convention.</p>"},{"location":"api/math/Orientation/#getforward","title":"GetForward","text":"<p>[[nodiscard]] inline AmVec3 GetForward() const</p> <p>The forward vector of the orientation.</p>"},{"location":"api/math/Orientation/#getgamma","title":"GetGamma","text":"<p>[[nodiscard]] inline AmReal32 GetGamma() const</p> <p>The angle of rotation around the new Z-axis in radians following the ZYZ convention.</p>"},{"location":"api/math/Orientation/#getlookatmatrix","title":"GetLookAtMatrix","text":"<p>[[nodiscard]] AmMat4 GetLookAtMatrix(AmVec3 eye) const</p> <p>Converts the orientation to a look-at matrix.</p> Parameter <code>eye</code> The eye's location. Return A look-at matrix representing the current orientation, with the eye at the given location."},{"location":"api/math/Orientation/#getpitch","title":"GetPitch","text":"<p>[[nodiscard]] inline AmReal32 GetPitch() const</p> <p>The angle of rotation around the Y-axis in radians following the ZYX convention.</p>"},{"location":"api/math/Orientation/#getquaternion","title":"GetQuaternion","text":"<p>[[nodiscard]] inline AmQuat GetQuaternion() const</p> <p>The quaternion representation of the orientation.</p>"},{"location":"api/math/Orientation/#getroll","title":"GetRoll","text":"<p>[[nodiscard]] inline AmReal32 GetRoll() const</p> <p>The angle of rotation around the X-axis in radians following the ZYX convention.</p>"},{"location":"api/math/Orientation/#getrotationmatrix","title":"GetRotationMatrix","text":"<p>[[nodiscard]] AmMat4 GetRotationMatrix() const</p> <p>Converts the orientation to a rotation matrix.</p> Return A rotation matrix representing the current orientation."},{"location":"api/math/Orientation/#getup","title":"GetUp","text":"<p>[[nodiscard]] inline AmVec3 GetUp() const</p> <p>The up vector of the orientation.</p>"},{"location":"api/math/Orientation/#getyaw","title":"GetYaw","text":"<p>[[nodiscard]] inline AmReal32 GetYaw() const</p> <p>The angle of rotation around the Z-axis in radians following the ZYX convention.</p>"},{"location":"api/math/Orientation/#orientation_1","title":"Orientation","text":"<p>Orientation(AmReal32 yaw, AmReal32 pitch, AmReal32 roll)</p> <p>Constructs an Orientation instance with the given yaw, pitch, and roll angles.</p> Parameter <code>yaw</code> The angle of rotation around the X-axis in radians. Parameter <code>pitch</code> The angle of rotation around the Y-axis in radians. Parameter <code>roll</code> The angle of rotation around the Z-axis in radians. <p>Orientation(AmVec3 forward, AmVec3 up)</p> <p>Constructs an Orientation instance from a forward and up vector.</p> Parameter <code>forward</code> The forward vector of the orientation. Parameter <code>up</code> The up vector of the orientation. <p>Orientation(AmQuat quaternion)</p> <p>Constructs an Orientation instance from a quaternion.</p> Parameter <code>quaternion</code> The quaternion representing the orientation."},{"location":"api/math/Orientation/#zero","title":"Zero","text":"<p>static Orientation Zero()</p> <p>Gets a zero Orientation instance.</p> Return A zero Orientation instance. 0 for all angles."},{"location":"api/math/Shape/","title":"Shape","text":"<p>class  Shape</p> <p>A geometrical closed 3D shape.</p> <p>A <code>Shape</code> defines a zone in the world where game objects (listener, sound sources, entities, etc.) can be localized. Shapes are used in many places of the engine, like to define a sound attenuation shape, or to build a room.</p>"},{"location":"api/math/Shape/#functions","title":"Functions","text":"Name Description Create Creates a new <code>Shape</code> from a definition. Shape Constructs a new <code>Shape</code>. ~Shape Default destructor. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. Contains Checks if the given entity is contained in this shape. Contains Checks if the given listener is contained in this shape. Contains Checks if the given position is contained in this shape. SetLocation Sets the location of this shape in the 3D environment. SetOrientation Sets the orientation of this shape. GetOrientation Gets the orientation of this shape. GetLookAt Gets the LookAt transformation matrix for this shape. GetLocation Gets the position of this shape in the 3D environment. GetDirection Gets the position of this shape in the 3D environment. GetUp Gets the up vector of the zone."},{"location":"api/math/Shape/#function-details","title":"Function Details","text":""},{"location":"api/math/Shape/#contains","title":"Contains","text":"<p>[[nodiscard]] virtual bool Contains(const Entity&amp; entity)</p> <p>Checks if the given entity is contained in this shape.</p> Parameter <code>entity</code> The entity to check. Return <code>true</code> if the shape contains the entity, <code>false</code> otherwise. <p>[[nodiscard]] virtual bool Contains(const Listener&amp; listener)</p> <p>Checks if the given listener is contained in this shape.</p> Parameter <code>listener</code> The listener to check. Return <code>true</code> if the shape contains the listener, <code>false</code> otherwise. <p>[[nodiscard]] virtual bool Contains(const AmVec3&amp; location) = 0</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return <code>true</code> if the shape contains the given position, <code>false</code> otherwise."},{"location":"api/math/Shape/#create","title":"Create","text":"<p>static std::shared_ptr&lt;Shape&gt; Create(const ShapeDefinition* definition)</p> <p>Creates a new <code>Shape</code> from a definition.</p> Parameter <code>definition</code> The definition of the shape generated from a flatbuffer binary. <p>Warning</p> <p>This method is intended for internal usage only.</p>"},{"location":"api/math/Shape/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the position of this shape in the 3D environment.</p> Return The shape's position."},{"location":"api/math/Shape/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the position of this shape in the 3D environment.</p> Return The shape's position."},{"location":"api/math/Shape/#getlookat","title":"GetLookAt","text":"<p>[[nodiscard]] const AmMat4&amp; GetLookAt() const</p> <p>Gets the LookAt transformation matrix for this shape.</p> Return The look-at transformation matrix."},{"location":"api/math/Shape/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the orientation of this shape.</p> Return The orientation of this shape."},{"location":"api/math/Shape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] virtual AmReal32 GetShortestDistanceToEdge(const Entity&amp; entity)</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>entity</code> The entity from which calculate the distance. Return The shortest distance from the entity location to the edge of this shape. If negative, the given entity in outside the shape. <p>[[nodiscard]] virtual AmReal32 GetShortestDistanceToEdge(const Listener&amp; listener)</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>listener</code> The listener from which calculate the distance. Return The shortest distance from the listener location to the edge of this shape. If negative, the given listener in outside the shape. <p>[[nodiscard]] virtual AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) = 0</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/math/Shape/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of the zone.</p> Return The up vector."},{"location":"api/math/Shape/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location)</p> <p>Sets the location of this shape in the 3D environment.</p> Parameter <code>location</code> The shape location."},{"location":"api/math/Shape/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation)</p> <p>Sets the orientation of this shape.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/math/Shape/#shape_1","title":"Shape","text":"<p>Shape()</p> <p>Constructs a new <code>Shape</code>.</p>"},{"location":"api/math/Shape/#shape_2","title":"~Shape","text":"<p>virtual ~Shape() = default</p> <p>Default destructor.</p>"},{"location":"api/math/SphereShape/","title":"SphereShape","text":"<p>class  SphereShape : public Shape</p> <p>A sphere shape, defined by a radius.</p>"},{"location":"api/math/SphereShape/#operators","title":"Operators","text":"Name Description operator== Compares this shape with another shape for equality. operator!= Compares this shape with another shape for inequality."},{"location":"api/math/SphereShape/#functions","title":"Functions","text":"Name Description Create Creates a new SphereShape from a definition. SphereShape Constructs a new <code>SphereShape</code>. GetRadius Gets the radius of the sphere shape. GetDiameter Gets the diameter of the sphere shape. SetRadius Sets the radius of the sphere shape. GetShortestDistanceToEdge Gets the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape."},{"location":"api/math/SphereShape/#operator-details","title":"Operator Details","text":""},{"location":"api/math/SphereShape/#operator","title":"operator!=","text":"<p>bool operator!=(const SphereShape&amp; other) const</p> <p>Compares this shape with another shape for inequality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>false</code> if the shapes are equal, <code>true</code> otherwise."},{"location":"api/math/SphereShape/#operator_1","title":"operator==","text":"<p>bool operator==(const SphereShape&amp; other) const</p> <p>Compares this shape with another shape for equality.</p> <p>Note</p> <p>Shapes are equal if they have the same dimensions, the position, and the same orientation.</p> Parameter <code>other</code> The other shape to compare with. Return <code>true</code> if the shapes are equal, <code>false</code> otherwise."},{"location":"api/math/SphereShape/#function-details","title":"Function Details","text":""},{"location":"api/math/SphereShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/math/SphereShape/#create","title":"Create","text":"<p>static std::shared_ptr&lt;SphereShape&gt; Create(const SphereShapeDefinition* definition)</p> <p>Creates a new SphereShape from a definition.</p> Parameter <code>definition</code> The definition of the shape generated from a flatbuffer binary. <p>Warning</p> <p>This method is intended for internal usage only.</p>"},{"location":"api/math/SphereShape/#getdiameter","title":"GetDiameter","text":"<p>[[nodiscard]] AmReal32 GetDiameter() const</p> <p>Gets the diameter of the sphere shape.</p> Return The sphere's diameter."},{"location":"api/math/SphereShape/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] AmReal32 GetRadius() const</p> <p>Gets the radius of the sphere shape.</p> Return The sphere's radius."},{"location":"api/math/SphereShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Gets the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/math/SphereShape/#setradius","title":"SetRadius","text":"<p>void SetRadius(AmReal32 radius)</p> <p>Sets the radius of the sphere shape.</p> Parameter <code>radius</code> The sphere's radius."},{"location":"api/math/SphereShape/#sphereshape_1","title":"SphereShape","text":"<p>explicit SphereShape(AmReal32 radius)</p> <p>Constructs a new <code>SphereShape</code>.</p> Parameter <code>radius</code> The sphere's radius."},{"location":"api/math/SphereZone/","title":"SphereZone","text":"<p>class  SphereZone : public Zone</p> <p>A <code>Zone</code> built with an inner <code>SphereShape</code> and an outer <code>SphereShape</code>.</p>"},{"location":"api/math/SphereZone/#functions","title":"Functions","text":"Name Description SphereZone Constructs a new <code>SphereZone</code>. GetFactor @inherit"},{"location":"api/math/SphereZone/#function-details","title":"Function Details","text":""},{"location":"api/math/SphereZone/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] AmReal32 GetFactor(const AmVec3&amp; position) final</p> <p>@inherit</p>"},{"location":"api/math/SphereZone/#spherezone_1","title":"SphereZone","text":"<p>SphereZone(std::shared_ptr&lt;SphereShape&gt; inner, std::shared_ptr&lt;SphereShape&gt; outer)</p> <p>Constructs a new <code>SphereZone</code>.</p> Parameter <code>inner</code> The inner <code>SphereShape</code>. Parameter <code>outer</code> The outer <code>SphereShape</code>."},{"location":"api/math/SphericalPosition/","title":"SphericalPosition","text":"<p>struct  SphericalPosition</p> <p>Spherical coordinates representation.</p> <p>Describes the coordinates of a point on a sphere's surface, relative to the center of that sphere.</p>"},{"location":"api/math/SphericalPosition/#operators","title":"Operators","text":"Name Description operator== Compares two spherical positions for equality. operator!= Compares two spherical positions for inequality."},{"location":"api/math/SphericalPosition/#functions","title":"Functions","text":"Name Description FromWorldSpace Creates a spherical position from a 3D position in world space. ForHRTF Creates a spherical position from a 3D position in world space. FromDegrees Creates a spherical position from given azimuth and elevation in degrees. SphericalPosition Creates a spherical position with default values (azimuth = 0, elevation = 0, radius = 1). SphericalPosition Creates a spherical position with given azimuth, elevation, and radius. FlipAzimuth Flips the azimuth of the spherical position and returns a new instance. Rotate Rotates the spherical position with the given rotation and returns a new instance. ToCartesian Converts the spherical position to a 3D position in world space. GetAzimuth Gets the azimuth in radians of the spherical position. GetElevation Gets the elevation in radians of the spherical position. GetRadius Gets the distance from the center of the sphere to the point. SetAzimuth Sets the azimuth in radians of the spherical position. SetElevation Sets the elevation in radians of the spherical position. SetRadius Sets the distance from the center of the sphere to the point."},{"location":"api/math/SphericalPosition/#operator-details","title":"Operator Details","text":""},{"location":"api/math/SphericalPosition/#operator","title":"operator!=","text":"<p>bool operator!=(const SphericalPosition&amp; other) const</p> <p>Compares two spherical positions for inequality.</p> Parameter <code>other</code> The other spherical position to compare with. Return <code>true</code> if the spherical positions are not equal, <code>false</code> otherwise."},{"location":"api/math/SphericalPosition/#operator_1","title":"operator==","text":"<p>bool operator==(const SphericalPosition&amp; other) const</p> <p>Compares two spherical positions for equality.</p> Parameter <code>other</code> The other spherical position to compare with. Return <code>true</code> if the spherical positions are equal, <code>false</code> otherwise."},{"location":"api/math/SphericalPosition/#function-details","title":"Function Details","text":""},{"location":"api/math/SphericalPosition/#flipazimuth","title":"FlipAzimuth","text":"<p>[[nodiscard]] SphericalPosition FlipAzimuth() const</p> <p>Flips the azimuth of the spherical position and returns a new instance.</p> Return A new spherical position with the azimuth flipped."},{"location":"api/math/SphericalPosition/#forhrtf","title":"ForHRTF","text":"<p>static SphericalPosition ForHRTF(const AmVec3&amp; position)</p> <p>Creates a spherical position from a 3D position in world space.</p> <p>This method is optimized for use in HRTF (Head-Related Transfer Function) space, where the azimuth is rotated 90 degrees around the z-axis.</p> Parameter <code>position</code> The position in world space."},{"location":"api/math/SphericalPosition/#fromdegrees","title":"FromDegrees","text":"<p>static SphericalPosition FromDegrees(AmReal32 azimuthDegrees, AmReal32 elevationDegrees, AmReal32 radius = 1.0f)</p> <p>Creates a spherical position from given azimuth and elevation in degrees.</p> Parameter <code>azimuthDegrees</code> The azimuth in degrees. Parameter <code>elevationDegrees</code> The elevation in degrees. Parameter <code>radius</code> The distance from the center of the sphere to the point. Return A spherical position representing the given azimuth and elevation in degrees."},{"location":"api/math/SphericalPosition/#fromworldspace","title":"FromWorldSpace","text":"<p>static SphericalPosition FromWorldSpace(const AmVec3&amp; position)</p> <p>Creates a spherical position from a 3D position in world space.</p> Parameter <code>position</code> The position in world space."},{"location":"api/math/SphericalPosition/#getazimuth","title":"GetAzimuth","text":"<p>[[nodiscard]] inline AmReal32 GetAzimuth() const</p> <p>Gets the azimuth in radians of the spherical position.</p> Return The azimuth in radians of the spherical position."},{"location":"api/math/SphericalPosition/#getelevation","title":"GetElevation","text":"<p>[[nodiscard]] inline AmReal32 GetElevation() const</p> <p>Gets the elevation in radians of the spherical position.</p> Return The elevation in radians of the spherical position."},{"location":"api/math/SphericalPosition/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] inline AmReal32 GetRadius() const</p> <p>Gets the distance from the center of the sphere to the point.</p> Return The distance from the center of the sphere to the point."},{"location":"api/math/SphericalPosition/#rotate","title":"Rotate","text":"<p>[[nodiscard]] SphericalPosition Rotate(AmQuat rotation) const</p> <p>Rotates the spherical position with the given rotation and returns a new instance.</p> Parameter <code>rotation</code> The rotation to apply to the spherical position. Return A rotated spherical position."},{"location":"api/math/SphericalPosition/#setazimuth","title":"SetAzimuth","text":"<p>inline void SetAzimuth(AmReal32 azimuth)</p> <p>Sets the azimuth in radians of the spherical position.</p> Parameter <code>azimuth</code> The new azimuth in radians."},{"location":"api/math/SphericalPosition/#setelevation","title":"SetElevation","text":"<p>inline void SetElevation(AmReal32 elevation)</p> <p>Sets the elevation in radians of the spherical position.</p> Parameter <code>elevation</code> The new elevation in radians."},{"location":"api/math/SphericalPosition/#setradius","title":"SetRadius","text":"<p>inline void SetRadius(AmReal32 radius)</p> <p>Sets the distance from the center of the sphere to the point.</p> Parameter <code>radius</code> The new distance from the center of the sphere to the point."},{"location":"api/math/SphericalPosition/#sphericalposition_1","title":"SphericalPosition","text":"<p>SphericalPosition() = default</p> <p>Creates a spherical position with default values (azimuth = 0, elevation = 0, radius = 1).</p> <p>SphericalPosition(AmReal32 azimuth, AmReal32 elevation, AmReal32 radius = 1.0f)</p> <p>Creates a spherical position with given azimuth, elevation, and radius.</p> Parameter <code>azimuth</code> The rotation around the z-axis in radians. Parameter <code>elevation</code> The rotation around the x-axis in radians. Parameter <code>radius</code> The distance from the center of the sphere to the point."},{"location":"api/math/SphericalPosition/#tocartesian","title":"ToCartesian","text":"<p>[[nodiscard]] AmVec3 ToCartesian() const</p> <p>Converts the spherical position to a 3D position in world space.</p> Return A 3D position in world space corresponding to the spherical position."},{"location":"api/math/Zone/","title":"Zone","text":"<p>class  Zone</p> <p>A tuple of shapes that represents a zone in the world.</p> <p>This shape is mainly used by attenuations and environments. It's composed of an inner <code>Shape</code> and an outer <code>Shape</code>. The inner shape is the place where the factor is equal to one all the time. The outer shape is the place where the factor increase or decrease according to the shortest distance of the game object from the outer edge.</p> <p>If the game object is outside the outer shape (thus, outside the zone), the factor is zero.</p>"},{"location":"api/math/Zone/#variables","title":"Variables","text":"Name Description m_innerShape The inner shape of the zone. m_outerShape The outer shape of the zone."},{"location":"api/math/Zone/#functions","title":"Functions","text":"Name Description Zone Creates a new <code>Zone</code> from the given inner and outer shapes. ~Zone Default destructor. GetFactor Gets the factor according to the position of the given entity in the zone. GetFactor Gets the factor according to the position of the given listener in the zone. GetFactor Gets the factor according to the given position in the zone. SetLocation Sets the location of this zone in the 3D environment. GetLocation Gets the current location of this zone. SetOrientation Sets the orientation of this zone. GetOrientation Gets the orientation of this zone. GetDirection Gets the direction vector of the zone. GetUp Gets the up vector of the zone."},{"location":"api/math/Zone/#variable-details","title":"Variable Details","text":""},{"location":"api/math/Zone/#m_innershape","title":"m_innerShape","text":"<p>std::shared_ptr&lt;Shape&gt; m_innerShape</p> <p>The inner shape of the zone.</p>"},{"location":"api/math/Zone/#m_outershape","title":"m_outerShape","text":"<p>std::shared_ptr&lt;Shape&gt; m_outerShape</p> <p>The outer shape of the zone.</p>"},{"location":"api/math/Zone/#function-details","title":"Function Details","text":""},{"location":"api/math/Zone/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the direction vector of the zone.</p> Return The direction vector."},{"location":"api/math/Zone/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] virtual inline AmReal32 GetFactor(const Entity&amp; entity)</p> <p>Gets the factor according to the position of the given entity in the zone.</p> Parameter <code>entity</code> The entity to get the factor for. Return The factor. <p>Note</p> <p>The factor is a value in the range [0, 1].</p> <p>[[nodiscard]] virtual inline AmReal32 GetFactor(const Listener&amp; listener)</p> <p>Gets the factor according to the position of the given listener in the zone.</p> Parameter <code>listener</code> The listener to get the factor for. Return The factor. <p>Note</p> <p>The factor is a value in the range [0, 1].</p> <p>[[nodiscard]] virtual AmReal32 GetFactor(const AmVec3&amp; position) = 0</p> <p>Gets the factor according to the given position in the zone.</p> Parameter <code>position</code> The position in the zone to get the factor for. Return The factor. <p>Note</p> <p>The factor is a value in the range [0, 1].</p>"},{"location":"api/math/Zone/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this zone.</p> Return The current location of this zone."},{"location":"api/math/Zone/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the orientation of this zone.</p> Return The orientation of this zone."},{"location":"api/math/Zone/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of the zone.</p> Return The up vector."},{"location":"api/math/Zone/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location)</p> <p>Sets the location of this zone in the 3D environment.</p> Parameter <code>location</code> The zone location."},{"location":"api/math/Zone/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation)</p> <p>Sets the orientation of this zone.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/math/Zone/#zone_1","title":"Zone","text":"<p>explicit Zone(std::shared_ptr&lt;Shape&gt; inner, std::shared_ptr&lt;Shape&gt; outer)</p> <p>Creates a new <code>Zone</code> from the given inner and outer shapes.</p> Parameter <code>inner</code> The inner shape. Parameter <code>outer</code> The outer shape."},{"location":"api/math/Zone/#zone_2","title":"~Zone","text":"<p>virtual ~Zone()</p> <p>Default destructor.</p>"},{"location":"api/memory/","title":"Memory","text":"<p>Memory management and allocation</p>"},{"location":"api/memory/#types","title":"Types","text":"Name Description AmFakeSharedPtr Fake shared pointer. AmSharedPtr Shared pointer type. AmUniquePtr Unique pointer type. DefaultMemoryAllocator Default memory allocator. MemoryAllocator Memory Allocator Interface. MemoryPoolStats Collects the statistics about the memory allocations * for a specific pool ScopedMemoryAllocation Allocates a block of memory with the given size in the given pool. am_delete Deleter for unique/shared pointers. eMemoryPoolKind Available memory pools."},{"location":"api/memory/#macros","title":"Macros","text":"Name Description amMemory Shortcut access to the Amplitude's memory manager instance. amdelete Deallocates a memory allocated with @ref amnew amnew. amfree Deallocates a block of memory from the default memory pool. ammalign Allocates a block of memory from the default memory pool. ammalloc Allocates a block of memory from the default memory pool. amnew Allocates memory for a new object in the Default pool using the memory manager. ampooldelete Deallocates a memory allocated with @ref ampoolnew ampoolnew. ampoolfree Deallocates a block of memory from the specified memory pool. ampoolmalign Allocates an aligned block of memory from the specified memory pool. ampoolmalloc Allocates a block of memory from the specified memory pool. ampoolnew Allocates memory for a new object in the given memory pool. ampoolrealign Reallocates an aligned block of memory from the specified memory pool. ampoolrealloc Reallocates a block of memory from the specified memory pool. amrealign Reallocates an aligned block of memory from the default memory pool. amrealloc Reallocates a block of memory from the default memory pool."},{"location":"api/memory/#macro-details","title":"Macro Details","text":""},{"location":"api/memory/#ammemory","title":"amMemory","text":"<p>#define amMemory</p> <p>Shortcut access to the Amplitude's memory manager instance.</p>"},{"location":"api/memory/#amdelete","title":"amdelete","text":"<p>#define amdelete(type, ptr)</p> <p>Deallocates a memory allocated with @ref amnew amnew.</p> <p>This will call the object's destructor before the memory is freed.</p> Parameter <code>_type_</code> The type of the object to deallocate. Parameter <code>_ptr_</code> The pointer to the object to deallocate. See amnew"},{"location":"api/memory/#amfree","title":"amfree","text":"<p>#define amfree(ptr)</p> <p>Deallocates a block of memory from the default memory pool.</p> Parameter <code>_ptr_</code> The pointer to deallocate. See ampoolfree"},{"location":"api/memory/#ammalign","title":"ammalign","text":"<p>#define ammalign(size, alignment)</p> <p>Allocates a block of memory from the default memory pool.</p> Parameter <code>_size_</code> The size of the memory to allocate. Parameter <code>_alignment_</code> The alignment of the memory to allocate. See ampoolmalign"},{"location":"api/memory/#ammalloc","title":"ammalloc","text":"<p>#define ammalloc(size)</p> <p>Allocates a block of memory from the default memory pool.</p> Parameter <code>_size_</code> The size of the memory to allocate. See ampoolmalloc"},{"location":"api/memory/#amnew","title":"amnew","text":"<p>#define amnew(type, ...)</p> <p>Allocates memory for a new object in the Default pool using the memory manager.</p> <p>This will create a new memory allocation in the Default pool. The allocated memory will be freed when the object is destroyed using amdelete.</p> Parameter <code>_type_</code> The type of the object to allocate. Parameter <code>Additional</code> arguments to pass to the constructor of the object. See amdelete"},{"location":"api/memory/#ampooldelete","title":"ampooldelete","text":"<p>#define ampooldelete(pool, type, ptr)                                                                                                \\</p> <p>Deallocates a memory allocated with @ref ampoolnew ampoolnew.</p> <p>This will call the object's destructor before to free the memory.</p> Parameter <code>_pool_</code> The memory pool to deallocate from. Parameter <code>_type_</code> The type of the object to deallocate. Parameter <code>_ptr_</code> The pointer to the object to deallocate. See ampoolnew"},{"location":"api/memory/#ampoolfree","title":"ampoolfree","text":"<p>#define ampoolfree(pool, ptr)</p> <p>Deallocates a block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to deallocate from. Parameter <code>_ptr_</code> The pointer to deallocate."},{"location":"api/memory/#ampoolmalign","title":"ampoolmalign","text":"<p>#define ampoolmalign(pool, size, alignment)</p> <p>Allocates an aligned block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to deallocate from. Parameter <code>_size_</code> The size of the memory to allocate. Parameter <code>_alignment_</code> The alignment of the memory to allocate."},{"location":"api/memory/#ampoolmalloc","title":"ampoolmalloc","text":"<p>#define ampoolmalloc(pool, size)</p> <p>Allocates a block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to allocate from. Parameter <code>_size_</code> The size of the memory to allocate."},{"location":"api/memory/#ampoolnew","title":"ampoolnew","text":"<p>#define ampoolnew(pool, type, ...)</p> <p>Allocates memory for a new object in the given memory pool.</p> <p>This will create a new memory allocation in the given pool. The allocated memory will be freed when the object is destroyed using ampooldelete.</p> Parameter <code>_pool_</code> The memory pool to allocate from. Parameter <code>_type_</code> The type of the object to allocate. Parameter <code>Additional</code> arguments to pass to the constructor of the object. See ampooldelete"},{"location":"api/memory/#ampoolrealign","title":"ampoolrealign","text":"<p>#define ampoolrealign(pool, ptr, size, alignment)</p> <p>Reallocates an aligned block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to reallocate from. Should be the same as the one used to allocate the memory. Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory. Parameter <code>_alignment_</code> The alignment of the memory to reallocate."},{"location":"api/memory/#ampoolrealloc","title":"ampoolrealloc","text":"<p>#define ampoolrealloc(pool, ptr, size)</p> <p>Reallocates a block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to reallocate from. Should be the same as the one used to allocate the memory. Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory."},{"location":"api/memory/#amrealign","title":"amrealign","text":"<p>#define amrealign(ptr, size, alignment)                                                                                              \\</p> <p>Reallocates an aligned block of memory from the default memory pool.</p> Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory. Parameter <code>_alignment_</code> The alignment of the memory to reallocate. See ampoolrealign"},{"location":"api/memory/#amrealloc","title":"amrealloc","text":"<p>#define amrealloc(ptr, size)</p> <p>Reallocates a block of memory from the default memory pool.</p> Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory. See ampoolrealloc"},{"location":"api/memory/AmFakeSharedPtr/","title":"AmFakeSharedPtr","text":"<p>template&lt;typename T&gt; struct AmFakeSharedPtr : public std::shared_ptr&lt;T&gt;</p> <p>Fake shared pointer.</p> <p>This is a fake shared pointer that does nothing on deletion. It is used to make use of <code>AmSharedPtr</code> in places where a shared pointer is required, but the object is not owned by the shared pointer.</p> Template parameter <code>T</code> The type of the object being wrapped. See AmSharedPtr"},{"location":"api/memory/AmFakeSharedPtr/#functions","title":"Functions","text":"Name Description AmFakeSharedPtr Creates a new fake shared pointer."},{"location":"api/memory/AmFakeSharedPtr/#function-details","title":"Function Details","text":""},{"location":"api/memory/AmFakeSharedPtr/#amfakesharedptr_1","title":"AmFakeSharedPtr","text":"<p>AmFakeSharedPtr(T* ptr)</p> <p>Creates a new fake shared pointer.</p> Parameter <code>ptr</code> The pointer to wrap."},{"location":"api/memory/AmSharedPtr/","title":"AmSharedPtr","text":"<p>template&lt;class T, eMemoryPoolKind Pool = eMemoryPoolKind_Default&gt; class AmSharedPtr : public std::shared_ptr&lt;T&gt;</p> <p>Shared pointer type.</p> Template parameter <code>T</code> The type of the pointer to allocate. Template parameter <code>Pool</code> The memory pool to allocate the pointer from."},{"location":"api/memory/AmSharedPtr/#functions","title":"Functions","text":"Name Description Make Construct a shared pointer from the given parameters. AmSharedPtr Creates a new shared pointer."},{"location":"api/memory/AmSharedPtr/#function-details","title":"Function Details","text":""},{"location":"api/memory/AmSharedPtr/#amsharedptr_1","title":"AmSharedPtr","text":"<p>AmSharedPtr(T* ptr)</p> <p>Creates a new shared pointer.</p> Parameter <code>ptr</code> The pointer to wrap."},{"location":"api/memory/AmSharedPtr/#make","title":"Make","text":"<p>template&lt;class... Args&gt; static AmSharedPtr&lt;T, Pool&gt; Make(Args&amp;&amp;... args)</p> <p>Construct a shared pointer from the given parameters.</p> Parameter <code>args</code> The parameters to pass to the constructor. Return The created shared pointer."},{"location":"api/memory/AmUniquePtr/","title":"AmUniquePtr","text":"<p>template&lt;class T, eMemoryPoolKind Pool = eMemoryPoolKind_Default&gt; using AmUniquePtr = std::unique_ptr&lt;T, am_delete&lt;T, Pool&gt;&gt;</p> <p>Unique pointer type.</p> Template parameter <code>T</code> The type of the pointer to allocate. Template parameter <code>Pool</code> The memory pool to allocate the pointer from."},{"location":"api/memory/DefaultMemoryAllocator/","title":"DefaultMemoryAllocator","text":"<p>class  DefaultMemoryAllocator final : public MemoryAllocator</p> <p>Default memory allocator.</p> <p>This implementation uses a fast and efficient \"proxy\" allocator designed to handle many small allocations/deallocations in heavy multithreaded scenarios.</p>"},{"location":"api/memory/DefaultMemoryAllocator/#functions","title":"Functions","text":"Name Description DefaultMemoryAllocator Initializes a new default memory allocator. ~DefaultMemoryAllocator Destroy the allocator. Malloc @inherit Realloc @inherit Malign @inherit Realign @inherit Free @inherit SizeOf @inherit"},{"location":"api/memory/DefaultMemoryAllocator/#function-details","title":"Function Details","text":""},{"location":"api/memory/DefaultMemoryAllocator/#defaultmemoryallocator_1","title":"DefaultMemoryAllocator","text":"<p>DefaultMemoryAllocator(AmUInt32 bucketsCount, AmSize bucketSizeInBytes)</p> <p>Initializes a new default memory allocator.</p> <p>This constructor will create the given number of allocator buckets, each of the given size.</p> Parameter <code>bucketsCount</code> The number of allocator buckets to create. Parameter <code>bucketSizeInBytes</code> The size of each allocator bucket in bytes."},{"location":"api/memory/DefaultMemoryAllocator/#free","title":"Free","text":"<p>void Free(eMemoryPoolKind pool, AmVoidPtr address) override</p> <p>@inherit</p>"},{"location":"api/memory/DefaultMemoryAllocator/#malign","title":"Malign","text":"<p>AmVoidPtr Malign(eMemoryPoolKind pool, AmSize size, AmUInt32 alignment) override</p> <p>@inherit</p>"},{"location":"api/memory/DefaultMemoryAllocator/#malloc","title":"Malloc","text":"<p>AmVoidPtr Malloc(eMemoryPoolKind pool, AmSize size) override</p> <p>@inherit</p>"},{"location":"api/memory/DefaultMemoryAllocator/#realign","title":"Realign","text":"<p>AmVoidPtr Realign(eMemoryPoolKind pool, AmVoidPtr address, AmSize size, AmUInt32 alignment) override</p> <p>@inherit</p>"},{"location":"api/memory/DefaultMemoryAllocator/#realloc","title":"Realloc","text":"<p>AmVoidPtr Realloc(eMemoryPoolKind pool, AmVoidPtr address, AmSize size) override</p> <p>@inherit</p>"},{"location":"api/memory/DefaultMemoryAllocator/#sizeof","title":"SizeOf","text":"<p>AmSize SizeOf(eMemoryPoolKind pool, AmVoidPtr address) override</p> <p>@inherit</p>"},{"location":"api/memory/DefaultMemoryAllocator/#defaultmemoryallocator_2","title":"~DefaultMemoryAllocator","text":"<p>~DefaultMemoryAllocator() override</p> <p>Destroy the allocator.</p>"},{"location":"api/memory/MemoryAllocator/","title":"MemoryAllocator","text":"<p>class  MemoryAllocator</p> <p>Memory Allocator Interface.</p>"},{"location":"api/memory/MemoryAllocator/#functions","title":"Functions","text":"Name Description ~MemoryAllocator Default Destructor. Malloc Allocates a block of memory. Realloc Reallocates a block of memory. Malign Allocates an aligned block of memory. Realign Reallocates an aligned block of memory. Free Deallocates a block of memory. SizeOf Gets the size of the memory at the given address."},{"location":"api/memory/MemoryAllocator/#function-details","title":"Function Details","text":""},{"location":"api/memory/MemoryAllocator/#free","title":"Free","text":"<p>virtual void Free(eMemoryPoolKind pool, AmVoidPtr address) = 0</p> <p>Deallocates a block of memory.</p> Parameter <code>pool</code> The memory pool to deallocate from. Parameter <code>address</code> The pointer to the memory to deallocate."},{"location":"api/memory/MemoryAllocator/#malign","title":"Malign","text":"<p>virtual AmVoidPtr Malign(eMemoryPoolKind pool, AmSize size, AmUInt32 alignment) = 0</p> <p>Allocates an aligned block of memory.</p> Parameter <code>pool</code> The memory pool to allocate from. Parameter <code>size</code> The size of the memory to allocate. Parameter <code>alignment</code> The alignment of the memory to allocate. Return A pointer to the allocated memory."},{"location":"api/memory/MemoryAllocator/#malloc","title":"Malloc","text":"<p>virtual AmVoidPtr Malloc(eMemoryPoolKind pool, AmSize size) = 0</p> <p>Allocates a block of memory.</p> Parameter <code>pool</code> The memory pool to allocate from. Parameter <code>size</code> The size of the memory to allocate. Return A pointer to the allocated memory."},{"location":"api/memory/MemoryAllocator/#realign","title":"Realign","text":"<p>virtual AmVoidPtr Realign(eMemoryPoolKind pool, AmVoidPtr address, AmSize size, AmUInt32 alignment) = 0</p> <p>Reallocates an aligned block of memory.</p> Parameter <code>pool</code> The memory pool to reallocate from. Parameter <code>address</code> The pointer to the memory to reallocate. Parameter <code>size</code> The new size of the memory. Parameter <code>alignment</code> The alignment of the memory to reallocate. Return A pointer to the reallocated memory."},{"location":"api/memory/MemoryAllocator/#realloc","title":"Realloc","text":"<p>virtual AmVoidPtr Realloc(eMemoryPoolKind pool, AmVoidPtr address, AmSize size) = 0</p> <p>Reallocates a block of memory.</p> Parameter <code>pool</code> The memory pool to reallocate from. Parameter <code>address</code> The pointer to the memory to reallocate. Parameter <code>size</code> The new size of the memory. Return A pointer to the reallocated memory."},{"location":"api/memory/MemoryAllocator/#sizeof","title":"SizeOf","text":"<p>virtual AmSize SizeOf(eMemoryPoolKind pool, AmVoidPtr address) = 0</p> <p>Gets the size of the memory at the given address.</p> Parameter <code>pool</code> The memory pool to get the size from. Parameter <code>address</code> The address of the memory. Return The size of the memory at the given address."},{"location":"api/memory/MemoryAllocator/#memoryallocator_1","title":"~MemoryAllocator","text":"<p>virtual ~MemoryAllocator() = default</p> <p>Default Destructor.</p>"},{"location":"api/memory/MemoryPoolStats/","title":"MemoryPoolStats","text":"<p>struct  MemoryPoolStats</p> <p>Collects the statistics about the memory allocations      * for a specific pool</p>"},{"location":"api/memory/MemoryPoolStats/#variables","title":"Variables","text":"Name Description pool The pool for which this statistics is for. maxMemoryUsed The maximum total memory used by this pool. allocCount The total count of allocations made on this pool. freeCount The total count of frees made on this pool."},{"location":"api/memory/MemoryPoolStats/#operators","title":"Operators","text":"Name Description operator= Assignment operator."},{"location":"api/memory/MemoryPoolStats/#functions","title":"Functions","text":"Name Description MemoryPoolStats Default constructor. MemoryPoolStats Creates a new <code>MemoryPoolStats</code> object. MemoryPoolStats Copy constructor."},{"location":"api/memory/MemoryPoolStats/#variable-details","title":"Variable Details","text":""},{"location":"api/memory/MemoryPoolStats/#alloccount","title":"allocCount","text":"<p>std::atomic&lt;AmUInt64&gt; allocCount</p> <p>The total count of allocations made on this pool.</p>"},{"location":"api/memory/MemoryPoolStats/#freecount","title":"freeCount","text":"<p>std::atomic&lt;AmUInt64&gt; freeCount</p> <p>The total count of frees made on this pool.</p>"},{"location":"api/memory/MemoryPoolStats/#maxmemoryused","title":"maxMemoryUsed","text":"<p>std::atomic&lt;AmSize&gt; maxMemoryUsed</p> <p>The maximum total memory used by this pool.</p>"},{"location":"api/memory/MemoryPoolStats/#pool","title":"pool","text":"<p>eMemoryPoolKind pool</p> <p>The pool for which this statistics is for.</p>"},{"location":"api/memory/MemoryPoolStats/#operator-details","title":"Operator Details","text":""},{"location":"api/memory/MemoryPoolStats/#operator","title":"operator=","text":"<p>MemoryPoolStats&amp; operator=(const MemoryPoolStats&amp; other)</p> <p>Assignment operator.</p> Parameter <code>other</code> The <code>MemoryPoolStats</code> object to assign from."},{"location":"api/memory/MemoryPoolStats/#function-details","title":"Function Details","text":""},{"location":"api/memory/MemoryPoolStats/#memorypoolstats_1","title":"MemoryPoolStats","text":"<p>MemoryPoolStats()</p> <p>Default constructor.</p> <p>explicit MemoryPoolStats(eMemoryPoolKind pool)</p> <p>Creates a new <code>MemoryPoolStats</code> object.</p> Parameter <code>pool</code> The pool to get the statistics for. <p>MemoryPoolStats(const MemoryPoolStats&amp; copy)</p> <p>Copy constructor.</p> Parameter <code>copy</code> The <code>MemoryPoolStats</code> object to copy from."},{"location":"api/memory/ScopedMemoryAllocation/","title":"ScopedMemoryAllocation","text":"<p>class  ScopedMemoryAllocation</p> <p>Allocates a block of memory with the given size in the given pool.</p> <p>That allocation will be restricted to the current scope, and will be freed automatically when the scope ends.</p>"},{"location":"api/memory/ScopedMemoryAllocation/#functions","title":"Functions","text":"Name Description ScopedMemoryAllocation Default constructor. ScopedMemoryAllocation Creates a new scoped memory allocation. ScopedMemoryAllocation Creates a new scoped aligned memory allocation. ~ScopedMemoryAllocation Releases the allocated memory. PointerOf Gets the allocated memory address. As Converts the allocated memory address to a different type. Address Gets the allocated memory address."},{"location":"api/memory/ScopedMemoryAllocation/#function-details","title":"Function Details","text":""},{"location":"api/memory/ScopedMemoryAllocation/#address","title":"Address","text":"<p>[[nodiscard]] inline AmVoidPtr Address() const</p> <p>Gets the allocated memory address.</p> Return The allocated memory address."},{"location":"api/memory/ScopedMemoryAllocation/#as","title":"As","text":"<p>template&lt;typename T, typename std::enable_if_t&lt;std::is_pointer_v&lt;T&gt;, bool&gt; = false&gt; [[nodiscard]] inline T As() const</p> <p>Converts the allocated memory address to a different type.</p> Return The allocated memory address converted to the specified type."},{"location":"api/memory/ScopedMemoryAllocation/#pointerof","title":"PointerOf","text":"<p>template&lt;typename T&gt; [[nodiscard]] inline T* PointerOf() const</p> <p>Gets the allocated memory address.</p> Return The allocated memory address."},{"location":"api/memory/ScopedMemoryAllocation/#scopedmemoryallocation_1","title":"ScopedMemoryAllocation","text":"<p>ScopedMemoryAllocation() = default</p> <p>Default constructor.</p> <p>ScopedMemoryAllocation(eMemoryPoolKind pool, AmSize size, const char* file, AmUInt32 line)</p> <p>Creates a new scoped memory allocation.</p> Parameter <code>pool</code> The memory pool to allocate from. Parameter <code>size</code> The size of the block to allocate. Parameter <code>file</code> The file in which the allocation was made. Parameter <code>line</code> The line in which the allocation was made. <p>ScopedMemoryAllocation(eMemoryPoolKind pool, AmSize size, AmUInt32 alignment, const char* file, AmUInt32 line)</p> <p>Creates a new scoped aligned memory allocation.</p> Parameter <code>pool</code> The memory pool to allocate from. Parameter <code>size</code> The size of the block to allocate. Parameter <code>alignment</code> The alignment of the block to allocate. Parameter <code>file</code> The file in which the allocation was made. Parameter <code>line</code> The line in which the allocation was made."},{"location":"api/memory/ScopedMemoryAllocation/#scopedmemoryallocation_2","title":"~ScopedMemoryAllocation","text":"<p>~ScopedMemoryAllocation()</p> <p>Releases the allocated memory.</p>"},{"location":"api/memory/am_delete/","title":"am_delete","text":"<p>template&lt;class T, eMemoryPoolKind Pool = eMemoryPoolKind_Default&gt; struct am_delete</p> <p>Deleter for unique/shared pointers.</p> Template parameter <code>T</code> The type of the pointer to delete. Template parameter <code>Pool</code> The memory pool to delete the pointer from. <p>Note</p> <p>This deleter uses the <code>ampooldelete</code> function to delete the pointer.       It is templated to ensure that the correct pool is used.       This allows for a single implementation of the deleter for all pointer types.       The <code>std::unique_ptr</code> and <code>std::shared_ptr</code> will automatically call this deleter when the pointer is deleted.</p> See ampooldelete, AmUniquePtr, AmSharedPtr"},{"location":"api/memory/eMemoryPoolKind/","title":"eMemoryPoolKind","text":"<p>enum eMemoryPoolKind : AmUInt8</p> <p>Available memory pools.</p> eMemoryPoolKind_Engine Amplitude Engine allocations. eMemoryPoolKind_Amplimix Amplimix allocations. eMemoryPoolKind_SoundData Sound data and streams. eMemoryPoolKind_Filtering Filters related allocations. eMemoryPoolKind_Codec Encoding/Decoding allocations. eMemoryPoolKind_IO I/O and filesystem related allocations. eMemoryPoolKind_Default Default allocations pool. Use this when the allocated memory pool is not available. <p>Note</p> <p><code>amnew</code> use this pool to allocate memory from the memory manager.</p> eMemoryPoolKind_COUNT The total number of memory pools."},{"location":"api/mixer/","title":"Mixer","text":"<p>Mixer &amp; Pipeline API</p>"},{"location":"api/mixer/#types","title":"Types","text":"Name Description Amplimix Amplitude Audio Mixer. AmplimixLayer A single layer in the mixer. ConsumerNodeInstance Interface for Amplimix pipeline nodes that can consume audio data from an input buffer. InputNodeInstance Class used to mark the input of the pipeline. MixerNodeInstance Base class for Amplimix pipeline nodes that can mix audio data from multiple input buffers. Node Base class for Amplimix pipeline nodes. NodeInstance An instance of an Amplimix pipeline node. OutputNodeInstance Class used to mark the output of the pipeline. Pipeline A pipeline assembles a set of nodes to process audio data. PipelineInstance Represents an instance of a pipeline for a specific layer. ProcessorNodeInstance Base class for Amplimix pipeline nodes that can process audio data in-place. ProviderNodeInstance Interface for Amplimix pipeline nodes that can provide audio data to an output buffer."},{"location":"api/mixer/#functions","title":"Functions","text":"Name Description AM_CALLBACK Called just after the mixer process audio data."},{"location":"api/mixer/#function-details","title":"Function Details","text":""},{"location":"api/mixer/#am_callback","title":"AM_CALLBACK","text":"<p>AM_CALLBACK(void, AfterMixCallback)(const Amplimix* mixer, const AudioBuffer* buffer, AmUInt32 frames)</p> <p>Called just after the mixer process audio data.</p> Parameter <code>mixer</code> The Amplimix instance. Parameter <code>buffer</code> The audio buffer that has been mixed. Parameter <code>frames</code> The number of audio frames that have been mixed."},{"location":"api/mixer/Amplimix/","title":"Amplimix","text":"<p>class  Amplimix</p> <p>Amplitude Audio Mixer.</p> <p>This class handles processing of audio data by mixing multiple audio sources. The resulting audio stream are next handled by the <code>Driver</code> for playback or recording.</p> See Driver"},{"location":"api/mixer/Amplimix/#functions","title":"Functions","text":"Name Description ~Amplimix Default Destructor. UpdateDevice Saves the information about the rendering audio device. IsInitialized Checks if the mixer is initialized. SetAfterMixCallback Sets the callback function to be called after the audio data is mixed. Mix Processes the audio data by mixing multiple audio sources for the specified number of frames. GetDeviceDescription Gets the description of the rendering audio device."},{"location":"api/mixer/Amplimix/#function-details","title":"Function Details","text":""},{"location":"api/mixer/Amplimix/#getdevicedescription","title":"GetDeviceDescription","text":"<p>[[nodiscard]] virtual const DeviceDescription&amp; GetDeviceDescription() const = 0</p> <p>Gets the description of the rendering audio device.</p> Return The description of the rendering audio device."},{"location":"api/mixer/Amplimix/#isinitialized","title":"IsInitialized","text":"<p>[[nodiscard]] virtual bool IsInitialized() const = 0</p> <p>Checks if the mixer is initialized.</p> Return <code>true</code> if the mixer is initialized, <code>false</code> otherwise."},{"location":"api/mixer/Amplimix/#mix","title":"Mix","text":"<p>virtual AmUInt64 Mix(AudioBuffer** outBuffer, AmUInt64 frameCount) = 0</p> <p>Processes the audio data by mixing multiple audio sources for the specified number of frames.</p> Parameter <code>outBuffer</code> The buffer to store the mixed audio data. Parameter <code>frameCount</code> The number of frames to mix. Return The number of processed frames."},{"location":"api/mixer/Amplimix/#setaftermixcallback","title":"SetAfterMixCallback","text":"<p>virtual void SetAfterMixCallback(AfterMixCallback callback) = 0</p> <p>Sets the callback function to be called after the audio data is mixed.</p> Parameter <code>callback</code> The callback function."},{"location":"api/mixer/Amplimix/#updatedevice","title":"UpdateDevice","text":"<p>virtual void UpdateDevice( AmObjectID deviceID, AmString deviceName, AmUInt32 deviceOutputSampleRate, PlaybackOutputChannels deviceOutputChannels, PlaybackOutputFormat deviceOutputFormat) = 0</p> <p>Saves the information about the rendering audio device.</p> Parameter <code>deviceID</code> The ID of the audio device. Parameter <code>deviceName</code> The name of the audio device. Parameter <code>deviceOutputSampleRate</code> The sample rate of the audio device's output. Parameter <code>deviceOutputChannels</code> The number of audio channels of the audio device's output. Parameter <code>deviceOutputFormat</code> The format of the audio device's output."},{"location":"api/mixer/Amplimix/#amplimix_1","title":"~Amplimix","text":"<p>virtual ~Amplimix() = default</p> <p>Default Destructor.</p>"},{"location":"api/mixer/AmplimixLayer/","title":"AmplimixLayer","text":"<p>class  AmplimixLayer</p> <p>A single layer in the mixer.</p> <p>A mixer layer is a container for audio data and associated properties. Each layer is linked to a single <code>SoundInstance</code>, and manage its life cycle inside <code>Amplimix</code>.</p> See Amplimix"},{"location":"api/mixer/AmplimixLayer/#functions","title":"Functions","text":"Name Description ~AmplimixLayer Default destructor. GetId Gets the unique identifier of the layer. GetStartPosition Gets the start position of the audio data in the layer. GetEndPosition Gets the end position of the audio data in the layer. GetCurrentPosition Gets the current position of the audio data in the layer. GetGain Gets the final gain of the audio data in the layer. GetStereoPan Gets the stereo pan of the audio data in the layer. GetPitch Gets the pitch of the audio data in the layer. GetObstruction Gets the obstruction amount of the audio data in the layer. GetOcclusion Gets the occlusion amount of the audio data in the layer. GetPlaySpeed Gets the play speed of the audio data in the layer. GetLocation Gets the location of the audio data in the layer. GetEntity Gets the entity associated with the audio data in the layer. GetListener Gets the listener currently rendering the audio data in the layer. GetRoom Gets the room in which the audio data in the layer is currently located. GetChannel Gets the channel managing the audio data in the layer. GetBus Gets the bus on which the audio data in the layer is playing. GetSoundFormat Gets the sound format of the audio data in the layer. GetSpatialization Gets the spatialization mode of the audio data in the layer. IsLoopEnabled Checks if the audio data in the layer is looping. IsStreamEnabled Checks if the audio data in the layer is streaming from the file system. GetSound Gets the sound associated with the audio data in the layer. GetEffect Gets the effect associated with the audio data in the layer. GetAttenuation Gets the attenuation associated with the audio data in the layer. GetSampleRate Gets the current sample rate of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#function-details","title":"Function Details","text":""},{"location":"api/mixer/AmplimixLayer/#getattenuation","title":"GetAttenuation","text":"<p>* GetAttenuation() const</p> <p>Gets the attenuation associated with the audio data in the layer.</p> Return The attenuation associated with the audio data in the layer. See Attenuation"},{"location":"api/mixer/AmplimixLayer/#getbus","title":"GetBus","text":"<p>virtual Bus GetBus() const = 0</p> <p>Gets the bus on which the audio data in the layer is playing.</p> Return The bus on which the audio data in the layer is playing. See Bus"},{"location":"api/mixer/AmplimixLayer/#getchannel","title":"GetChannel","text":"<p>virtual Channel GetChannel() const = 0</p> <p>Gets the channel managing the audio data in the layer.</p> <p>Multiple layers can be linked to the same <code>Channel</code>.</p> Return The channel managing the audio data in the layer. See Channel"},{"location":"api/mixer/AmplimixLayer/#getcurrentposition","title":"GetCurrentPosition","text":"<p>virtual AmUInt64 GetCurrentPosition() const = 0</p> <p>Gets the current position of the audio data in the layer.</p> <p>This position is in samples, not bytes. It represents the current offset from the start of the linked sound data, where the mixer is currently playing audio.</p> Return The current playback position of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#geteffect","title":"GetEffect","text":"<p>* GetEffect() const</p> <p>Gets the effect associated with the audio data in the layer.</p> Return The effect associated with the audio data in the layer. See EffectInstance, Effect"},{"location":"api/mixer/AmplimixLayer/#getendposition","title":"GetEndPosition","text":"<p>virtual AmUInt64 GetEndPosition() const = 0</p> <p>Gets the end position of the audio data in the layer.</p> <p>This position is in samples, not bytes. It represents the offset from the start of the linked sound data, where the mixer should stop playing audio.</p> Return The end position of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#getentity","title":"GetEntity","text":"<p>virtual Entity GetEntity() const = 0</p> <p>Gets the entity associated with the audio data in the layer.</p> Return The entity associated with the audio data in the layer. If the layer is not associated with an <code>Entity</code>, an invalid entity is returned. See Entity"},{"location":"api/mixer/AmplimixLayer/#getgain","title":"GetGain","text":"<p>virtual AmReal32 GetGain() const = 0</p> <p>Gets the final gain of the audio data in the layer.</p> Return The final gain of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#getid","title":"GetId","text":"<p>virtual AmUInt32 GetId() const = 0</p> <p>Gets the unique identifier of the layer.</p> Return The unique identifier of the layer."},{"location":"api/mixer/AmplimixLayer/#getlistener","title":"GetListener","text":"<p>virtual Listener GetListener() const = 0</p> <p>Gets the listener currently rendering the audio data in the layer.</p> Return The listener currently rendering the audio data in the layer. If the layer is not associated with a <code>Listener</code>, an invalid listener is returned. See Listener"},{"location":"api/mixer/AmplimixLayer/#getlocation","title":"GetLocation","text":"<p>virtual AmVec3 GetLocation() const = 0</p> <p>Gets the location of the audio data in the layer.</p> <p>The location is expressed as a 3D vector in the global space. For sound instances linked to an <code>Entity</code>, the location of that entity is returned instead.</p> Return The location of the audio data in the layer. See Entity"},{"location":"api/mixer/AmplimixLayer/#getobstruction","title":"GetObstruction","text":"<p>virtual AmReal32 GetObstruction() const = 0</p> <p>Gets the obstruction amount of the audio data in the layer.</p> <p>This value is useful only when the layer is associated with a sound instance that has spatialization enabled. You can update this value using the <code>SetObstruction</code> method from the <code>Entity</code> this layer is associated with.</p> Return The obstruction amount of the audio data in the layer. See Entity"},{"location":"api/mixer/AmplimixLayer/#getocclusion","title":"GetOcclusion","text":"<p>virtual AmReal32 GetOcclusion() const = 0</p> <p>Gets the occlusion amount of the audio data in the layer.</p> <p>This value is useful only when the layer is associated with a sound instance that has spatialization enabled. You can update this value using the <code>SetOcclusion</code> method from the <code>Entity</code> this layer is associated with.</p> Return The occlusion amount of the audio data in the layer. See Entity"},{"location":"api/mixer/AmplimixLayer/#getpitch","title":"GetPitch","text":"<p>virtual AmReal32 GetPitch() const = 0</p> <p>Gets the pitch of the audio data in the layer.</p> <p>This value is affected by the Doppler effect. A value of 1.0 will play the audio data at its original pitch, while any value greater than 1.0 will increase the pitch, and any value less than 1.0 will decrease the pitch.</p> Return The pitch of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#getplayspeed","title":"GetPlaySpeed","text":"<p>virtual AmReal32 GetPlaySpeed() const = 0</p> <p>Gets the play speed of the audio data in the layer.</p> <p>This values affects the final pitch.</p> Return The play speed of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#getroom","title":"GetRoom","text":"<p>virtual Room GetRoom() const = 0</p> <p>Gets the room in which the audio data in the layer is currently located.</p> Return The room in which the audio data in the layer is currently located. If the layer is not located in a <code>Room</code>, an invalid room is returned. See Room"},{"location":"api/mixer/AmplimixLayer/#getsamplerate","title":"GetSampleRate","text":"<p>virtual AmUInt32 GetSampleRate() const = 0</p> <p>Gets the current sample rate of the audio data in the layer.</p> <p>The current sample rate of the audio data in the layer can be different from the original sample rate stored in the sound format. Its value may change due to the Doppler effect, or due to an internal sample rate conversion to match the one specified in the loaded engine configuration.</p> Return The current sample rate of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#getsound","title":"GetSound","text":"<p>* GetSound() const</p> <p>Gets the sound associated with the audio data in the layer.</p> Return The sound associated with the audio data in the layer. See Sound"},{"location":"api/mixer/AmplimixLayer/#getsoundformat","title":"GetSoundFormat","text":"<p>virtual SoundFormat GetSoundFormat() const = 0</p> <p>Gets the sound format of the audio data in the layer.</p> <p>The sound format specifies the number of channels, sample rate, and other audio properties. It is filled by the <code>Codec</code> that handled the decoding of the audio data.</p> Return The sound format of the audio data in the layer. See SoundFormat, Codec"},{"location":"api/mixer/AmplimixLayer/#getspatialization","title":"GetSpatialization","text":"<p>virtual eSpatialization GetSpatialization() const = 0</p> <p>Gets the spatialization mode of the audio data in the layer.</p> <p>The spatialization mode determines how the audio data in the layer is processed to produce a stereoscopic sound. This value must be set in the asset file of the sound object.</p> Return The spatialization mode of the audio data in the layer. See eSpatialization"},{"location":"api/mixer/AmplimixLayer/#getstartposition","title":"GetStartPosition","text":"<p>virtual AmUInt64 GetStartPosition() const = 0</p> <p>Gets the start position of the audio data in the layer.</p> <p>This position is in samples, not bytes. It represents the offset from the start of the linked sound data, where the mixer should start playing audio.</p> Return The start position of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#getstereopan","title":"GetStereoPan","text":"<p>virtual AmReal32 GetStereoPan() const = 0</p> <p>Gets the stereo pan of the audio data in the layer.</p> <p>The stereo pan of the audio data in the layer is a value between -1.0 (left) and 1.0 (right). A value of -1.0 will render the audio data to the left speaker, a value of 1.0 will render the audio data to the right speaker, and a value of 0.0 will render the audio data to the center speaker.</p> Return The stereo pan of the audio data in the layer."},{"location":"api/mixer/AmplimixLayer/#isloopenabled","title":"IsLoopEnabled","text":"<p>virtual bool IsLoopEnabled() const = 0</p> <p>Checks if the audio data in the layer is looping.</p> Return <code>true</code> if the audio data in the layer is looping, <code>false</code> otherwise."},{"location":"api/mixer/AmplimixLayer/#isstreamenabled","title":"IsStreamEnabled","text":"<p>virtual bool IsStreamEnabled() const = 0</p> <p>Checks if the audio data in the layer is streaming from the file system.</p> Return <code>true</code> if the audio data in the layer is streaming from the file system, <code>false</code> otherwise."},{"location":"api/mixer/AmplimixLayer/#amplimixlayer_1","title":"~AmplimixLayer","text":"<p>virtual ~AmplimixLayer() = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/ConsumerNodeInstance/","title":"ConsumerNodeInstance","text":"<p>class  ConsumerNodeInstance</p> <p>Interface for Amplimix pipeline nodes that can consume audio data from an input buffer.</p>"},{"location":"api/mixer/ConsumerNodeInstance/#functions","title":"Functions","text":"Name Description ~ConsumerNodeInstance Default destructor. Consume Consumes audio data from the provider node. Connect Sets the input provider node ID for this node."},{"location":"api/mixer/ConsumerNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/ConsumerNodeInstance/#connect","title":"Connect","text":"<p>virtual void Connect(AmObjectID provider) = 0</p> <p>Sets the input provider node ID for this node.</p> Parameter <code>provider</code> The provider node for this node."},{"location":"api/mixer/ConsumerNodeInstance/#consume","title":"Consume","text":"<p>virtual void Consume() = 0</p> <p>Consumes audio data from the provider node.</p> <p>The provider node should be specified with the call of <code>Connect()</code>.</p>"},{"location":"api/mixer/ConsumerNodeInstance/#consumernodeinstance_1","title":"~ConsumerNodeInstance","text":"<p>virtual ~ConsumerNodeInstance() = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/InputNodeInstance/","title":"InputNodeInstance","text":"<p>class  InputNodeInstance : public NodeInstance , public ProviderNodeInstance</p> <p>Class used to mark the input of the pipeline.</p> <p>Warning</p> <p>This node is automatically added to the pipeline when created. And thus should not be manually added to the pipeline asset.</p> See ProviderNodeInstance"},{"location":"api/mixer/InputNodeInstance/#functions","title":"Functions","text":"Name Description InputNodeInstance InputNodeInstance constructor. ~InputNodeInstance Default destructor. SetInput Sets the input of the pipeline. Provide @inherit Reset @inherit"},{"location":"api/mixer/InputNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/InputNodeInstance/#inputnodeinstance_1","title":"InputNodeInstance","text":"<p>InputNodeInstance()</p> <p>InputNodeInstance constructor.</p>"},{"location":"api/mixer/InputNodeInstance/#provide","title":"Provide","text":"<p>const AudioBuffer* Provide() override</p> <p>@inherit</p>"},{"location":"api/mixer/InputNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@inherit</p>"},{"location":"api/mixer/InputNodeInstance/#setinput","title":"SetInput","text":"<p>void SetInput(AudioBuffer* buffer)</p> <p>Sets the input of the pipeline.</p> Parameter <code>buffer</code> The buffer to set as the input."},{"location":"api/mixer/InputNodeInstance/#inputnodeinstance_2","title":"~InputNodeInstance","text":"<p>~InputNodeInstance() override = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/MixerNodeInstance/","title":"MixerNodeInstance","text":"<p>class  MixerNodeInstance : public NodeInstance , public ConsumerNodeInstance , public ProviderNodeInstance</p> <p>Base class for Amplimix pipeline nodes that can mix audio data from multiple input buffers.</p> See NodeInstance, ConsumerNodeInstance, ProviderNodeInstance"},{"location":"api/mixer/MixerNodeInstance/#variables","title":"Variables","text":"Name Description m_providers The IDs of the input provider nodes."},{"location":"api/mixer/MixerNodeInstance/#functions","title":"Functions","text":"Name Description MixerNodeInstance MixerNodeInstance constructor. ~MixerNodeInstance Default destructor. Consume @inherit Connect @inherit ! Connect Sets the input provider nodes for this mixer node. Provide @inherit Reset @inherit"},{"location":"api/mixer/MixerNodeInstance/#variable-details","title":"Variable Details","text":""},{"location":"api/mixer/MixerNodeInstance/#m_providers","title":"m_providers","text":"<p>std::vector&lt;AmObjectID&gt; m_providers</p> <p>The IDs of the input provider nodes.</p>"},{"location":"api/mixer/MixerNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/MixerNodeInstance/#connect","title":"Connect","text":"<p>void Connect(AmObjectID provider) final</p> <p>@inherit</p> <p>Note</p> <p>This method appends the given provider to the list of input provider nodes. If the provider node already exists in the list, it will not be added again.</p> <p>void Connect(const std::vector&lt;AmObjectID&gt;&amp; providers)</p> <p>Sets the input provider nodes for this mixer node.</p> Parameter <code>providers</code> The provider nodes for this mixer node. <p>Note</p> <p>This method clears the existing input provider nodes, and replaces them with the provided ones.</p>"},{"location":"api/mixer/MixerNodeInstance/#consume","title":"Consume","text":"<p>void Consume() final</p> <p>@inherit</p>"},{"location":"api/mixer/MixerNodeInstance/#mixernodeinstance_1","title":"MixerNodeInstance","text":"<p>MixerNodeInstance()</p> <p>MixerNodeInstance constructor.</p>"},{"location":"api/mixer/MixerNodeInstance/#provide","title":"Provide","text":"<p>const AudioBuffer* Provide() final</p> <p>@inherit</p>"},{"location":"api/mixer/MixerNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@inherit</p>"},{"location":"api/mixer/MixerNodeInstance/#mixernodeinstance_2","title":"~MixerNodeInstance","text":"<p>~MixerNodeInstance() override = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/Node/","title":"Node","text":"<p>class  Node</p> <p>Base class for Amplimix pipeline nodes.</p> <p>This class presents the basic structure to create Amplimix pipeline nodes. Each <code>Node</code> of your pipelines must be derived from this class and implement the <code>CreateInstance()</code> and <code>DestroyInstance()</code> methods.</p> See NodeInstance"},{"location":"api/mixer/Node/#variables","title":"Variables","text":"Name Description m_name The name of this node."},{"location":"api/mixer/Node/#functions","title":"Functions","text":"Name Description Node Node constructor. ~Node Node destructor. CreateInstance Creates a new instance of the node. DestroyInstance Destroys the specified instance of the node. GetName Returns the name of the node. CanConsume Returns <code>true</code> if the node can consume audio data. CanProduce Returns <code>true</code> if the node can produce audio data. GetMaxInputCount Returns the maximum number of input connections the node can have. GetMinInputCount Returns the minimum number of input connections the node can have. Register Registers a new node. Unregister Unregisters a node. Construct Creates a new instance of the node with the given name * and returns its pointer. The returned pointer should be deleted using Node::Destruct(). Destruct Destroys the given node instance. LockRegistry Locks the nodes' registry. UnlockRegistry Unlocks the nodes' registry. GetRegistry Gets the list of registered nodes."},{"location":"api/mixer/Node/#variable-details","title":"Variable Details","text":""},{"location":"api/mixer/Node/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this node.</p>"},{"location":"api/mixer/Node/#function-details","title":"Function Details","text":""},{"location":"api/mixer/Node/#canconsume","title":"CanConsume","text":"<p>[[nodiscard]] virtual bool CanConsume() const = 0</p> <p>Returns <code>true</code> if the node can consume audio data.</p> Return <code>true</code> if the node can consume audio data, <code>false</code> otherwise."},{"location":"api/mixer/Node/#canproduce","title":"CanProduce","text":"<p>[[nodiscard]] virtual bool CanProduce() const = 0</p> <p>Returns <code>true</code> if the node can produce audio data.</p> Return <code>true</code> if the node can produce audio data, <code>false</code> otherwise."},{"location":"api/mixer/Node/#construct","title":"Construct","text":"<p>static NodeInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the node with the given name          * and returns its pointer. The returned pointer should be deleted using Node::Destruct().</p> Parameter <code>name</code> The name of the node. Return The node with the given name, or <code>nullptr</code> if none."},{"location":"api/mixer/Node/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance() const</p> <p>Creates a new instance of the node.</p> Return A new instance of the node."},{"location":"api/mixer/Node/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(NodeInstance* instance) const = 0</p> <p>Destroys the specified instance of the node.</p> Parameter <code>instance</code> Pointer to the instance to be destroyed."},{"location":"api/mixer/Node/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, NodeInstance* instance)</p> <p>Destroys the given node instance.</p> Parameter <code>name</code> The name of the node. Parameter <code>instance</code> The node instance to destroy."},{"location":"api/mixer/Node/#getmaxinputcount","title":"GetMaxInputCount","text":"<p>[[nodiscard]] virtual AmSize GetMaxInputCount() const = 0</p> <p>Returns the maximum number of input connections the node can have.</p> Return The maximum number of input connections the node can have."},{"location":"api/mixer/Node/#getmininputcount","title":"GetMinInputCount","text":"<p>[[nodiscard]] virtual AmSize GetMinInputCount() const = 0</p> <p>Returns the minimum number of input connections the node can have.</p> Return The minimum number of input connections the node can have."},{"location":"api/mixer/Node/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Returns the name of the node.</p>"},{"location":"api/mixer/Node/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, std::shared_ptr&lt;Node&gt;&gt;&amp; GetRegistry()</p> <p>Gets the list of registered nodes.</p> Return The registry of nodes."},{"location":"api/mixer/Node/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the nodes' registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new nodes after the engine is fully loaded.</p>"},{"location":"api/mixer/Node/#node_1","title":"Node","text":"<p>explicit Node(AmString name)</p> <p>Node constructor.</p> Parameter <code>name</code> Name of the node. Should be unique within the pipeline."},{"location":"api/mixer/Node/#register","title":"Register","text":"<p>static void Register(std::shared_ptr&lt;Node&gt; node)</p> <p>Registers a new node.</p> Parameter <code>node</code> The node to add in the registry."},{"location":"api/mixer/Node/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the nodes' registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new nodes after the engine is fully unloaded.</p>"},{"location":"api/mixer/Node/#unregister","title":"Unregister","text":"<p>static void Unregister(std::shared_ptr&lt;const Node&gt; node)</p> <p>Unregisters a node.</p> Parameter <code>node</code> The node to remove from the registry."},{"location":"api/mixer/Node/#node_2","title":"~Node","text":"<p>virtual ~Node()</p> <p>Node destructor.</p>"},{"location":"api/mixer/NodeInstance/","title":"NodeInstance","text":"<p>class  NodeInstance</p> <p>An instance of an Amplimix pipeline node.</p> <p>This class represents the actual node executed within the Amplimix pipeline. Each node instance has a unique ID assigned to it, that matches the one provided in the pipeline asset.</p>"},{"location":"api/mixer/NodeInstance/#variables","title":"Variables","text":"Name Description m_id The unique identifier for the node instance in the pipeline. m_layer The Amplimix layer this node instance is currently associated with. m_pipeline The pipeline this node instance belongs to."},{"location":"api/mixer/NodeInstance/#functions","title":"Functions","text":"Name Description Initialize Initializes the node instance. ~NodeInstance Default destructor. GetId Gets the unique identifier for the node instance. GetLayer Gets the Amplimix layer this node instance is currently associated with. Reset Resets the node instance's internal state."},{"location":"api/mixer/NodeInstance/#variable-details","title":"Variable Details","text":""},{"location":"api/mixer/NodeInstance/#m_id","title":"m_id","text":"<p>AmObjectID m_id</p> <p>The unique identifier for the node instance in the pipeline.</p>"},{"location":"api/mixer/NodeInstance/#m_layer","title":"m_layer","text":"<p>const AmplimixLayer* m_layer</p> <p>The Amplimix layer this node instance is currently associated with.</p>"},{"location":"api/mixer/NodeInstance/#m_pipeline","title":"m_pipeline","text":"<p>const PipelineInstance* m_pipeline</p> <p>The pipeline this node instance belongs to.</p>"},{"location":"api/mixer/NodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/NodeInstance/#getid","title":"GetId","text":"<p>[[nodiscard]] AmObjectID GetId() const</p> <p>Gets the unique identifier for the node instance.</p> Return The unique identifier for the node instance."},{"location":"api/mixer/NodeInstance/#getlayer","title":"GetLayer","text":"<p>[[nodiscard]] const AmplimixLayer* GetLayer() const</p> <p>Gets the Amplimix layer this node instance is currently associated with.</p> Return The Amplimix layer this node instance is currently associated with. See AmplimixLayer"},{"location":"api/mixer/NodeInstance/#initialize","title":"Initialize","text":"<p>virtual void Initialize(AmObjectID id, const AmplimixLayer* layer, const PipelineInstance* pipeline)</p> <p>Initializes the node instance.</p> Parameter <code>id</code> Unique identifier for the node instance. Parameter <code>layer</code> The Amplimix layer this node instance is currently associated with. Parameter <code>pipeline</code> The pipeline this node instance belongs to."},{"location":"api/mixer/NodeInstance/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the node instance's internal state.</p> <p>Warning</p> <p>This function should be called automatically by Amplimix, each time the pipeline is about to be executed. Call it manually only if you know what you're doing.</p>"},{"location":"api/mixer/NodeInstance/#nodeinstance_1","title":"~NodeInstance","text":"<p>virtual ~NodeInstance() = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/OutputNodeInstance/","title":"OutputNodeInstance","text":"<p>class  OutputNodeInstance : public NodeInstance , public ConsumerNodeInstance</p> <p>Class used to mark the output of the pipeline.</p> <p>Warning</p> <p>This node is automatically added to the pipeline when created. And thus should not be manually added to the pipeline asset.</p> See ConsumerNodeInstance"},{"location":"api/mixer/OutputNodeInstance/#functions","title":"Functions","text":"Name Description OutputNodeInstance OutputNodeInstance constructor. ~OutputNodeInstance Default destructor. SetOutput Sets the output of the pipeline. Consume @inherit Connect @inherit Reset @inherit"},{"location":"api/mixer/OutputNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/OutputNodeInstance/#connect","title":"Connect","text":"<p>void Connect(AmObjectID provider) override</p> <p>@inherit</p>"},{"location":"api/mixer/OutputNodeInstance/#consume","title":"Consume","text":"<p>void Consume() override</p> <p>@inherit</p>"},{"location":"api/mixer/OutputNodeInstance/#outputnodeinstance_1","title":"OutputNodeInstance","text":"<p>OutputNodeInstance()</p> <p>OutputNodeInstance constructor.</p>"},{"location":"api/mixer/OutputNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@inherit</p>"},{"location":"api/mixer/OutputNodeInstance/#setoutput","title":"SetOutput","text":"<p>void SetOutput(AudioBuffer* buffer)</p> <p>Sets the output of the pipeline.</p> Parameter <code>buffer</code> The buffer to set as the output."},{"location":"api/mixer/OutputNodeInstance/#outputnodeinstance_2","title":"~OutputNodeInstance","text":"<p>~OutputNodeInstance() override = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/Pipeline/","title":"Pipeline","text":"<p>class  Pipeline : public Asset&lt;AmPipelineID&gt;</p> <p>A pipeline assembles a set of nodes to process audio data.</p> <p>For each layer in <code>Amplimix</code>, a <code>PipelineInstance</code> is created for that specific layer.</p> See Amplimix, PipelineInstance"},{"location":"api/mixer/Pipeline/#functions","title":"Functions","text":"Name Description ~Pipeline Default destructor. CreateInstance Creates a new pipeline instance for the specified layer. DestroyInstance Destroys the specified pipeline instance."},{"location":"api/mixer/Pipeline/#function-details","title":"Function Details","text":""},{"location":"api/mixer/Pipeline/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance(const AmplimixLayer* layer) const</p> <p>Creates a new pipeline instance for the specified layer.</p> Parameter <code>layer</code> The layer for which to create the pipeline instance. Return A new pipeline instance for the specified layer."},{"location":"api/mixer/Pipeline/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(PipelineInstance* instance) const = 0</p> <p>Destroys the specified pipeline instance.</p> Parameter <code>instance</code> The pipeline instance to destroy."},{"location":"api/mixer/Pipeline/#pipeline_1","title":"~Pipeline","text":"<p>virtual ~Pipeline() = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/PipelineInstance/","title":"PipelineInstance","text":"<p>class  PipelineInstance</p> <p>Represents an instance of a pipeline for a specific layer.</p> <p>A pipeline instance is created for each single layer in the mixer. Each pipeline instance manages its own state, and create a set of node instances following the provided configuration.</p>"},{"location":"api/mixer/PipelineInstance/#functions","title":"Functions","text":"Name Description ~PipelineInstance Default constructor. Execute Executes the pipeline for the given layer. Reset Resets the internal state for all nodes in the pipeline. GetNode Gets the node with the specified ID."},{"location":"api/mixer/PipelineInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/PipelineInstance/#execute","title":"Execute","text":"<p>virtual void Execute(const AudioBuffer&amp; in, AudioBuffer&amp; out) = 0</p> <p>Executes the pipeline for the given layer.</p> Parameter <code>in</code> The input buffer to process. This buffer is passed to the input node of the pipeline. Parameter <code>out</code> The output buffer where the output node will fill processed data."},{"location":"api/mixer/PipelineInstance/#getnode","title":"GetNode","text":"<p>* GetNode(AmObjectID id) const</p> <p>Gets the node with the specified ID.</p> Parameter <code>id</code> The ID of the node to retrieve. Return The node with the specified ID, or <code>nullptr</code> if not found."},{"location":"api/mixer/PipelineInstance/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the internal state for all nodes in the pipeline.</p> <p>Warning</p> <p>This method is called automatically when Amplimix has finished processing a frame for a specific layer. You should not manually call this method, unless you know what you're doing.</p>"},{"location":"api/mixer/PipelineInstance/#pipelineinstance_1","title":"~PipelineInstance","text":"<p>virtual ~PipelineInstance() = default</p> <p>Default constructor.</p>"},{"location":"api/mixer/ProcessorNodeInstance/","title":"ProcessorNodeInstance","text":"<p>class  ProcessorNodeInstance : public NodeInstance , public ConsumerNodeInstance , public ProviderNodeInstance</p> <p>Base class for Amplimix pipeline nodes that can process audio data in-place.</p> See NodeInstance, ConsumerNodeInstance, ProviderNodeInstance"},{"location":"api/mixer/ProcessorNodeInstance/#variables","title":"Variables","text":"Name Description m_provider The ID of the input provider node."},{"location":"api/mixer/ProcessorNodeInstance/#functions","title":"Functions","text":"Name Description ProcessorNodeInstance PropertyNodeInstance constructor. ~ProcessorNodeInstance Default destructor. Process Processes input audio data and returns the output audio data. Consume @inherit Connect @inherit Provide @inherit Reset @inherit"},{"location":"api/mixer/ProcessorNodeInstance/#variable-details","title":"Variable Details","text":""},{"location":"api/mixer/ProcessorNodeInstance/#m_provider","title":"m_provider","text":"<p>AmObjectID m_provider</p> <p>The ID of the input provider node.</p>"},{"location":"api/mixer/ProcessorNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/ProcessorNodeInstance/#connect","title":"Connect","text":"<p>void Connect(AmObjectID provider) final</p> <p>@inherit</p>"},{"location":"api/mixer/ProcessorNodeInstance/#consume","title":"Consume","text":"<p>void Consume() final</p> <p>@inherit</p>"},{"location":"api/mixer/ProcessorNodeInstance/#process","title":"Process","text":"<p>* Process(const AudioBuffer* input)</p> <p>Processes input audio data and returns the output audio data.</p> Parameter <code>input</code> The input audio data to process. Return The output audio data."},{"location":"api/mixer/ProcessorNodeInstance/#processornodeinstance_1","title":"ProcessorNodeInstance","text":"<p>explicit ProcessorNodeInstance(bool processOnEmptyBuffer = false)</p> <p>PropertyNodeInstance constructor.</p> Parameter <code>processOnEmptyBuffer</code> If <code>true</code>, the node will execute the <code>Process()</code> method even if the input buffer is <code>nullptr</code>."},{"location":"api/mixer/ProcessorNodeInstance/#provide","title":"Provide","text":"<p>const AudioBuffer* Provide() final</p> <p>@inherit</p>"},{"location":"api/mixer/ProcessorNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@inherit</p>"},{"location":"api/mixer/ProcessorNodeInstance/#processornodeinstance_2","title":"~ProcessorNodeInstance","text":"<p>~ProcessorNodeInstance() override = default</p> <p>Default destructor.</p>"},{"location":"api/mixer/ProviderNodeInstance/","title":"ProviderNodeInstance","text":"<p>class  ProviderNodeInstance</p> <p>Interface for Amplimix pipeline nodes that can provide audio data to an output buffer.</p>"},{"location":"api/mixer/ProviderNodeInstance/#functions","title":"Functions","text":"Name Description ~ProviderNodeInstance Default destructor. Provide Produces audio data ready to be taken as input from a consumer node."},{"location":"api/mixer/ProviderNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/mixer/ProviderNodeInstance/#provide","title":"Provide","text":"<p>* Provide()</p> <p>Produces audio data ready to be taken as input from a consumer node.</p> Return The output audio data. See AudioBuffer"},{"location":"api/mixer/ProviderNodeInstance/#providernodeinstance_1","title":"~ProviderNodeInstance","text":"<p>virtual ~ProviderNodeInstance() = default</p> <p>Default destructor.</p>"},{"location":"getting-started/concepts/","title":"Concepts","text":"<p>Note</p> <p>For Amplitude's new users, we highly recommend reading this Concepts documentation page, as it describes the internal of the audio engine. If you just want to set up your environment, you can skip this part and go to the Installation.</p> <p>This page describes the different components of the library, and how they are interacting together.</p> <pre><code>flowchart TB\n  subgraph sources[Audio Files]\n    source1(gun_fire_01.ams)\n  end\n  subgraph codecs[Audio Codecs]\n    codec1[[Codec]]\n    codec2[[Codec]]\n  end\n  subgraph game[Game]\n    switch1[[SwitchState]]\n    switch2[[SwitchState]]\n    rtpc[[RTPC]]\n    entity[[Entity]]\n    listener[[Listener]]\n  end\n  subgraph sounds[Sound Objects]\n    direction LR\n    sound1[[Sound]]\n    subgraph sound_objects[Containers]\n      sound_object1[[Collection]]\n      sound_object2[[SwitchContainer]]\n    end\n  end\n  subgraph channels[Channels]\n    channel1[[Channel]]\n    channel2[[Channel]]\n    channel3[[Channel]]\n  end\n  subgraph sound_instances[Sound Instances]\n    sound_instance1[[SoundInstance]]\n    sound_instance2[[SoundInstance]]\n    sound_instance3[[SoundInstance]]\n    sound_instance4[[SoundInstance]]\n    sound_instance5[[SoundInstance]]\n  end\n  subgraph buses[Buses]\n    bus1[[Bus]]\n    bus2[[Bus]]\n  end\n  subgraph amplimix[Amplimix]\n    mixer_layer1[[Mixer Layer]]\n    mixer_layer2[[Mixer Layer]]\n    mixer_layer3[[Mixer Layer]]\n    mixer_layer4[[Mixer Layer]]\n    mixer_layer5[[Mixer Layer]]\n    mixer[[Mixer]]\n    pipeline[[Pipeline]]\n  end\n  subgraph drivers[Audio Drivers]\n    driver1[[Driver]]\n    driver2[[Driver]]\n    driver3[[Driver]]\n  end\n  source1 -.-&gt; codec1\n  codec1 --&gt; sound1\n  rtpc -.-&gt; sound1\n  rtpc -.-&gt; sound_object1\n  rtpc -.-&gt; sound_object2\n  switch1 -.-&gt; sound_object2\n  switch2 -.-&gt; sound_object2\n  sound1 --&gt; sound_object1\n  sound1 --&gt; sound_object2\n  sound_object1 --&gt; channel1\n  sound_object2 --&gt; channel2\n  sound1 --&gt; channel3\n  channel1 --&gt; sound_instance1\n  channel1 --&gt; sound_instance2\n  channel2 --&gt; sound_instance3\n  channel2 --&gt; sound_instance4\n  channel3 --&gt; sound_instance5\n  sound_instance2 -.-&gt; bus1\n  sound_instance1 -.-&gt; bus1\n  sound_instance4 -.-&gt; bus1\n  sound_instance5 -.-&gt; bus2\n  sound_instance3 -.-&gt; bus2\n  bus1 -.-&gt;|RealChannel| mixer_layer1\n  bus1 -.-&gt;|RealChannel| mixer_layer2\n  bus1 -.-&gt;|RealChannel| mixer_layer3\n  bus2 -.-&gt;|RealChannel| mixer_layer4\n  bus2 -.-&gt;|RealChannel| mixer_layer5\n  mixer_layer1 --&gt; pipeline\n  mixer_layer2 --&gt; pipeline\n  mixer_layer3 --&gt; pipeline\n  mixer_layer4 --&gt; pipeline\n  mixer_layer5 --&gt; pipeline\n  pipeline --&gt; mixer\n  mixer --&gt; driver2\n  driver2 -.-&gt; device[/Audio Device/]</code></pre>"},{"location":"getting-started/concepts/#audio-files-and-codecs","title":"Audio Files and Codecs","text":"<p>Through its Codec API (extensible via plugins), Amplitude is able to read any audio file and to convert it to a sound object. An audio file can be read only if the Engine have a registered codec supporting it.</p> <p>According to the sound object definition, audio files can be streamed at runtime or preloaded. Each codec implementation must always read audio samples as 32-bit floating integer (<code>AmReal32</code>), since it is the default sample format used in the Engine.</p> <p>At the moment, Amplitude comes shipped with the following codecs:</p> <ul> <li>WAV, a lossy audio codec.</li> <li>MP3, a lossy audio codec.</li> <li>AMS (Amplitude Audio Sample), a WAV-like codec built for Amplitude. It uses a high quality ADPCM compression.</li> </ul> <p>Additional codecs are available via plugins:</p> <ul> <li>FLAC, a lossless audio codec.</li> <li>OGG, a lossy audio codec.</li> </ul> <p>Warning</p> <p>The AMS codec implementation is subject to changes.</p> <p>You can implement your own codec and register it to the Engine by following this tutorial.</p>"},{"location":"getting-started/concepts/#game-objects","title":"Game Objects","text":"<p>Amplitude synchronizes itself with the game using game objects. The list of available game objects are:</p> <ul> <li>SwitchState: represents a single state in a SwitchContainer.</li> <li>RTPC: represents a real-time parameter control, that maps values from your game to values in the engine.</li> <li>Entity: represents a game entity, used to place a sound object in the 2D/3D environment of the game, and then provide position, velocity, orientation and other information to the wrapped sound object.</li> <li>Listener: represents a listener in the game. A listener is an object that is able to hear the sound objects. A game should have at least one Listener to let Amplitude render spatial audio.</li> </ul>"},{"location":"getting-started/concepts/#sound-objects","title":"Sound Objects","text":"<p>A sound object in Amplitude is the source of audio samples. You can apply playback actions to the sound at runtime (play, pause, stop, seek). Amplitude has two categories of sound objects:</p> <ul> <li>Standalone Sound Objects: A standalone sound object is a sound object which is not part of a Container. They can create a directly linked to a SoundInstance and a Codec.</li> <li>Containers: A Container is a special sound object able to contain other sound objects. It can overwrite some properties of contained sound objects (like gain, or priority) and is responsible to manage which of the contained sound objects are playing, and when.</li> </ul> <p>From those categories, we have the following list of sound objects:</p> <ul> <li>Sound: The most basic sound object. A Sound is a standalone sound object, then, it is directly linked to a Codec, and it is responsible to load and stream sound data.</li> <li>Collection: A Collection is a container sound object, and is like its name says, a collection of Sounds. The Collection has the particularity to pick and play a single Sound through its Scheduler each time it receives a play request. A Collection cannot play more than one Sound at the same time.</li> <li>SwitchContainer: A SwitchContainer is a container sound object which contains Sounds or Collections. It mixes and play contained sound objects according to SwitchStates. Sound objects registered inside a switch container for a specific switch state are played only when this switch state is active. Unlike collections, switch containers can play more than one sound object at the same time.</li> </ul> <p>Each sound object is created through a JSON configuration file which should match a specific flatbuffer schema for the sound object.</p>"},{"location":"getting-started/concepts/#channels","title":"Channels","text":"<p>A channel is the user interface between sound objects and Amplimix. When playing a sound object, the Engine will return a channel. That channel will then internally instantiate a SoundInstance, and be linked to a Bus. It's through a channel that you can play, pause and stop a sound object, and also control its properties, like the gain, or the location (for world scoped sound objects).</p> <p>In Amplitude, the maximum number of channels is limited, and determined at the Engine initialization. That number is the sum of the number of active channels and the number of virtual channels, which are both defined in the engine configuration file.</p> <p>Amplitude will manage the prioritization of sound objects and will automatically drop the least important channels when too many sound objects are playing simultaneously. This is reason behind the concept of active and virtual channels. The active channels are the channels which are actually playing and rendering audio, while the virtual channels are also playing audio but are not rendering it, and are only used to track low priority sounds which are still playing.</p> <p>When requesting to play a sound object:</p> <ol> <li>The Engine will pick a channel in the list of free active channels.</li> <li>If there is no free channel, the Engine will pick a channel in the list of free virtual channels.</li> <li>If there is still no free channel, the Engine will drop the least important sound object.</li> <li>If the sound object to play is actually the one with the lowest priority, it will not be played.</li> </ol>"},{"location":"getting-started/concepts/#sound-instances","title":"Sound Instances","text":"<p>The SoundInstance is the real place where the Engine is consuming audio data for mixing. When playing a same sound object multiple times, multiple sound instances will be created for each play request, but all of them will share the same audio data since it belong to that sound object. Sound instances only shares audio data, and not properties like gain, pan, pitch, location, or priority which are instead managed through the Channel in which they are playing.</p> <p>It's only in cases of streamed audio that each sound instance own the audio data.</p>"},{"location":"getting-started/concepts/#buses","title":"Buses","text":"<p>The Bus is used to adjust the gain of a group of sound instances in tandem. They are created before the Engine initialization with the buses configuration file. Any number of buses can be created.</p> <p>It's inside the sound object definition file that you specify on which bus it has to be played on. Example buses might be <code>music</code>, <code>ambient_sound</code>, <code>sound_effects</code> or <code>voice_overs</code>.</p> <p>A bus has the particularity to optionally have other buses as child buses, which means that all changes to that bus' gain level affect all children of that bus as well. There should always be a single master bus, with name <code>master</code>, and with ID <code>1</code>. This is the root bus from which all other buses descend. The engine will fail to initialize if the master bus is not found.</p> <p>A bus may also define <code>duck_buses</code>, which are buses that will lower in volume when a sound is played on that first bus. For example, a designer might want to have background sound effects and music lower in volume when an important dialog is playing. To do this the <code>sound_effect</code> and <code>music</code> buses would be added in the list of <code>duck_buses</code> children of the <code>dialog</code> bus.</p>"},{"location":"getting-started/concepts/#real-channels","title":"Real Channels","text":"<p>Real Channels are internally managed channels which communicate directly with Amplimix. They are created for each active channel and used only when the channel is rendering audio.</p>"},{"location":"getting-started/concepts/#amplimix","title":"Amplimix","text":"<p>Amplimix is the part of Amplitude doing sound mixing. It is composed of two (02) components linked together to render audio: the mixer layers, and the pipeline.</p>"},{"location":"getting-started/concepts/#mixer-layers","title":"Mixer Layers","text":"<p>A Mixer Layer is responsible to consume audio data from sound instances and provide it to the Amplimix Pipeline. A mixer layer stores, for a unique sound instance, the related state for its playback, like the current position of the cursor, the current gain, the current pan, the current pitch, and the current sample rate converter.</p> <p>Amplimix have a maximum of 4096 mixer layers, which is the maximum number of sound instances that can be played simultaneously.</p>"},{"location":"getting-started/concepts/#pipeline","title":"Pipeline","text":"<p>The Pipeline is used to process the sound before the mixer get the final output to render on the device. It's in the pipeline that Amplitude process sound spatialization, effects, obstruction, occlusion and more.</p> <p>The pipeline is a node-graph built with connected Node instances. Amplitude comes shipped with a list of predefined nodes to achieve high-quality spatialization, but you are completely able to build your own pipeline nodes through plugins and register them into the engine.</p> <p>Pipelines are created using pipeline assets, and registered through the engine configuration file.</p>"},{"location":"getting-started/concepts/#audio-drivers","title":"Audio Drivers","text":"<p>The Driver is used to render the audio data on the device. It should assume the entire responsibility to convert the input data (the processed data from Amplimix) to the output format required by the device. That output format includes the number of channels, the sample rate, the sample format, and the number of samples per output.</p> <p>The default driver provided by Amplitude is built on top of the MiniAudio library, and allows Amplitude to run on every all available platforms.</p>"},{"location":"getting-started/concepts/#audio-device","title":"Audio Device","text":"<p>The audio Device renders audio. Amplitude has a copy of the current audio device description in the DeviceDescription stored in Amplimix. The device description gives the user requested audio format (copied from configuration files), and the actual audio format that the device is expecting. It's to the Driver implementation to fill the device description in Amplimix with the obtained values from the audio device.</p> <p>Amplimix will process the audio using the user requested format, and let to the driver the responsibility to convert the data to the device audio format.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Follow these steps to install Amplitude Audio SDK from official releases or by building from sources.</p>"},{"location":"getting-started/installation/#download-from-releases","title":"Download from releases","text":"<p>Warning</p> <p>Amplitude Audio SDK is still in beta, so no official release is available yet. Please follow the Build the SDK from sources process instead, or grab a binary from the nightly builds.</p>"},{"location":"getting-started/installation/#nightly-builds","title":"Nightly builds","text":"<p>You have access to nightly builds through GitHub Actions. The nightly builds are intended for development only and are not recommended for production environments.</p>"},{"location":"getting-started/installation/#build-from-sources","title":"Build from sources","text":"<p>Warning</p> <p>Amplitude is in active development, so the installation process here may be outdated. If you are facing issues, we encourage you to join our Discord server and ask for support.</p> <p>To build Amplitude from sources, you will need to first install some dependencies:</p> <ul> <li>CMake - CMake is the build system used by the SDK. It will help you generate build files for your platform.</li> <li>vcpkg - vcpkg is a free C/C++ package manager that Amplitude uses for acquiring and managing libraries on which it depends.</li> <li>flatc (optional) - <code>flatc</code> is the compiler of the Flatbuffers serialization format used by Amplitude to generate assets. This is only needed at build time if you are going to compile Amplitude with the provided samples.</li> </ul> <p>Once you have installed dependencies you can clone the repository from GitHub using <code>git</code> as follows:</p> <pre><code>git clone https://github.com/AmplitudeAudio/sdk.git\n</code></pre> <p>This will create a directory named <code>sdk</code> at the location you cloned the repository. Enter that directory and use CMake to generate build files for your system:</p> <pre><code>cd sdk\ncmake -DCMAKE_TOOLCHAIN_FILE:STRING=~/vcpkg/scripts/buildsystems/vcpkg.cmake  -B ./build\n</code></pre> <p>Windows users may generate build files using these commands:</p> <pre><code>cd sdk\ncmake -DCMAKE_TOOLCHAIN_FILE:STRING=C:/vcpkg/scripts/buildsystems/vcpkg.cmake  -B .\\build\n</code></pre> <p>You may need to change the <code>CMAKE_TOOLCHAIN_FILE</code> CMake variable to point to your installation of vcpkg. Feel free to customize the command as needed, to include for example custom generators like <code>Ninja</code>.</p> Build with samples <p>You can optionally build the SDK with the provided samples. Note that by enabling the samples, the sources will depend on <code>SDL2</code>, which will be automatically fetched by vcpkg for you.</p> <p>To enable the samples, add <code>-DBUILD_SAMPLES:BOOL=TRUE</code> to the previous CMake command.</p> <p>Once the generation is done, you can build the SDK with the following command:</p> <pre><code>cmake --build build\n</code></pre> <p>And then install it with:</p> <pre><code>cmake --build build --target install\n</code></pre> <p>The SDK installs itself in the same folder as the sources, in the <code>sdk</code> directory.</p>"},{"location":"getting-started/installation/#install-the-sdk","title":"Install the SDK","text":"<p>Once you have a copy of the SDK, to install it you just need to add a <code>AM_SDK_PATH</code> environment variable in your system, that points to the path of the <code>sdk</code> directory generated by the CMake install command.</p> <p>Info</p> <p>By installing the SDK through the upcoming Amplitude Studio, the environment variable will be automatically set.</p> <p>That's it! You can now use Amplitude Audio SDK in your projects!</p>"},{"location":"getting-started/introduction/","title":"Introduction","text":"<p>Note</p> <p>Amplitude is still in active development. While it already provides a lot of stable features, the documentation for them is not complete. If you have questions, we encourage you to join our Discord server to ask them in the forum.</p> <p>Amplitude is a cross-platform audio engine for games. It provides a wide set of features allowing you to play audio files from any sources in any environments (2D, 3D, VR/AR) with an immersive spatial rendering. This page will give you an overview of some core features of the library.</p>"},{"location":"getting-started/introduction/#spatial-audio-hrtf-and-ambisonic-rendering","title":"Spatial Audio, HRTF, and Ambisonic Rendering","text":"<p>Amplitude can play audio sources in 2D environments, as well in 3D environments too. For 3D environments, you can use the traditional stereo-panning, or use the advanced binaural rendering using your HRTF assets. With the later the listener will be able to feel the exact position of the played source.</p>"},{"location":"getting-started/introduction/#data-driven-development","title":"Data-driven Development","text":"<p>Uses <code>.json</code> files to define everything, from a simple sound file to a complex switch container. Each <code>.json</code> file is in a dedicated directory according to its usage (<code>events</code>, <code>effects</code>, <code>sounds</code>, <code>collections</code>, etc.). Amplitude will compile them into binary files, which can now be registered into sound banks and loaded in the game at runtime.</p>"},{"location":"getting-started/introduction/#plugin-architecture","title":"Plugin Architecture","text":"<p>You are able to create plugins and add custom codecs, filters, resampling algorithms, drivers, fading algorithms, and more. Each plugin can be built as a separate library and loaded in the game at runtime.</p>"},{"location":"getting-started/introduction/#drivers-and-codecs","title":"Drivers and Codecs","text":"<p>You have total control over how to communicate with the physical audio device (using a Driver implementation) and how to decode/encode audio samples (using Codec implementations). The library provides you a default Driver implementation using MiniAudio for cross-platform support, and by default decodes FLAC, MP3, OGG, and WAV audio samples.</p>"},{"location":"getting-started/introduction/#customizable-pipeline","title":"Customizable Pipeline","text":"<p>Amplitude provides a customizable pipeline graph that you can set up per runtime platforms. Through the graph, you decide how and when Amplitude processes filters, room effects, or advanced spatialization. You also have the ability to create custom nodes (using plugins) and use them in the graph.</p>"},{"location":"getting-started/introduction/#sound-banks-management","title":"Sound banks Management","text":"<p>A sound bank is a unit where all the data you need for your game is loaded. The choice remains to you on how sound banks are organized. For example, it can be per level (<code>level1.ambank</code>) or per categories (<code>weapon-fires.ambank</code>, <code>explosions.ambank</code>). Each sound object loaded from a sound bank is reference-counted, so even if you load more than one sound bank having a reference to the same sound object, that one will be loaded only once.</p>"},{"location":"getting-started/introduction/#sound-objects","title":"Sound Objects","text":"<p>Amplitude supports a variety of sound objects which have different properties and use cases:</p> <ul> <li>Sound: The most basic sound object. It represents a single audio file played in the game.</li> <li>Collection: The collection is, like its name says, a collection of Sounds. The collection has the particularity to pick and play a single Sound through its Scheduler each time it receives a play request.</li> <li>SwitchContainer: The switch container mixes and play Sounds or Collections according to switch states. Sound objects registered inside a switch container for a specific switch state are played only when this switch state is active. Unlike collections, switch containers always play all sound objects registered for the active switch state at the same time.</li> </ul>"},{"location":"getting-started/introduction/#game-and-engine-synchronization","title":"Game and Engine Synchronization","text":"<p>You can synchronize the Amplitude engine with your game state using two approaches:</p> <ul> <li>RTPC: RTPC stands for Real-Time Parameter Control. It allows you to adjust values in Amplitude (<code>gain</code>, <code>priority</code>, <code>effect parameters</code>, etc.) automatically from the game at runtime. For example, think about a character who climbs a mountain. You can create an RTPC which synchronizes the player altitude (the distance from the ground) with Amplitude to slightly fade between environment sounds, from a calm river (at the ground) to strong winds (at the summit).</li> <li>Switch: A switch is helpful in cases where you want to let Amplitude know about one state at a time. For example, your character is walking in a forest. A switch can be applied to the terrain to let Amplitude know about the surface the character is walking on, and then play the right footstep sound.</li> </ul>"},{"location":"getting-started/introduction/#game-entities","title":"Game Entities","text":"<p>Amplitude has been designed for games and game engines in mind. For that approach, the engine can link a sound object to an entity of your game, so each entity, even if they are triggering the same sound object, can behave differently and maintain a different state.</p>"},{"location":"getting-started/introduction/#listeners","title":"Listeners","text":"<p>A Listener is a special game entity allowing Amplitude to properly render positional sounds. When positional audio is playing, its volume depends on the Listener the sound get attached on, and the configured attenuation model. If there are no active Listeners, then all positional audio will be silent.</p>"},{"location":"getting-started/introduction/#customizable-attenuation-models","title":"Customizable Attenuation Models","text":"<p>You can create an infinite variety of attenuation models for spatial sounds in Amplitude, to adjust the gain of sound sources according to the distance from the Listener. You have total control over the attenuation curve settings, including curve transitions. Each attenuation model is based on one attenuation shape between the following list:</p> <ul> <li>Cone</li> <li>Sphere</li> <li>Box</li> <li>Capsule</li> </ul>"},{"location":"getting-started/introduction/#sound-effects","title":"Sound Effects","text":"<p>Amplitude lets you apply effects via DSP filters to your sound objects. The SDK comes by default with a various set of DSP filters, and you are able to add custom filters by creating a plugin.</p>"},{"location":"getting-started/introduction/#sound-events","title":"Sound Events","text":"<p>Sound events are a way to trigger a set of actions in the game at runtime. For example, you could trigger a set of sound to play and pause after the player has entered a room. Events can run actions sequentially (run one action after another), or simultaneously (run all actions at once). You can add many actions in your event as needed, and each action is of a specific type from the list below:</p> <ul> <li>None: Just do nothing.</li> <li>Wait: Wait for the specified amount of time.</li> <li>Play: Play the specified sound objects.</li> <li>Pause: Pause the specified sound objects.</li> <li>Resume: Resume the specified sound objects if previously paused.</li> <li>Stop: Stop the specified sound objects. Already stopped sound objects will be skipped.</li> <li>Seek: Seeks the specified sound object playback to the specified position.</li> <li>MuteBus: Completely mute the specified buses.</li> <li>UnmuteBus: Unmute previously muted buses.</li> </ul>"},{"location":"getting-started/introduction/#buses-management-and-auto-ducking","title":"Buses Management and Auto-ducking","text":"<p>When you play a sound object, a channel is produced. That channel is sent to a bus and then processed by the mixer. Buses can interact together in a way that a bus affect the gain of another one. If there is an important sound or voice over that needs to be heard, audio playing on less important buses can be ducked to ensure the player hears what they need.</p>"},{"location":"getting-started/introduction/#channel-priority","title":"Channel Priority","text":"<p>In your game you may have multiple sound objects playing at the same time, which can be more than what the game can handle. Amplitude will manage the priority of each audio channel and only drop the least important channels when too many simultaneous streams play at once. The number of simultaneous active and virtual channels can be configured for the Engine.</p>"},{"location":"getting-started/introduction/#cli-tools","title":"CLI Tools","text":"<p>The SDK comes shipped with CLI tools of various usage:</p> <ul> <li>amac: (Amplitude Audio Compressor) allows you to compress an audio sample with a high-quality ADPCM compression, and can optionally convert the sample rate. It's highly recommended to use amac when releasing a project running Amplitude.</li> <li>ampk: (Amplitude Package Builder) allows you to create a release package of your Amplitude project. It packs all your project data, audio assets included, into a single file (<code>.ampk</code>) that you can easily ship in your game.</li> <li>amir: (Amplitude IR Sphere Builder) allows you to create an IR (Impulse Response) sphere asset to use for HRTF and Ambisonic rendering at runtime. It supports various IR dataset models such as the MIT (KEMAR) dataset, the IRCAM (LISTEN) dataset, the SADIE II dataset, as well as any SOFA file.</li> </ul>"},{"location":"getting-started/official-integrations/","title":"Official Integrations","text":"<p>Amplitude has officially supported integrations for the following game engines.</p>"},{"location":"getting-started/official-integrations/#o3de","title":"O3DE","text":"<p>O3DE is an open source game engine to build AAA games. Amplitude is available on O3DE with an official gem available in a public GitHub repository. The gem provides deep integration into the O3DE Audio System and allow seamless migration to and from other implementations.</p>"},{"location":"getting-started/studio/","title":"Amplitude Studio","text":"<p>Amplitude Studio is the official authoring tool for your Amplitude projects. The tool offers a graphical user interface and some command line utilities to create, manage, and ship your projects with ease.</p> <p>Amplitude Studio is still in active development and will be released soon. Join our Discord server to not miss any announcements!</p>"},{"location":"integration/cmake-setup/","title":"CMake Setup","text":"<p>Note</p> <p>Make sure you followed the installation instructions first before to continue this setup. If you encounter problems, please ask for support in our Discord server.</p> <p>After the SDK has been successfully installed, it can be used into any CMake-based projects. You should make sure the <code>AM_SDK_PATH</code> environment variable is set before to configure your project. If not, you can manually set it as a CMake variable using the CLI:</p> <pre><code>cmake -DAM_SDK_PATH=/path/to/amplitude/sdk -S /path/to/sources -B /path/to/build\n</code></pre> <p>Or directly in your <code>CMakeLists.txt</code> file:</p> <pre><code>set(AM_SDK_PATH \"/path/to/amplitude\" CACHE PATH \"The path to Amplitude Audio SDK libraries.\")\n</code></pre> <p>After the <code>AM_SDK_PATH</code> variable is set, you should add the path to CMake scripts provided by the SDK to the current <code>CMAKE_MODULE_PATH</code> variable. For example:</p> <pre><code># If using the environment variable\nlist(APPEND CMAKE_MODULE_PATH \"$ENV{AM_SDK_PATH}/cmake\")\n\n# If using the CMake variable\nlist(APPEND CMAKE_MODULE_PATH \"${AM_SDK_PATH}/cmake\")\n</code></pre> <p>This will make available the <code>FindAmplitudeAudioSDK.cmake</code> and the <code>DetectAmplitudeVersion.cmake</code> scripts.</p> <p>You can now call the <code>find_package</code> CMake function to make the SDK libraries available to your project:</p> <pre><code>find_package(AmplitudeAudioSDK REQUIRED)\n</code></pre> <p>The script will try to automatically detect your platform. If you want to set the platform yourself, you can use the <code>AM_SDK_PLATFORM</code> CMake variable with the following values:</p> <ul> <li><code>x64-windows</code></li> <li><code>x64-linux</code></li> <li><code>x64-osx</code></li> <li><code>arm64-osx</code></li> </ul> <p>For vcpkg users, it's preferred to let Amplitude use the same vcpkg triplet as the project. This can be done in the <code>CMakeLists.txt</code> file:</p> <pre><code>set(AM_SDK_PLATFORM ${VCPKG_TARGET_TRIPLET} CACHE STRING \"The platform to use for the Amplitude Audio SDK libraries.\")\n</code></pre> <p>Warning</p> <p>If defined, the <code>AM_SDK_PLATFORM</code> variable should be set before to call the CMake <code>find_package</code> function.</p> <p>Info</p> <p>You have to make sure your SDK installation have the libraries for the requested platform.</p> <p>After the call to <code>find_package</code>, 2 libraries will be available:</p> <ul> <li><code>SparkyStudios::Audio::Amplitude::SDK::Shared</code>: Amplitude Audio SDK as a shared library. You can link to this library if you intend to use plugins, or you don't want static linking.</li> <li><code>SparkyStudios::Audio::Amplitude::SDK::Static</code>: Amplitude Audio SDK as a static library. Linking to this library will make your project unable to load plugins at runtime, as they need dynamic linking to work properly.</li> </ul> <p>You just have to pick the one which suits the best to your needs and link your project with it:</p> <pre><code># Shared library\ntarget_link_libraries(my_project\n    PRIVATE SparkyStudios::Audio::Amplitude::SDK::Shared\n)\n\n# Static library\ntarget_link_libraries(my_project\n    PRIVATE SparkyStudios::Audio::Amplitude::SDK::Static\n)\n</code></pre> <p>Now you can use the SDK in your project!</p>"},{"location":"integration/compiling-amplitude-project/","title":"Compiling Amplitude Projects","text":"<p>Note</p> <p>You will need to have an Amplitude project to follow these instructions. Please read the project setup documentation to create a project. You can also get one of the sample projects provided in the GitHub repository.</p> <p>As explained in the project architecture documentation, an Amplitude project in mainly based on JSON files. But when it's time to integrate the engine with your game, it's required to compile these JSON files into binaries, through the <code>flatc</code> compiler.</p> <p>The SDK comes with python scripts you can use to build an entire project, or clean any previously compiled binaries. To use them you will need to download the flatbuffers compiler (<code>flatc</code>) corresponding to your platform, and make sure Python is installed and accessible through your <code>PATH</code> environment variable.</p>"},{"location":"integration/compiling-amplitude-project/#building-a-project","title":"Building a project","text":"<p>The <code>build_project.py</code> script is used to build an Amplitude project. The script can take the following command line arguments:</p> <ul> <li><code>-f</code>, <code>--flatc</code>: The path to the <code>flatc</code> executable. This argument is optional and if not provided, the script will look up for a valid <code>flatc</code> executable in the <code>PATH</code> environment variable and in the <code>bin</code> directory of your Amplitude Audio SDK installation.</li> <li><code>-p</code>, <code>--project-path</code>: The path to the Amplitude project. You should specify the full path to the directory containing Amplitude assets. This argument is required.</li> <li><code>-b</code>, <code>--build-path</code>: The path to the directory where built files will be created. The build directory structure will be the same as the project directory. If the given path doesn't exist it will be automatically created. This argument is required.</li> </ul> <pre><code>python3 $AM_SDK_PATH/scripts/build_project.py -p \"/path/to/amplitude/project\" -b \"/path/to/build\"\n</code></pre>"},{"location":"integration/compiling-amplitude-project/#cleaning-a-build","title":"Cleaning a build","text":"<p>You may want to clean all the build files generated in the previous step. For that purpose, the SDK comes with a <code>clean_project.py</code> script. Its usage is the same as the <code>build_project.py</code> script, except that it's not needed to provide the path to the <code>flatc</code> executable.</p> <pre><code>python3 $AM_SDK_PATH/scripts/clean_project.py -p \"/path/to/amplitude/project\" -b \"/path/to/build\"\n</code></pre>"},{"location":"integration/compiling-amplitude-project/#additional-command-line-arguments","title":"Additional command line arguments","text":"<p>Both <code>build_project.py</code> and <code>clean_project.py</code> scripts provides the following additional arguments:</p> <ul> <li><code>-h</code>, <code>--help</code>: Displays help/documentation about the usage of the running script.</li> <li><code>--no-logo</code>: Used to not display the copyright header.</li> <li><code>-v</code>, <code>--version</code>: Shows the version of the running script.</li> </ul>"},{"location":"integration/initializing-the-engine/","title":"Initializing the Engine","text":"<p>Note</p> <p>You will need to have an Amplitude project to follow these instructions. Please read the project setup documentation to create a project. You can also get one of the sample projects provided in the GitHub repository.</p> <p>Amplitude is built with several components, which should be initialized separately before to start playing audio or interacting with your game.</p>"},{"location":"integration/initializing-the-engine/#logger","title":"Logger","text":"<p>Amplitude comes with a default <code>ConsoleLogger</code> and a set of shortcut macros for you to use. You are able to change the default logger by implementing the <code>Logger</code> interface.</p> <pre><code>// Implement the Logger interface\nclass MyLogger : public Logger\n{\nprotected:\n  void Log(LogMessageLevel level, const char* file, int line, const AmString&amp; message) override\n  {\n    // Write the log message where you want here, maybe a file, or a network buffer\n  }\n};\n\n// Create a global instance to your logger class\nMyLogger gLogger;\n\n// Set your logger as the default one\nLogger::SetDefault(&amp;gLogger);\n</code></pre> <p>Setting the logger is optional, as it is not a required component. But if you want to use it, it is usually better to initialize it first, as it is used in every part of the SDK.</p>"},{"location":"integration/initializing-the-engine/#memorymanager","title":"MemoryManager","text":"<p>The memory manager is the first required component to initialize. It is responsible for all the allocations occurring in the SDK (even the ones due to other components' initialization), and in your application.</p> <p>While initializing the memory manager, you can customize the allocation functions through the <code>MemoryManagerConfig</code> structure. You should either set all the functions, or none of them.</p> <p>A typical memory manager initialization code will look like this:</p> <pre><code>#include &lt;SparkyStudios/Audio/Amplitude/Amplitude.h&gt;\n\nusing namespace SparkyStudios::Audio::Amplitude;\n\nint main(int argc, char* argv[])\n{\n  // Initialize the memory manager\n  // Note that for custom configs, all the functions should be defined\n  MemoryManagerConfig config{};\n  // config.alignedMalloc = my_malign;\n  // config.alignedRealloc = my_realign;\n  // config.free = my_free;\n  // config.malloc = my_malloc;\n  // config.realloc = my_realloc;\n  // config.sizeOf = my_sizeof;\n  // config.totalReservedMemorySize = my_total_mem_size;\n  MemoryManager::Initialize(config); // Using the memory manager configuration.\n\n  // ... your code ...\n\n  MemoryManager::Deinitialize();\n\n  return 0;\n}\n</code></pre>"},{"location":"integration/initializing-the-engine/#filesystem","title":"FileSystem","text":"<p>The file system component is responsible to read/write resources as needed by the SDK. Amplitude comes shipped with a <code>DiskFileSystem</code> implementation allowing you to access files on disk, and a <code>PackageFileSystem</code> implementation allowing you to read files bundled in an Amplitude Package file (<code>.ampk</code>). You can easily create your own file system implementation to fit your needs (eg: accessing assets from the network).</p> <p>The used file system implementation should be set as the default one in the engine after the initialization. For example, if you use the <code>DiskFileSystem</code> implementation, a typical usage will look like:</p> <pre><code>DiskFileSystem fs;\nfs.SetBasePath(AM_OS_STRING(\"./my_project\")); // Set the base path of the file system. For the DiskFileSystem, this path is the path to your Amplitude project build files.\n\namEngine-&gt;SetFileSystem(&amp;fs); // Set the file system implementation to use in the engine.\n</code></pre> <p>According to the implementation, the file system may be opened in a background thread to do an heavy operation (eg: unpacking an archive). If it's the case for you, it is necessary to wait for the file system to load before to continue. You can do this using the following code:</p> <pre><code>// Open the file system\namEngine-&gt;StartOpenFileSystem();\nwhile (!amEngine-&gt;TryFinalizeOpenFileSystem()) // While the file system is still opening\n    Thread::Sleep(1); // Wait for the file system to open\n</code></pre> <p>The process is similar if you want to close your file system after the engine is being deinitialized or your application is being closed:</p> <pre><code>// Close the file system\namEngine-&gt;StartCloseFileSystem();\nwhile (!amEngine-&gt;TryFinalizeCloseFileSystem()) // While the file system is still closing\n    Thread::Sleep(1); // Wait for the file system to close\n</code></pre>"},{"location":"integration/initializing-the-engine/#plugins","title":"Plugins","text":"<p>Plugins allow you to extend the functionalities of the engine (eg: adding codecs, filters, faders, pipeline nodes, etc...), and therefore, they should be loaded before the engine itself is initialized.</p> <p>Amplitude comes shipped with some default plugins you may enable if necessary. To do so, you should call the following function:</p> <pre><code>// Register all the default plugins shipped with the engine\nEngine::RegisterDefaultPlugins();\n</code></pre> <p>Info</p> <p>Unless you are not going to use any of the bundled features of the engine, it is highly recommended enabling default plugins.</p> <p>You are also able to create custom plugins, and build them as shared libraries for use in your applications. These libraries are loaded dynamically at runtime by the engine.</p> <p>Warning</p> <p>If using custom/external plugins, you must link Amplitude as a shared library to your program. Otherwise, your program and plugins won't share the same memory space, and plugins won't work properly.</p> <p>The SDK allows you to set the paths in which to search for external plugins:</p> <pre><code>// The path is relative to the working directory, which is usually the same path as the executable.\nEngine::AddPluginSearchPath(AM_OS_STRING(\"./my_project/plugins\"));\n</code></pre> <p>You must add all the search paths before to load plugins, as you cannot load a plugin using a path, either relative or absolute.</p> <p>Info</p> <p>By default, the engine will search first in the working directory before to look in the added search paths.</p> <p>Once the search paths have been added, the engine can now load your plugins:</p> <pre><code>Engine::LoadPlugin(AM_OS_STRING(\"AmplitudeVorbisCodecPlugin\")); // Official plugin for Vorbis/OGG codec\nEngine::LoadPlugin(AM_OS_STRING(\"MyCustomPlugin\")); // Any other awesome plugin you will build\n</code></pre> <p>Info</p> <p>Note that plugins are loaded using their canonical name, without prefix (eg: <code>lib</code> on UNIX platforms) and without extension (eg: <code>.dll</code> on Windows platforms). Amplitude will add them for you automatically.</p>"},{"location":"integration/initializing-the-engine/#amplitude-engine","title":"Amplitude Engine","text":"<p>The Amplitude engine is initialized with a specific configuration, from the ones available in your Amplitude project:</p> <pre><code>// The path to the configuration file is relative to the base path of the file system\nif (!amEngine-&gt;Initialize(AM_OS_STRING(\"./pc.config.amconfig\")))\n  return 1; // There is usually nothing more to do if the engine has failed initializing...\n</code></pre> <p>Once the engine is initialized, you can start to interact with audio files and with your loaded Amplitude project.</p>"},{"location":"integration/initializing-the-engine/#wrapping-up","title":"Wrapping Up","text":"<p>A full example of the SDK initialization may look like this:</p> main.cpp<pre><code>#include &lt;SparkyStudios/Audio/Amplitude/Amplitude.h&gt;\n\nusing namespace SparkyStudios::Audio::Amplitude;\n\n// Implement the Logger interface\nclass MyLogger : public Logger\n{\nprotected:\n  void Log(LogMessageLevel level, const char* file, int line, const AmString&amp; message) override\n  {\n    // Write the log message where you want here, maybe a file, or a network buffer\n  }\n};\n\n// Create a global instance to your logger class\nMyLogger gLogger;\n\nint main(int argc, char* argv[])\n{\n  // Set your logger as the default one\n  Logger::SetDefault(&amp;gLogger);\n\n  // Initialize the memory manager\n  // Note that for custom configs, all the functions should be set if one of them is specified\n  MemoryManagerConfig config{};\n  // config.alignedMalloc = my_malign;\n  // config.alignedRealloc = my_realign;\n  // config.free = my_free;\n  // config.malloc = my_malloc;\n  // config.realloc = my_realloc;\n  // config.sizeOf = my_sizeof;\n  // config.totalReservedMemorySize = my_total_mem_size;\n  MemoryManager::Initialize(config); // Using the memory manager configuration.\n\n  DiskFileSystem fs;\n\n  // Set the base path of the file system. Usually the path to your Amplitude project.\n  fs.SetBasePath(AM_OS_STRING(\"./my_project\"));\n\n  // Set the file system implementation to use in the engine.\n  amEngine-&gt;SetFileSystem(&amp;fs);\n\n  // Open the file system\n  amEngine-&gt;StartOpenFileSystem();\n  while (!amEngine-&gt;TryFinalizeOpenFileSystem()) // While the file system is still opening\n      Thread::Sleep(1); // Wait for the file system to open\n\n  // Register all the default plugins shipped with the engine\n  Engine::RegisterDefaultPlugins();\n\n  // The path is relative to the working directory, which is usually the same path as the executable.\n  Engine::AddPluginSearchPath(AM_OS_STRING(\"./my_project/plugins\"));\n\n  Engine::LoadPlugin(AM_OS_STRING(\"AmplitudeVorbisCodecPlugin\")); // Official plugin for Vorbis/OGG codec\n  Engine::LoadPlugin(AM_OS_STRING(\"MyCustomPlugin\")); // Any other awesome plugin you will build\n\n  // The path to the configuration file is relative to the base path of the file system\n  if (amEngine-&gt;Initialize(AM_OS_STRING(\"./pc.config.amconfig\")))\n  {\n    // ... Can now play audio files and access project data ...\n\n    // Deinitialize the Amplitude engine\n    amEngine-&gt;Deinitialize();\n  }\n\n  // Close the file system\n  amEngine-&gt;StartCloseFileSystem();\n  while (!amEngine-&gt;TryFinalizeCloseFileSystem()) // While the file system is still closing\n      Thread::Sleep(1); // Wait for the file system to close\n\n  // Unregister all default plugins\n  Engine::UnregisterDefaultPlugins();\n\n  // Destroy the Amplitude engine instance\n  amEngine-&gt;DestroyInstance();\n\n  // Deinitialize the memory manager\n  MemoryManager::Deinitialize();\n\n  return 0;\n}\n</code></pre>"},{"location":"integration/loading-sound-banks/","title":"Loading sound banks","text":"<p>When the engine is fully initialized, you have to load a sound bank to be able to play any sound or interact with your Amplitude project at runtime.</p>"},{"location":"integration/loading-sound-banks/#loading-a-sound-bank","title":"Loading a sound bank","text":"<p>By loading a sound bank, the engine will also load all the associated data (effects, attenuation, events, etc.).</p> <p>The process of loading a sound bank is basicaly the following:</p> <pre><code>AmBankID bankId = kAmInvalidObjectId;\n\n// Load the sound bank 'init.ambank', and store its ID in 'bankId'\nif (!amEngine-&gt;LoadSoundBank(AM_OS_STRING(\"init.ambank\"), bankId))\n  return 1;\n\n// You can now use sound bank data\n</code></pre> <p>Info</p> <p>You can load as many sound bank as you want. If one of your asset (sound object, effects, attenuation, etc.) has been registered in more than one loaded sound bank, that asset will be loaded only once, and reference counted. The reference count will decrement each time you unload sound banks, and the asset's memory will be totally released once the last sound bank referencing it is unloaded.</p>"},{"location":"integration/loading-sound-banks/#loading-sound-files","title":"Loading sound files","text":"<p>At this point, the engine has only preloaded sound objects associated to the sound bank. The process of loading sound files is done manually, in another thread, so the main thread is ensured to not hang during this time.</p> <p>During this process, only sound files with streaming disabled will be entirely read and stored in memory. Other sound files will read from the file system on playback.</p> <pre><code>// Load sound files from sound objects registered in all loaded sound banks\namEngine-&gt;StartLoadSoundFiles();\n\n// You can optionally wait for the loading to finish\nwhile (!amEngine-&gt;TryFinalizeLoadSoundFiles())\n  Thread::Sleep(1);\n\n// You can now play sound objects\n</code></pre> <p>Note</p> <p>Audio data loaded in memory are shared across every sound instances.</p>"},{"location":"integration/loading-sound-banks/#unloading-sound-banks","title":"Unloading sound banks","text":"<p>To unload a sound bank, you just need to call an <code>Engine</code> method with the name or the ID of the sound bank to unload.</p> <pre><code>// Unload a sound bank with name\namEngine-&gt;UnloadSoundBank(\"init.ambank\");\n\n// Unload a sound bank with id\namEngine-&gt;UnloadSoundBank(1234);\n</code></pre> <p>Once the sound bank is unloaded, all the registered assets are released too. If one or more of these assets were loaded by more that one sound bank, their reference count will be decremented.</p>"},{"location":"integration/managing-game-objects/","title":"Managing Game Objects","text":"<p>Incomplete documentation</p> <p>This documentation page is WIP and not yet complete.</p> <p>Amplitude has various items labeled as game objects: Entities, Listeners, Environments, and Rooms.</p>"},{"location":"integration/managing-game-objects/#entities","title":"Entities","text":"<p>Entities are game objects used to spatialize sound sources. Entities share with the sound sources they are playing spatial properties like position, orientation, and directivity.</p> <p>To create a new Entity, you should use the <code>AddEntity()</code> method from the Engine:</p> <pre><code>// Adding an entity\nEntity speaker = amEngine-&gt;AddEntity(1234); // 1234 is the entity unique ID\n</code></pre> <p>You must provide a unique ID for the Entity when creating it, attempting to create another Entity with the same ID, will just return the previously created entity.</p> <p>Tip</p> <p>It's strongly recommended using the same ID from your game's entity, to easily recognize what entity in Amplitude is linked to what entity in your game.</p> <p>Warning</p> <p>The maximum number of entities you can add is restricted by the loaded engine configuration. Please make sure to set the appropriate value for your project.</p> <p>Once you have a valid Entity, you can use it to play a sound on it:</p> <pre><code>// Create a gun entity\nEntity gun = amEngine-&gt;AddEntity(271097);\n\n// Play a gunfire sound on a gun entity\nChannel gunfire = amEngine-&gt;Play(\"weapons/ak47/gunfires\", gun);\n\n// Now the gun entity will feed the sound source with spatial properties...\n</code></pre> <p>Warning</p> <p>Note that the played sound source must be configured with either Position, PositionOrientation, or HRTF spatialization before to accept any spatial data coming from the entity. Learn more about configuring spatialization for sound sources here.</p> <p>Info</p> <p>Learn more about channels and other ways to play audio in the Playing Audio integration guide.</p> <p>If you want to get a reference to an existing entity, You should use the <code>GetEntity()</code> method from the Engine:</p> <pre><code>// Get an existing entity\nEntity gun = amEngine-&gt;GetEntity(271097);\n</code></pre> <p>If an entity queried this way does not exist, an invalid entity will be returned instead. So it's always safe to check for the entity validity before using it:</p> <pre><code>// Get an entity\nEntity speaker = amEngine-&gt;GetEntity(1234);\n\n// Check if the entity is valid\nif (!speaker.Valid())\n    amLogError(\"Unable to find an entity with ID: 1234\");\n</code></pre> <p>When it's time to remove an Entity, you should call the <code>RemoveEntity()</code> method from the Engine:</p> <pre><code>// Remove an existing entity using its ID\namEngine-&gt;RemoveEntity(271097);\n\n// Remove an existing entity using its reference\namEngine-&gt;RemoveEntity(&amp;gun);\n</code></pre> <p>If the entity to remove was already removed, calling this method will do nothing.</p> <p>API Reference available</p> <p>Check out the API reference for the complete list of methods you can use with an Entity.</p>"},{"location":"integration/managing-game-objects/#listeners","title":"Listeners","text":"<p>Listeners are game objects able to render sound sources. At least one Listener is required in the Engine for Amplitude to be able to render any spatialized sound sources</p>"},{"location":"integration/managing-game-objects/#environments","title":"Environments","text":""},{"location":"integration/managing-game-objects/#rooms","title":"Rooms","text":""},{"location":"integration/playing-audio/","title":"Playing audio","text":""},{"location":"integration/playing-audio/#handles","title":"Handles","text":"<p>Handles represent an instance to specific sound object. There are many handle types, each of them corresponding to a sound object type.</p> <pre><code>// Sounds\nSoundHandle backgroundSound = amEngine-&gt;GetSoundHandle(\"bg_forest\");\n\n// Collections\nCollectionHandle gunFires = amEngine-&gt;GetCollectionHandle(\"ak47_gunfires\");\n\n// Switch Containers\nSwitchContainerHandle footsteps = amEngine-&gt;GetSwitchContainerHandle(\"footsteps\");\n</code></pre> <p>In the case you don't care about your sound object type and want a generic sound object handle, you can do it by using the <code>GetSoundObjectHandle()</code> method. The returned handle will be one of the previous ones, according to the type of sound object you are querying.</p> <pre><code>// Get a generic sound handle\nSoundObjectHandle handle = amEngine-&gt;GetSoundObjectHandle(\"dialogue_01\");\n</code></pre> <p>Note</p> <p>When using the <code>GetSoundObjectHandle()</code> method, Amplitude will scan your assets in this order: Sounds, then Collections, and then Switch Containers.</p> <p>It's always safe to check if your handle is valid before using it. Once you get your handle, you can check for its validity by comparing it to the <code>AM_INVALID_HANDLE</code> macro, or by directly using the <code>AM_IS_VALID_HANDLE()</code> macro function.</p> <pre><code>// Get an handle\nauto handle = amEngine-&gt;GetSoundHandle(\"footsteps\"); // This is instead a switch container, but we are querying it as a sound, which will return an invalid handle\n\nif (handle == AM_INVALID_HANDLE)\n    amLogError(\"The returned handle is invalid\");\n\n// Same as doing\nif (!AM_IS_VALID_HANDLE(handle))\n    amLogError(\"The returned handle is invalid\");\n</code></pre>"},{"location":"integration/playing-audio/#channels","title":"Channels","text":"<p>Each time you play a sound object, you have a Channel that will help you manage the playback of that sound object.</p> <p>To play an audio, you need either its name, its ID, or a handle to its sound object instance, and then use any overrides of the <code>Play()</code> method in the <code>Engine</code></p> <pre><code>// Using the name\nChannel sound = amEngine-&gt;Play(\"dialogue_01\");\n\n// Using the ID\nChannel sound = amEngine-&gt;Play(1234);\n\n// Using an handle\nSoundHandle handle = amEngine-&gt;GetSoundHandle(1234); // or amEngine-&gt;GetSoundHandle(\"dialogue_01\")\nChannel sound = amEngine-&gt;Play(handle);\n</code></pre> <p>Tip</p> <p>Playing a sound object using a handle is always faster than using its name or its ID. Thus, it's recommended to prefer using handles for sound objects you plan to frequently play.</p> <p>For sound sources configured with Position spatialization enabled, you can play them in the world by giving an initial location:</p> <pre><code>// Play a sound source at a given position\nChannel sound = amEngine-&gt;Play(\"voice_01\", AM_V3(10, 20, 30));\n</code></pre> <p>The given position can be updated later in realtime using the Channel API.</p> <p>Note</p> <p>For sound sources configured with any other spatialization other than <code>Position</code>, you should use an <code>Entity</code> to play them. Read the Managing Game Objects documentation to learn more.</p> <p>When you obtain a Channel for a sound object, it's recommended to check if the returned Channel is valid before using it.</p> <pre><code>// Get a channel\nChannel sound = amEngine-&gt;Play(1234);\n\n// Check if the channel is valid\nif (sound.Valid())\n    amLogError(\"The returned channel is not valid\");\n</code></pre> <p>Info</p> <p>Amplitude may return an invalid Channel when the maximum number of channels is exceeded, or the requested sound object was not found in any loaded sound bank.</p> <p>Using a Channel, you can manage the playback state and other sound object properties:</p> <pre><code>// Check whether the sound object in the channel is currently playing\nbool isPlaying = channel.Playing();\n\n// Stop the playback\nchannel.Stop();\n\n// Pause the playback\nchannel.Pause();\n\n// Resume the playback\nchannel.Resume();\n\n// Get the current location of the sound object\nAmVec3 location = channel.GetLocation();\n\n// Set the sound object location\nchannel.SetLocation(newLocation);\n\n// Get the current playback state of the channel\nChannelPlaybackState state = channel.GetPlaybackState(); // Either Playing, Paused, Stopped, FadingIn, or FadingOut\n</code></pre> <p>API Reference available</p> <p>Check out the API Reference to see the complete list of methods you can use with a Channel.</p>"},{"location":"integration/playing-audio/#playback-events","title":"Playback Events","text":"<p>Amplitude allows you to register callbacks for notable playback events within a Channel:</p> <pre><code>// Add a callback when the playback has started\nchannel.On(ChannelEvent::Begin, [](ChannelEventInfo info) {\n    amLogDebug(\"Playback started\");\n});\n\n// Add a callback when the playback is paused\nchannel.On(ChannelEvent::Pause, [](ChannelEventInfo info) {\n    amLogDebug(\"Playback paused\");\n});\n\n// Add a callback when the playback is resumed\nchannel.On(ChannelEvent::Resume, [](ChannelEventInfo info) {\n    amLogDebug(\"Playback resumed\");\n});\n\n// Add a callback when the playback is stopped\nchannel.On(ChannelEvent::Stop, [](ChannelEventInfo info) {\n    amLogDebug(\"Playback stopped\");\n});\n\n// Add a callback when the playback has looped\nchannel.On(ChannelEvent::Loop, [](ChannelEventInfo info) {\n    amLogDebug(\"Playback looped\");\n});\n\n// Add a callback when the playback has ended\nchannel.On(ChannelEvent::End, [](ChannelEventInfo info) {\n    amLogDebug(\"Playback ended\");\n});\n</code></pre> <p>API Reference available</p> <p>You can also pass arbitrary data to the method and access it in the callback using the event <code>info</code>. Check out the Channel API Reference and the ChannelEventInfo API Reference to lean more.</p>"},{"location":"integration/the-rendering-loop/","title":"The rendering loop","text":"<p>Amplitude has been built in a way it will adapt to your game framerate. For that, any update to the internal state is done in a rendering loop (which may be your main game loop), where you provide to the engine the time elapsed since the last update.</p> <p>A typical rendering loop may look as this:</p> <pre><code>// A rendering loop running at 60 FPS\nwhile (true)\n{\n  if (!mIsRunning)\n    break;\n\n  // ... Update Amplitude state ...\n\n  AmTime fps = 1.0 / 60.0; // Limit to 60 frames per seconds\n  amEngine-&gt;AdvanceFrame(fps); // Apply the engine state updates\n  Thread::Sleep(static_cast&lt;AmInt32&gt;(fps * kAmSecond)); // Wait for the next frame to start\n}\n</code></pre> <p>In most of the cases, you will just need to place the <code>AdvanceFrame()</code> method somewhere in your game update procedure.</p> <p>Tip</p> <p>The recommended place to update Amplitude is after the update of the physics system, and before the update of the render system.</p> <p>Amplitude uses the <code>AdvanceFrame()</code> method is to update the internal state of various game objects such as entities, listeners, rooms, and environments, as well as fading state, playback status of running channels, and RTPC curves.</p>"},{"location":"project/api/","title":"Common API","text":""},{"location":"project/api/#curve-definition","title":"CurveDefinition","text":"<p>Describes a function that is applied on a value to transform the result.</p>"},{"location":"project/api/#curve-definition-parts","title":"parts","text":"<p><code>CurvePartDefinition[]</code> <code>required</code></p> <p>An array of objects representing each part of the curve. Each object provides a start point, an end point, and fading function to use to link them. Check the CurvePartDefinition section for more information.</p> <p>The final range of the curve will be bounded within the lowest point and the highest point of all the curve parts.</p>"},{"location":"project/api/#curve-definition-example","title":"Example","text":"<pre><code>{\n  \"parts\": [\n    {\n      \"start\": {\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"end\": {\n        \"x\": 1,\n        \"y\": 1\n      },\n      \"fader\": \"Linear\"\n    }\n  ]\n}\n</code></pre>"},{"location":"project/api/#curve-part-definition","title":"CurvePartDefinition","text":"<p>An object describing a single part of a curve. Allowed properties are:</p>"},{"location":"project/api/#curve-part-definition-start","title":"start","text":"<p><code>CurvePointDefinition</code> <code>required</code></p> <p>The start point of the curve. It stores the coordinates of the point in the graph. Check the CurvePointDefinition section for more information.</p>"},{"location":"project/api/#curve-part-definition-end","title":"end","text":"<p><code>CurvePointDefinition</code> <code>required</code></p> <p>The end point of the curve. It stores the coordinates of the point in the graph. Check the CurvePointDefinition section for more information.</p>"},{"location":"project/api/#curve-part-definition-fader","title":"fader","text":"<p><code>string</code> <code>required</code></p> <p>The fader transition to use while moving values from the <code>start</code> point to the <code>end</code> point. This stores as value a name to a registered fader transition.</p>"},{"location":"project/api/#curve-part-definition-example","title":"Example","text":"<pre><code>{\n  \"start\": {\n    \"x\": 0,\n    \"y\": 0\n  },\n  \"end\": {\n    \"x\": 1,\n    \"y\": 1\n  },\n  \"fader\": \"SCurveSmooth\"\n}\n</code></pre>"},{"location":"project/api/#curve-point-definition","title":"CurvePointDefinition","text":"<p>Represents a point in a curve graph. It's an object defined by 2 coordinate values:</p>"},{"location":"project/api/#curve-point-definition-x","title":"x","text":"<p><code>double</code> <code>required</code></p> <p>The position of the point over the X-axis. The X-axis represents the values passed to the curve for computation.</p>"},{"location":"project/api/#curve-point-definition-y","title":"y","text":"<p><code>float</code> <code>required</code></p> <p>The position of the point over the Y-axis. The Y-axis represents the result of the computation for a given value.</p>"},{"location":"project/api/#curve-point-definition-example","title":"Example","text":"<pre><code>{\n  \"x\": 1,\n  \"y\": 343.33\n}\n</code></pre>"},{"location":"project/api/#fade-transition-settings","title":"FadeTransitionSettings","text":"<p>This object defines the settings for a fade transition. It is described by the following attributes:</p>"},{"location":"project/api/#fade-transition-settings-duration","title":"duration","text":"<p><code>double</code> <code>required</code></p> <p>The duration of the fade transition. The value is expressed in seconds.</p>"},{"location":"project/api/#fade-transition-settings-fader","title":"fader","text":"<p><code>string</code> <code>required</code></p> <p>The name of the [Fader] algorithm to be used. It can be one of those shipped with the engine or from plugins.</p>"},{"location":"project/api/#fade-transition-settings-example","title":"Example","text":"<pre><code>{\n  \"duration\": 3.0,\n  \"fader\": \"ExponentialSmooth\"\n}\n</code></pre>"},{"location":"project/api/#rtpc-compatible-value","title":"RtpcCompatibleValue","text":"<p>An RTPC-compatible value is an object that can hold a static value or a link to an RTPC value.</p>"},{"location":"project/api/#rtpc-compatible-value-kind","title":"kind","text":"<p><code>ValueKind</code> <code>default: Static</code></p> <p>Specifies the kind of value that should be used. The possible values are:</p> ID Description Static The parameter is static value specified by the <code>value</code> field. RTPC The parameter is a RTPC value specified by the <code>rtpc</code> field. <p>When the <code>kind</code> property is set to <code>Static</code>, it is required to define a <code>value</code> field. When the <code>kind</code> property is set to <code>RTPC</code>, it is required to define a <code>rtpc</code> field.</p> <p>The default value is <code>Static</code>.</p>"},{"location":"project/api/#rtpc-compatible-value-value","title":"value","text":"<p><code>float</code></p> <p>A static value that will be used at runtime. This property is only available when the <code>kind</code> property is set to <code>Static</code>.</p>"},{"location":"project/api/#rtpc-compatible-value-rtpc","title":"rtpc","text":"<p><code>RtpcParameter</code></p> <p>An object that describe how the value should be updated according to a RTPC object. This object takes as input:</p> <ul> <li><code>id</code>: The ID of the RTPC object to use.</li> <li><code>curve</code>: A CurveDefinition object that defines the function to apply on the RTPC value to compute this parameter value.</li> </ul> <p>Check the RtpcParameter section for more information.</p>"},{"location":"project/api/#rtpc-compatible-value-example","title":"Example","text":"<pre><code>// An example of RTPC-compatible value with a static value\n{\n  \"kind\": \"Static\",\n  \"value\": 5\n}\n\n// An example of RTPC-compatible value with a RTPC value\n{\n  \"kind\": \"RTPC\",\n  \"rtpc\": {\n    \"id\": 19,\n    \"curve\": {\n      \"parts\": [\n        {\n          \"start\": {\n            \"x\": 0,\n            \"y\": 1\n          },\n          \"end\": {\n            \"x\": 100,\n            \"y\": 0\n          },\n          \"fader\": \"Linear\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"project/api/#rtpc-parameter","title":"RtpcParameter","text":"<p>An object used to defines how to gather values from a RtpcCompatibleValue with the <code>kind</code> property set to <code>RTPC</code>. This allows you to use a curve to convert values from the RTPC object to other values.</p>"},{"location":"project/api/#rtpc-parameter-id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>The id of the RTPC object where to get the value. This value should reference a valid RTPC object.</p>"},{"location":"project/api/#rtpc-parameter-curve","title":"curve","text":"<p><code>CurveDefinition</code> <code>required</code></p> <p>The curve to use when converting values from the RTPC object. It stores as value an object matching the specification of a CurveDefinition. Check the CurveDefinition section for more information.</p>"},{"location":"project/api/#rtpc-parameter-example","title":"Example","text":"<pre><code>{\n  \"id\": 24,\n  \"curve\": {\n    \"parts\": [\n      {\n        \"start\": {\n          \"x\": 0,\n          \"y\": 1\n        },\n        \"end\": {\n          \"x\": 1,\n          \"y\": 0\n        },\n        \"fader\": \"SCurveSharp\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"project/api/#box-shape-definition","title":"BoxShapeDefinition","text":""},{"location":"project/api/#capsule-shape-definition","title":"CapsuleShapeDefinition","text":""},{"location":"project/api/#cone-shape-definition","title":"ConeShapeDefinition","text":""},{"location":"project/api/#sphere-shape-definition","title":"SphereShapeDefinition","text":""},{"location":"project/attenuation-model/","title":"Attenuation Model","text":"<p>Attenuation models are a way to specify how the gain of a sound object is affected by its position in space (in the case of spatialized sounds), and its distance from the attached listener.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>An attenuation model is configured with the following properties:</p>"},{"location":"project/attenuation-model/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique identifier for the attenuation model. This will be used later to specify the attenuation model in the sound objects. This value should be different from <code>0</code>.</p>"},{"location":"project/attenuation-model/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>A unique name for the attenuation model. This may be used in runtime to access the attenuation instance from the engine.</p>"},{"location":"project/attenuation-model/#max_distance","title":"max_distance","text":"<p><code>double</code> <code>required</code></p> <p>The maximum distance for the sound object to propagate. When the distance from a sound object to its attached listener is greater than the <code>max_distance</code> value, the gain is automatically set to zero.</p>"},{"location":"project/attenuation-model/#shape","title":"shape","text":"<p><code>AttenuationShape</code> <code>required</code></p> <p>Each attenuation model is represented by a shape instructing the engine on how to affect the sound object's gain.</p> <p>The value of the <code>shape</code> property is an object with the following properties:</p>"},{"location":"project/attenuation-model/#zone","title":"zone","text":"<p><code>Zone</code> <code>required</code></p> <p>This value stores the definition of the type of shape you want for the attenuation model. The final attenuation behavior will depend on the specified shape. Amplitude made available the following shapes for attenuation models:</p> <ul> <li>Box Shape</li> <li>Capsule Shape</li> <li>Cone Shape</li> <li>Sphere Shape</li> </ul> <p>Info</p> <p>To learn more about shapes and their properties, please refer to the Shape API reference.</p>"},{"location":"project/attenuation-model/#max_attenuation_factor","title":"max_attenuation_factor","text":"<p><code>float</code> <code>required</code></p> <p>The <code>max_attenuation_factor</code> value defines the maximum amount of attenuation to apply to the sound object. This value is used when the listener is inside the outer zone of the shape but outside its inner zone.</p>"},{"location":"project/attenuation-model/#gain_curve","title":"gain_curve","text":"<p><code>Curve</code> <code>required</code></p> <p>This specifies the curve used to change the sound object's gain. The values over the X-axis of the curve are the distance between the sound object and the listener, and over the Y-axis of the curve is the gain of the sound object. For best results, the curve must fit in the range <code>[0, max_distance]</code> over the X-axis, and in the range <code>[0, 1]</code> over the Y-axis.</p>"},{"location":"project/attenuation-model/#example","title":"Example","text":"<p>An example of a simple attenuation model with a box shape may be:</p> room.json<pre><code>{\n  \"id\": 2,\n  \"name\": \"room\",\n  \"max_distance\": 40,\n  \"shape\": {\n    \"zone_type\": \"Box\",\n    \"zone\": {\n      \"inner\": {\n        \"half_width\": 15,\n        \"half_height\": 5,\n        \"half_depth\": 5\n      },\n      \"outer\": {\n        \"half_width\": 20,\n        \"half_height\": 35,\n        \"half_depth\": 10\n      }\n    },\n    \"max_attenuation_factor\": 0.125\n  },\n  \"gain_curve\": {\n    \"parts\": [\n      {\n        \"start\": {\n          \"x\": 0,\n          \"y\": 1\n        },\n        \"end\": {\n          \"x\": 40,\n          \"y\": 0\n        },\n        \"fader\": \"ExponentialSmooth\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"project/buses-config/","title":"Buses Configuration","text":"<p>This configuration file allows you to register the list of buses Amplitude will use at runtime. For each bus, you can configure settings for auto-ducking between them.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>When configuring buses, you are allowed to create as many buses you want, but there should be at least one <code>master</code> bus. The master bus is a special bus that controls all the other buses. It should have a <code>id</code> attribute set to <code>1</code> and a <code>name</code> attribute set to <code>master</code>.</p> <p>Warning</p> <p>If at the initialization of the engine no master bus has been found, Amplitude will stop, and you won't be able to play any audio.</p>"},{"location":"project/buses-config/#buses","title":"buses","text":"<p><code>array</code> <code>required</code></p> <p>The <code>buses</code> property is the only root property of this file. It should store an array of bus objects describing the settings for each bus. Each object of this array should have the following properties:</p>"},{"location":"project/buses-config/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>The unique identifier of the bus. This value should be unique per bus and should have a value different from <code>0</code>. There is a special rule for the <code>master</code> bus which should have this value set to <code>1</code>.</p>"},{"location":"project/buses-config/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>The unique name of the bus. This value is required and should be unique per bus. There is a special rule for the <code>master</code> bus which should have this value set to <code>master</code>.</p>"},{"location":"project/buses-config/#gain","title":"gain","text":"<p><code>float</code> <code>default: 1.0</code></p> <p>The linear gain is applied to all the sound objects playing on the bus. If set to <code>0.0</code>, all the sound objects of this bus will be muted.</p> <p>The final gain of a bus is calculated by multiplying this value with the parent bus' gain, a user-specified gain provided at runtime, and this bus ducked gain.</p>"},{"location":"project/buses-config/#child_buses","title":"child_buses","text":"<p><code>array</code> <code>optional</code></p> <p>The <code>child_buses</code> property stores a list of integer values, each value representing the <code>id</code> of a bus that should be considered as a child of this one. Child buses are affected by the parent bus' final gain. So if the parent bus is muted (gain = 0.0), then all the children of this bus will be muted too.</p> <p>For the <code>master</code> bus to work properly, you may want to feed his <code>child_buses</code> property with all the root buses (buses with no parent) of your configuration. That way, the <code>master</code> bus will correctly control the gain of all the other buses.</p>"},{"location":"project/buses-config/#duck_buses","title":"duck_buses","text":"<p><code>array</code> <code>optional</code></p> <p><code>duck_buses</code> is an array of objects allowing you to set up a ducking behavior between two or more buses that play sound objects simultaneously. Each object of this array should have the following properties:</p> <ul> <li><code>id</code>: This is the ID of the bus to control between the list of declared buses.</li> <li><code>target_gain</code>: This specifies the target gain the controlled bus should have after the ducking is done.</li> <li><code>fade_in</code>: This is the fader setting used when the controlled bus is being ducked to the target gain.</li> <li><code>fade_out</code>: This is the fader setting used when the controlled bus is being restored to its original gain.</li> </ul>"},{"location":"project/buses-config/#fader","title":"fader","text":"<p><code>string</code> <code>required</code></p> <p>This property stores the name of the fader algorithm that will be used when the gain of this bus is manually updated at runtime.</p> <p>Info</p> <p>Fader and fader settings help you to control how a property should move from one value to another. You can learn more about faders in the Fader API reference.</p>"},{"location":"project/buses-config/#example","title":"Example","text":"<p>An example of a bus configuration file may look like:</p> pc.buses.json<pre><code>{\n  \"buses\": [\n    {\n      \"id\": 1,\n      \"name\": \"master\",\n      \"gain\": 1.0,\n      \"child_buses\": [\n        2,\n        7678456242523\n      ],\n      \"fader\": \"Linear\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"voices\",\n      \"gain\": 1,\n      \"duck_buses\": [\n        {\n          \"id\": 7678456242523,\n          \"target_gain\": 0.25,\n          \"fade_in\": {\n            \"duration\": 3,\n            \"fader\": \"SCurveSmooth\"\n          },\n          \"fade_out\": {\n            \"duration\": 3,\n            \"fader\": \"Linear\"\n          }\n        }\n      ],\n      \"fader\": \"Linear\"\n    },\n    {\n      \"id\": 7678456242523,\n      \"name\": \"environment\",\n      \"gain\": 0.75,\n      \"fader\": \"Linear\"\n    }\n  ]\n}\n</code></pre>"},{"location":"project/collection/","title":"Collection","text":"<p>The Collection is the first container sound object and the simplest. It organizes and schedules a list of Sounds, which can then be played randomly or sequentially according to a scheduler.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>Apart from the common properties of sound object assets, a collection asset contains the following properties:</p>"},{"location":"project/collection/#scheduler","title":"scheduler","text":"<p><code>SoundSchedulerSettings</code> <code>required</code></p> <p>The <code>scheduler</code> property defines the behavior of the sound scheduler of this collection. It takes as value an object with the following properties:</p> <ul> <li><code>mode</code>: The scheduler mode can be either <code>Random</code> or <code>Sequence</code>.</li> <li><code>config</code>: An object containing the configuration of the selected mode.</li> </ul> <p>Amplitude supports 02 (two) scheduler modes for collections, and for each mode a specific configuration:</p>"},{"location":"project/collection/#random-scheduler","title":"Random Scheduler","text":"<p>The random scheduler will randomly pick and play a sound from the collection on each play request. It can be configured to avoid repetitions with the following properties:</p>"},{"location":"project/collection/#avoid_repeat","title":"avoid_repeat","text":"<p><code>bool</code> <code>default: false</code></p> <p>When this property is set to <code>true</code>, the scheduler will avoid picking a sound from the collection before <code>n</code> different sounds are played, where <code>n</code> is the value defined by the <code>repeat_count</code> property.</p>"},{"location":"project/collection/#repeat_count","title":"repeat_count","text":"<p><code>uint</code> <code>default: 1</code></p> <p>When a sound is played, this property specifies the number of other different sounds to play before it may be played again.</p>"},{"location":"project/collection/#sequence-scheduler","title":"Sequence Scheduler","text":"<p>The sequence scheduler will play the sounds of the collection sequentially in the order they have been registered. You can customize the behavior of the scheduler when it reaches the end of the sounds list using the <code>end_behavior</code> property.</p>"},{"location":"project/collection/#end_behavior","title":"end_behavior","text":"<p><code>SequenceSoundSchedulerEndBehavior</code> <code>required</code></p> <p>When the sequence scheduler reaches the end of the collection, this property specifies how it should behave on the next play request. The available values are:</p> ID Description Restart The scheduler will restart the sequence from the first sound of the collection. Reverse The scheduler will play the collection in the reverse order until the first sound is reached. The first and last sounds won't be played twice."},{"location":"project/collection/#play_mode","title":"play_mode","text":"<p><code>CollectionPlayMode</code> <code>default: PlayOne</code></p> <p>Specifies how the sounds in the collection are played when a play request is sent to the collection. The possible values include:</p> ID Description PlayOne On each play request, a single sound is picked by the scheduler and played PlayAll On each play request, the scheduler will pick and play each sound of the collection, one after the other, until each of the sounds has played. It's guaranteed that all sounds will play exactly once."},{"location":"project/collection/#sounds","title":"sounds","text":"<p><code>CollectionEntry[]</code> <code>required</code></p> <p>This property contains the list of sounds registered to the collection. It's an array where each item is an object with the following properties:</p>"},{"location":"project/collection/#sound","title":"sound","text":"<p><code>uint64</code> <code>required</code></p> <p>Provides the ID of a sound. That sound object should be defined as a Sound asset first. This value should be different from <code>0</code>.</p>"},{"location":"project/collection/#gain","title":"gain","text":"<p><code>RtpcCompatibleValue</code> <code>required</code></p> <p>This property is used to override the default gain of the sound object. It stores an RtpcCompatibleValue object.</p>"},{"location":"project/collection/#weight","title":"weight","text":"<p><code>float</code> <code>default: 1.0</code></p> <p>This property is used only when the collection scheduler mode is set to <code>Random</code>. The value is a floating number in the range <code>[0, 1]</code>, representing the probability (relative to other sounds of the same collection) of the sound to be picked by the random scheduler. The default value is <code>1.0</code>.</p>"},{"location":"project/collection/#example","title":"Example","text":"grass_footsteps.json<pre><code>{\n  \"id\": 1003,\n  \"name\": \"grass_footsteps\",\n  \"priority\": {\n    \"kind\": \"Static\",\n    \"value\": 1.0\n  },\n  \"gain\": {\n    \"kind\": \"Static\",\n    \"value\": 0.0625\n  },\n  \"bus\": 2,\n  \"sounds_type\": [\n    \"Random\",\n    \"Random\",\n    \"Random\",\n    \"Random\",\n    \"Random\",\n    \"Random\",\n    \"Random\",\n    \"Random\"\n  ],\n  \"sounds\": [\n    {\n      \"sound\": 201,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    },\n    {\n      \"sound\": 202,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    },\n    {\n      \"sound\": 203,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    },\n    {\n      \"sound\": 204,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    },\n    {\n      \"sound\": 205,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    },\n    {\n      \"sound\": 206,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    },\n    {\n      \"sound\": 207,\n      \"gain\": {\n        \"kind\": \"Static\",\n        \"value\": 1.0\n      }\n    }\n  ],\n  \"spatialization\": \"Position\",\n  \"attenuation\": 1,\n  \"play_mode\": \"PlayOne\",\n  \"scheduler\": {\n    \"mode\": \"Random\",\n    \"config_type\": \"Random\",\n    \"config\": {\n      \"avoid_repeat\": true,\n      \"repeat_count\": 4\n    }\n  },\n  \"scope\": \"Entity\",\n  \"fader\": \"Linear\"\n}\n</code></pre>"},{"location":"project/effect/","title":"Effect","text":"<p>Effects allow you to apply sound effects to any sound object. Effects are applied at the playback time through a pipeline processor.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>An effect file contains the following properties:</p>"},{"location":"project/effect/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique identifier for the effect. This will be used later by the engine and other sound objects to get a reference to this effect. This value should be different from <code>0</code>.</p>"},{"location":"project/effect/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>A unique name for the effect. This may be used in runtime to access the effect instance from the engine.</p>"},{"location":"project/effect/#effect","title":"effect","text":"<p><code>string</code> <code>required</code></p> <p>The name of the effect to apply to the sound object. That name should have been registered in the engine through the Effect API. By default, the engine comes shipper with built-in effects:</p> <ul> <li>BassBoost</li> <li>Delay</li> <li>Equalizer</li> <li>Flanger</li> <li>Freeverb</li> <li>LoFi</li> <li>Robotize</li> </ul> <p>Info</p> <p>You have the ability to create custom effects as plugins and register them with the engine at runtime.</p>"},{"location":"project/effect/#parameters","title":"parameters","text":"<p><code>RtpcCompatibleValue[]</code> <code>required</code></p> <p>The list of parameters to pass to the effect when instantiated. These parameters are RTPC compatible, meaning they can be static or dynamic following RTPC changes from the game.</p>"},{"location":"project/effect/#example","title":"Example","text":"small_room.reverb.json<pre><code>{\n  \"id\": 1,\n  \"name\": \"echo\",\n  \"effect\": \"Delay\",\n  \"parameters\": [\n    {\n      \"kind\": \"Static\",\n      \"value\": 1.0\n    },\n    {\n      \"kind\": \"Static\",\n      \"value\": 5\n    },\n    {\n      \"kind\": \"Static\",\n      \"value\": 1\n    },\n    {\n      \"kind\": \"Static\",\n      \"value\": 0.0\n    }\n  ]\n}\n</code></pre>"},{"location":"project/engine-config/","title":"Engine Configuration","text":"<p>Amplitude has been built in a way to let you have complete freedom on the behavior of the engine at runtime. You can create several configuration files per device (PC, mobile, console), per platform (Windows, Android, XBOX, PlayStation), or any other criteria your project has to suit, then pick and load the right settings file at runtime.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>The config file will let you customize:</p> <ul> <li>The playback device (output)</li> <li>The Amplitude Mixer, called Amplimix (mixer)</li> <li>The synchronization with the game (game)</li> <li>The path to the buses file (buses_file)</li> <li>The name of the driver implementation to use (driver)</li> </ul>"},{"location":"project/engine-config/#output","title":"output","text":"<p><code>object</code> <code>required</code></p> <p>The <code>output</code> property helps you define how Amplitude should communicate with the physical audio device. It takes as value an object with the following properties:</p>"},{"location":"project/engine-config/#frequency","title":"frequency","text":"<p><code>uint</code> <code>default: 48000</code></p> <p>The <code>frequency</code> property defines the audio frequency in Hertz (<code>Hz</code>) of the audio data sent to the audio device by Amplitude. This value may differ from the frequency of the audio device, in such a scenario, the audio data will be resampled from this value to the device's frequency.</p>"},{"location":"project/engine-config/#buffer_size","title":"buffer_size","text":"<p><code>int</code> <code>default: 1024</code></p> <p>This value defines the number of audio bytes used per mix. The number of samples to produce for each output will be calculated automatically by dividing this value by the number of channels. It's highly recommended to use a multiple of 2 for the buffer size.</p>"},{"location":"project/engine-config/#format","title":"format","text":"<p><code>enum</code> <code>default: Float32</code></p> <p>The <code>format</code> property specifies the audio format in which Amplitude will send the audio data to the output device. It can take as value the name of the audio format or the audio format ID:</p> ID Name Description 0 Default Uses the default format available on the audio device. 1 UInt8 Process and send data as <code>unsigned 8-bit fixed-point numbers</code> to the audio device. 2 Int16 Process and send data as <code>signed 16-bit fixed-point numbers</code> to the audio device. 3 Int24 Process and send data as <code>signed 24-bit fixed-point numbers</code> to the audio device. 4 Int32 Process and send data as <code>signed 32-bit fixed-point numbers</code> to the audio device. 5 Float32 Process and send data as <code>signed 32-bit floating-point numbers</code> to the audio device. <p>Info</p> <p>Amplitude internally process audio data as 32-bit floating-point numbers. The <code>format</code> setting is used only when sending audio data to the driver. If the audio device is consuming a format different from the one set here, the role is to the driver to deal with the final format conversion. Most of the time, using <code>Default</code> is the best thing to do.</p>"},{"location":"project/engine-config/#mixer","title":"mixer","text":"<p><code>object</code> <code>required</code></p> <p>The <code>mixer</code> property configures the Amplitude Mixer (Amplimix). It takes as value an object with the following properties:</p>"},{"location":"project/engine-config/#active_channels","title":"active_channels","text":"<p><code>uint</code> <code>required</code></p> <p>Specifies the maximum number of sound channels to render by Amplimix. It equals to the number of sounds playing simultaneously in the game. If the maximum number of channels is reached, Amplitude will prioritize the most important channels and virtualize the others.</p>"},{"location":"project/engine-config/#virtual_channels","title":"virtual_channels","text":"<p><code>uint</code> <code>required</code></p> <p>Specifies the maximum number of virtual channels to use in addition to active channels. Amplimix doesn't render virtual channels, but all the information about them are still tracked.</p>"},{"location":"project/engine-config/#panning_mode","title":"panning_mode","text":"<p><code>enum</code> <code>default: Stereo</code></p> <p>The <code>panning_mode</code> attribute defines how Amplitude will render spatial sounds to speakers. It can take as value the name of the panning mode, or its ID. There are four (04) values available:</p> ID Name Description 0 Stereo 2D stereo (left/right) panning. Spatialized sounds will be panned based on their horizontal (the XY plane) position in listener space. 1 BinauralLowQuality HRTF based panning using first-order Ambisonics, over a virtual array of 8 loudspeakers arranged in a cube configuration around the listener. 2 BinauralMediumQuality HRTF based panning using second-order Ambisonics, over a virtual array of 12 loudspeakers arranged in a dodecahedral configuration (using faces of the dodecahedron). 3 BinauralHighQuality HRTF based panning using third-order Ambisonics, over a virtual array of 26 loudspeakers arranged in a Lebedev grid."},{"location":"project/engine-config/#pipeline","title":"pipeline","text":"<p><code>string</code> <code>required</code></p> <p>The property is used to set the name of the pipeline asset Amplimix will use. You should give the name of the binary pipeline asset (<code>.ampipeline</code>), with its extension. Amplitude will look up the asset in the appropriate directory.</p>"},{"location":"project/engine-config/#game","title":"game","text":"<p><code>object</code> <code>required</code></p> <p>This setting is used by Amplitude to understand how it should synchronize with the game, how to handle game and sound objects, and how to render sounds in the game environment. This is achieved by specifying a set of inner values in this setting.</p>"},{"location":"project/engine-config/#listener_fetch_mode","title":"listener_fetch_mode","text":"<p><code>enum</code> <code>default: Nearest</code></p> <p>Since Amplitude allows you to define many listeners at the same time, but only one can render data for a single sound object, this setting is used to define how the engine will pick the right listener for each rendered sound object. Available values are:</p> ID Name Description 0 None Do not fetch for listeners. This mute all spatialized sound sources, but keeps processing data. 1 Nearest Fetches for the nearest listener to the currently processed sound source. 2 Farthest Fetches for the farthest listener to the currently processed sound source. 3 Default Always use the default listener set in the engine at runtime for every sound source. 4 First Always use the first available listener of the list for every sound source. 5 Last Always use the last available listener of the list for every sound source. <p>By using <code>Nearest</code> or <code>Farthest</code>, different listeners may be used at the same time for each sound source. Using <code>Default</code>, <code>First</code>, or <code>Last</code> may ensure that the same listener is used for every sound sources.</p>"},{"location":"project/engine-config/#listeners","title":"listeners","text":"<p><code>uint</code> <code>default: 1</code></p> <p>The <code>listeners</code> property specifies the maximum number of listeners to pre-allocate. You will not be able to create more Listener objects than this value at runtime.</p>"},{"location":"project/engine-config/#entities","title":"entities","text":"<p><code>uint</code> <code>default: 4096</code></p> <p>The <code>entities</code> property specifies the maximum number of game entities to pre-allocate. This value does not represent all the entities of your game or scene but only the approximate number of entities managed by the Amplitude Engine. You will not be able to create more Entity objects than that value at runtime.</p>"},{"location":"project/engine-config/#environments","title":"environments","text":"<p><code>uint</code> <code>default: 64</code></p> <p>The <code>environments</code> property specifies the maximum number of sound environments to pre-allocate. Sound environments are spaces in the 3D environment of the game where Amplitude may process specific effects and attenuation models. You will not be able to create more Environment objects than that value at runtime.</p>"},{"location":"project/engine-config/#rooms","title":"rooms","text":"<p><code>uint</code> <code>default: 1024</code></p> <p>The <code>rooms</code> property specifies the maximum number of rooms to pre-allocate. Rooms are used to simulate sound reflections and reverberation in closed spaces. You will not be able to create more Room objects than that value at runtime.</p>"},{"location":"project/engine-config/#sound_speed","title":"sound_speed","text":"<p><code>float</code> <code>default: 343.0</code></p> <p>This property sets the speed of sound (in meters per second) in the game. This value will be used by the engine to process some effects like the Doppler effect. If the value is not defined, it will default to <code>343.0</code>, which is the approximated value of the real speed of sound in air.</p>"},{"location":"project/engine-config/#doppler_factor","title":"doppler_factor","text":"<p><code>float</code> <code>default: 1.0</code></p> <p>This property takes a float value greater or equal to <code>0.0</code>. It will affect how much power is given to the Doppler effect. A value of <code>0.0</code> will disable the Doppler effect, while a value of <code>1.0</code> will render it as it should. Any other value will affect the effect's pitch.</p>"},{"location":"project/engine-config/#obstruction","title":"obstruction","text":"<p><code>object</code> <code>required</code></p> <p>The <code>obstruction</code> property lets you set up the way Amplitude will compute sound obstruction in the game. It takes as value an object with the following properties:</p> <ul> <li>lpf_curve: Set the Low-Pass Filter curve for the obstruction sound processor.</li> <li>gain_curve: Set the gain curve for the obstruction sound processor.</li> </ul>"},{"location":"project/engine-config/#occlusion","title":"occlusion","text":"<p><code>object</code> <code>required</code></p> <p>The <code>occlusion</code> property works the same as the <code>obstruction</code> property, but it's used instead to instruct Amplitude on how to process sound occlusion in the game.</p>"},{"location":"project/engine-config/#track_environments","title":"track_environments","text":"<p><code>boolean</code> <code>default: true</code></p> <p>Defines whether the game is tracking environments. This means that the game will compute and send the environment amounts to the engine. This implies that the shapes defined in environments (if any) will not be used.</p> <p>Setting this value to <code>false</code> will instruct Amplitude to track environment amounts by himself. This way, Amplitude will use environment shapes and sound positions to compute the environment amounts.</p>"},{"location":"project/engine-config/#buses_file","title":"buses_file","text":"<p><code>string</code> <code>required</code></p> <p>The <code>buses_file</code> property defines the path to the binary (<code>.ambus</code>) file that contains the buses definitions. Only one bus file can be loaded per engine configuration.</p>"},{"location":"project/engine-config/#driver","title":"driver","text":"<p><code>string</code> <code>required</code></p> <p>The <code>driver</code> property indicates the name of the audio Driver implementation to use for communication with the physical audio device. You can implement multiple audio drivers as needed and register them in the engine with the plugin API.</p>"},{"location":"project/engine-config/#example","title":"Example","text":"<p>The following example describes an engine configuration file:</p> pc.config.json<pre><code>{\n  \"output\": {\n    \"frequency\": 44100,\n    \"buffer_size\": 4096,\n    \"format\": \"Float32\"\n  },\n  \"mixer\": {\n    \"panning_mode\": \"BinauralHighQuality\",\n    \"active_channels\": 50,\n    \"virtual_channels\": 100,\n    \"pipeline\": \"default.ampipeline\"\n  },\n  \"game\": {\n    \"listener_fetch_mode\": \"Nearest\",\n    \"track_environments\": true,\n    \"listeners\": 100,\n    \"entities\": 4096,\n    \"environments\": 512,\n    \"rooms\": 1024,\n    \"sound_speed\": 333,\n    \"doppler_factor\": 1.0,\n    \"obstruction\": {\n      \"lpf_curve\": {\n        \"parts\": [\n          {\n            \"start\": {\n              \"x\": 0,\n              \"y\": 0\n            },\n            \"end\": {\n              \"x\": 1,\n              \"y\": 1\n            },\n            \"fader\": \"Linear\"\n          }\n        ]\n      },\n      \"gain_curve\": {\n        \"parts\": [\n          {\n            \"start\": {\n              \"x\": 0,\n              \"y\": 1\n            },\n            \"end\": {\n              \"x\": 1,\n              \"y\": 1\n            },\n            \"fader\": \"Linear\"\n          }\n        ]\n      }\n    },\n    \"occlusion\": {\n      \"lpf_curve\": {\n        \"parts\": [\n          {\n            \"start\": {\n              \"x\": 0,\n              \"y\": 0\n            },\n            \"end\": {\n              \"x\": 1,\n              \"y\": 1\n            },\n            \"fader\": \"Linear\"\n          }\n        ]\n      },\n      \"gain_curve\": {\n        \"parts\": [\n          {\n            \"start\": {\n              \"x\": 0,\n              \"y\": 1\n            },\n            \"end\": {\n              \"x\": 1,\n              \"y\": 0\n            },\n            \"fader\": \"Linear\"\n          }\n        ]\n      }\n    }\n  },\n  \"buses_file\": \"pc.buses.ambus\",\n  \"driver\": \"miniaudio\",\n}\n</code></pre>"},{"location":"project/event/","title":"Event","text":"<p>An event is a set of actions Amplitude have to execute once it has been triggered at runtime, during your game. Event assets are described with the following properties:</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p>"},{"location":"project/event/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique value across event assets that represents the ID of this object. It may be reused later to get the instance of this event from the engine at runtime.</p>"},{"location":"project/event/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>A unique value across event assets that represents the name of this object. It may be reused later to get the instance of this event from the engine at runtime.</p>"},{"location":"project/event/#actions","title":"actions","text":"<p><code>EventActionDefinition[]</code> <code>required</code></p> <p>An array of actions to execute. When this event will be triggered, each action will be executed sequentially in the order they are defined in this array. Each object of this is defined by the given properties:</p>"},{"location":"project/event/#type","title":"type","text":"<p><code>EventActionType</code> <code>default: None</code></p> <p>This specifies the type of action to execute. The possible values of this enumeration are:</p> ID Description None noop action. Play Plays the sound objects with the identifiers given in the <code>targets</code> property. Pause Pauses the sound objects with the identifiers given in the <code>targets</code> property. Resume Resumes the sound objects with the identifiers given in the <code>targets</code> property. Stop Stops the sound objects with the identifiers given in the <code>targets</code> property. Seek Seeks the sound objects with the identifiers given in the <code>targets</code> property, to the given position. MuteBus Mutes the buses with the identifiers given in the <code>targets</code> property. UnmuteBus Unmutes the buses with the identifiers given in the <code>targets</code> property. <p>Warning</p> <p>The <code>Seek</code> action is not yet supported. Creating a <code>Seek</code> action will result in a noop.</p>"},{"location":"project/event/#active","title":"active","text":"<p><code>bool</code> <code>default: true</code></p> <p>Defines whether the action is active or not. An inactive action will not be executed when the parent event will be triggered at runtime.</p>"},{"location":"project/event/#targets","title":"targets","text":"<p><code>uint64[]</code> <code>required</code></p> <p>A list of object identifiers on which execute the given <code>action</code>. For <code>Play</code>, <code>Pause</code>, <code>Resume</code>, <code>Stop</code> and <code>Seek</code> actions, this array should contain Sound Objects identifiers. For <code>MuteBus</code> and <code>UnmuteBus</code> actions, this array should contain Buses identifiers.</p>"},{"location":"project/event/#scope","title":"scope","text":"<p><code>Scope</code> <code>default: Entity</code></p> <p>Set the Scope in which this action will be executed. If this value is set to <code>Entity</code>, the event should be triggered with a valid entity at runtime.</p>"},{"location":"project/event/#example","title":"Example","text":"player_footstep.json<pre><code>{\n  \"name\": \"player_footstep\",\n  \"id\": 876,\n  \"actions\": [\n    {\n      \"type\": \"Play\",\n      \"active\": true,\n      \"targets\": [\n      200\n      ],\n      \"scope\": \"Entity\"\n    }\n  ]\n}\n</code></pre>"},{"location":"project/pipeline/","title":"Pipeline","text":"<p>Danger</p> <p>This document is work in progress.</p>"},{"location":"project/project-architecture/","title":"Project Architecture","text":"<p>An Amplitude project is resumed to a set of <code>.json</code> files organized in dedicated directories. The complete architecture of an Amplitude project can be described by this hierarchy:</p> <pre><code>\ud83d\udcc1 amplitude_project_name/\n\u251c \ud83d\udcc1 attenuators/\n\u251c \ud83d\udcc1 collections/\n\u251c \ud83d\udcc1 effects/\n\u251c \ud83d\udcc1 events/\n\u251c \ud83d\udcc1 pipelines/\n\u251c \ud83d\udcc1 rtpc/\n\u251c \ud83d\udcc1 soundbanks/\n\u251c \ud83d\udcc1 sounds/\n\u251c \ud83d\udcc1 switch_containers/\n\u251c \ud83d\udcc1 switches/\n\u251c \ud83d\udcc4 pc.config.json\n\u251c \ud83d\udcc4 android.config.json\n\u251c \ud83d\udcc4 buses.json\n\u2514 \ud83d\udcc4 .amproject\n</code></pre>"},{"location":"project/project-architecture/#engine-configuration-files","title":"Engine configuration files","text":"<p>The Amplitude engine settings are provided through a JSON file at the root of the project. In our previous example, we had two engine configuration files according to the runtime platform: <code>pc.config.json</code> and <code>android.config.json</code>. The config file to use should be given when initializing Amplitude.</p> <p>The config files store all the needed settings for the audio device setup, memory allocation, and mixer configuration. Learn more on how to configure the engine in the Engine Configuration page.</p> <p>Info</p> <p>At least one engine configuration file should exist in an Amplitude project directory, and should match this flatbuffers schema.</p>"},{"location":"project/project-architecture/#buses-file","title":"Buses file","text":"<p>An Amplitude project should have a file (or files) where the different buses used at runtime are defined. In our previous example, the <code>buses.json</code> file plays this role.</p> <p>You can only use one bus file per engine configuration, by setting his path in that engine configuration file. Learn more on how to configure buses in the Buses Configuration page.</p> <p>Info</p> <p>At least one buses file is expected in an Amplitude project. If no file is specified in the engine settings, the default expected path is <code>./buses.json</code>. If the buses file is not found during the engine initialization, the library will throw an exception.</p>"},{"location":"project/project-architecture/#attenuators","title":"attenuators/","text":"<p>The <code>attenuators</code> directory stores all the configuration files for custom Attenuation models. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about attenuators in the Attenuations page.</p>"},{"location":"project/project-architecture/#collections","title":"collections/","text":"<p>The <code>collections</code> directory contains the configuration files for Collection sound objects. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about collections in the Collections page.</p>"},{"location":"project/project-architecture/#effects","title":"effects/","text":"<p>The <code>effects</code> directory contains the configuration files for sound Effects. Each <code>.json</code> file should match this flatbuffers schema. Learn more about effects in the Effects page.</p>"},{"location":"project/project-architecture/#events","title":"events/","text":"<p>The <code>events</code> directory contains the configuration files for Events. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about events in the Events page.</p>"},{"location":"project/project-architecture/#pipelines","title":"pipelines/","text":"<p>The <code>pipelines</code> directory contains the configuration files for each Amplimix Pipeline you want to use with the engine. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about pipelines in the Pipelines page.</p>"},{"location":"project/project-architecture/#rtpc","title":"rtpc/","text":"<p>The <code>rtpc</code> directory stores the configuration files to create RTPC values. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about RTPC values in the Real-Time Parameter Control page.</p>"},{"location":"project/project-architecture/#soundbanks","title":"soundbanks/","text":"<p>The <code>soundbanks</code> directory is the place where you define all of your game [SoundBank]s. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about sound banks in the Sound Banks page.</p>"},{"location":"project/project-architecture/#sounds","title":"sounds/","text":"<p>The <code>sounds</code> directory contains the definition files for Sound objects. Those files are used to describe raw audio sample assets to make them usable as standalone objects or in Collections and Switch Containers. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more on how to create sounds in the Sounds page.</p>"},{"location":"project/project-architecture/#switch_containers","title":"switch_containers/","text":"<p>The <code>switch_containers</code> directory contains configuration files for SwitchContainer sound objects. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about switches and switch containers in the Switch Container guide.</p>"},{"location":"project/project-architecture/#switches","title":"switches/","text":"<p>The <code>switches</code> directory contains configuration files for Switch objects, that will be used in SwitchContainers. Each <code>.json</code> file of this directory should match this flatbuffers schema. Learn more about switches and switch containers in the Switch State guide.</p>"},{"location":"project/rtpc/","title":"Real-Time Parameter Control","text":"<p>A RTPC allows you to synchronize a value between your game and Amplitude. With Amplitude, you can update several values automatically through RTPC, such as sound object gain and priority, as well as effect parameters.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>An RTPC object is described by the following properties:</p>"},{"location":"project/rtpc/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique value across RTPC assets that represents the ID of this object. It may be reused later to get the instance of this RTPC from the engine at runtime.</p>"},{"location":"project/rtpc/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>A unique value across RTPC assets that represents the name of this object. It may be reused later to get the instance of this RTPC from the engine at runtime.</p>"},{"location":"project/rtpc/#min_value","title":"min_value","text":"<p><code>double</code> <code>required</code></p> <p>The minimum value the RTPC is allowed to have.</p>"},{"location":"project/rtpc/#max_value","title":"max_value","text":"<p><code>double</code> <code>required</code></p> <p>The maximum value the RTPC is allowed to have.</p>"},{"location":"project/rtpc/#default_value","title":"default_value","text":"<p><code>double</code> <code>default: 0.0</code></p> <p>The default value assigned to the RTPC at initialization. If this value is outer of the range <code>[min_value, max_value]</code>, it will be clamped in that range.</p>"},{"location":"project/rtpc/#fade_settings","title":"fade_settings","text":"<p><code>RtpcFadingSettings</code> <code>required</code></p> <p>This property allows you to customize the fade transition for when the RTPC value increase or decrease. It takes as value an object with the following properties:</p>"},{"location":"project/rtpc/#enabled","title":"enabled","text":"<p><code>bool</code> <code>default: false</code></p> <p>Defines whether the RTPC value should fade on change. If <code>false</code> the new value will be set without transitions.</p>"},{"location":"project/rtpc/#fade_attack","title":"fade_attack","text":"<p><code>FadeTransitionSettings</code></p> <p>Settings for the fade transition to apply when RTPC value is increased. The value should match the schema of a FadeTransitionSettings object.</p>"},{"location":"project/rtpc/#fade_release","title":"fade_release","text":"<p><code>FadeTransitionSettings</code></p> <p>Settings for the fade transition to apply when RTPC value is decreased. The value should match the schema of a FadeTransitionSettings object.</p>"},{"location":"project/rtpc/#example","title":"Example","text":"player_height.json<pre><code>{\n  \"id\": 1,\n  \"name\": \"rtpc_player_height\",\n  \"min_value\": 0,\n  \"max_value\": 100,\n  \"fade_settings\": {\n    \"enabled\": true,\n    \"fade_attack\": {\n      \"duration\": 1,\n      \"fader\": \"ExponentialSmooth\"\n    },\n    \"fade_release\": {\n      \"duration\": 1,\n      \"fader\": \"ExponentialSmooth\"\n    }\n  }\n}\n</code></pre>"},{"location":"project/sound-bank/","title":"Sound bank","text":"<p>Danger</p> <p>This document is work in progress.</p>"},{"location":"project/sound-object/","title":"Sound Objects","text":"<p>Sound objects are the core assets of an Amplitude project. They define the various audio samples to be played and how to play them.</p> <p>Amplitude supports 03 (three) kinds of sound objects:</p> <ul> <li>Sound: The most basic sound object. It references a single audio file.</li> <li>Collection: A container sound object. It manages a set of sounds and decides how and when to play them through a scheduler.</li> <li>Switch Container: A container sound object. It can automatically play or schedule the playback of a sound object (Sound or Collection), according to the active state of a specific switch.</li> </ul> <p>Each of those sound objects has in common the following set of properties:</p>"},{"location":"project/sound-object/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique identifier for the sound object. This will be used later by the engine and other sound objects to get a reference to this one. This value should be different from <code>0</code>.</p>"},{"location":"project/sound-object/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>A unique name for the sound object. This may be used in runtime to access the sound object's instance from the engine.</p>"},{"location":"project/sound-object/#effect","title":"effect","text":"<p><code>uint64</code> <code>optional</code></p> <p>With this property you can specify a special effect to apply to the sound object when played, by giving the <code>id</code> of that effect.</p>"},{"location":"project/sound-object/#gain","title":"gain","text":"<p><code>RtpcCompatibleValue</code> <code>required</code></p> <p>The <code>gain</code> property stores the value of the gain (the volume) of the sound object. The value should match the schema of a RtpcCompatibleValue object.</p>"},{"location":"project/sound-object/#bus","title":"bus","text":"<p><code>uint64</code> <code>required</code></p> <p>This property stores the <code>id</code> of a bus object, on which this sound should be played. A sound object can only be played by one bus at a time.</p>"},{"location":"project/sound-object/#priority","title":"priority","text":"<p><code>RtpcCompatibleValue</code> <code>required</code></p> <p>This property affects how the engine will prioritize this sound object relative to all others. When the engine is out of active channels, sound objects with low priority are muted when a play request is made with a sound object with higher priority. The value of this property should match the schema of an RtpcCompatibleValue object.</p>"},{"location":"project/sound-object/#spatialization","title":"spatialization","text":"<p><code>Spatialization</code> <code>default: None</code></p> <p>The <code>spatialization</code> property specifies how the sound object's will be rendered in the 3D space, by applying effects like sound attenuation and panning:</p> ID Name Description 0 None No spatialization is made, sound objects are played at their regular gain. 1 Position 2D spatialization. The sound source is spatialized by using only its position (sound attenuation and stereo panning can be applied to it). 2 PositionOrientation 2D spatialization. The sound source is spatialized by using its position and orientation (sound attenuation and stereo panning can be applied to it). This means that the scope of this sound object should be set to <code>Entity</code>. 3 HRTF 3D spatialization. The sound source is spatialized by using its position and orientation, through an HRIR Sphere asset. This means that the scope of this sound object should be set to <code>Entity</code>."},{"location":"project/sound-object/#attenuation","title":"attenuation","text":"<p><code>uint64</code> <code>default: 0</code></p> <p>Specifies the ID of the Attenuation Model to use on the sound object. This property takes effect only if the sound is spatialized (the <code>spatialization</code> property is set to a value different from <code>None</code>). A value of <code>0</code> disables sound attenuation, even if the sound is spatialized.</p>"},{"location":"project/sound-object/#scope","title":"scope","text":"<p><code>Scope</code> <code>default: World</code></p> <p>With the <code>scope</code> property, you can control how the playback data is shared between each sound instance. The allowed values are:</p> ID Name Description 0 World All sound instances will be treated as one object, so they will share the same sound data. 1 Entity Each sound instance will be treated as one object per entity, and will only share sound data within the same entity."},{"location":"project/sound-object/#fader","title":"fader","text":"<p><code>string</code> <code>required</code></p> <p>The <code>fader</code> property can be used to specify the fading animation to apply when the playback starts and stops. Its value should be a string containing the name of the animation. Amplitude comes shipped with a various set of faders:</p> <ul> <li><code>Constant</code></li> <li><code>Ease</code></li> <li><code>EaseIn</code></li> <li><code>EaseInOut</code></li> <li><code>EaseOut</code></li> <li><code>Linear</code></li> <li><code>SCurveSmooth</code></li> <li><code>SCurveSharp</code></li> </ul> <p>Info</p> <p>You can create more faders as you wish and register them in the engine as plugins. Refer to the Custom Fader guide to learn more.</p>"},{"location":"project/sound/","title":"Sound","text":"<p>Sound is where you define sources for any sound objects that will be used in the runtime. They also represent the most basic form of sound objects, allowing you to trigger audio directly from a file.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>Apart from the common properties of sound object assets, a sound asset contains the following properties:</p>"},{"location":"project/sound/#stream","title":"stream","text":"<p><code>bool</code> <code>default: false</code></p> <p>Whether this sound should be streamed from disk or entirely loaded into memory. This allows you to optimize the memory consumed by the engine. In general, sounds like background music or cinematic voices are streamed, and sound effects like gunfire or footsteps are loaded in memory. The choice can also be made to optimize the amount of time the engine will need to access/play the sound, as sounds loaded in memory play faster than streamed sounds.</p>"},{"location":"project/sound/#loop","title":"loop","text":"<p><code>object</code> <code>required</code></p> <p>Configures how the engine should loop the sound. The property stores an object with the following keys.</p>"},{"location":"project/sound/#enabled","title":"enabled","text":"<p><code>bool</code> <code>required</code></p> <p>Defines if the engine should loop the sound or not. If this value is <code>false</code>, the sound will be played once each time the engine will receive a play request for it.</p>"},{"location":"project/sound/#loop_count","title":"loop_count","text":"<p><code>uint32</code> <code>default: 0</code></p> <p>Specifies the number of times the sound should loop until it is automatically stopped by the engine. Set this value to <code>0</code> to loop the sound until manually stopped.</p>"},{"location":"project/sound/#path","title":"path","text":"<p><code>string</code> <code>required</code></p> <p>This value points to the source file of the sound. The file may be of any format supported by the engine (MP3, OGG, FLAC, WAV, or AMS), or from a format you have created a Codec plugin for.</p>"},{"location":"project/sound/#example","title":"Example","text":"forest.ambient.json<pre><code>{\n  \"id\": 100,\n  \"name\": \"AMB_Forest\",\n  \"effect\": 0,\n  \"gain\": {\n    \"kind\": \"Static\",\n    \"value\": 1\n  },\n  \"bus\": 2,\n  \"priority\": {\n    \"kind\": \"Static\",\n    \"value\": 1.0\n  },\n  \"stream\": true,\n  \"loop\": {\n    \"enabled\": true,\n    \"loop_count\": 0\n  },\n  \"spatialization\": \"None\",\n  \"attenuation\": 0,\n  \"fader\": \"SCurveSmooth\",\n  \"path\": \"environment/AMB_Forest_ID_0100_BSB.wav\"\n}\n</code></pre>"},{"location":"project/switch-container/","title":"Switch Container","text":"<p>A switch container is a special container sound object that automatically play or schedule sounds when a specific Switch changes his state.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>Apart from the common properties of sound object assets, a switch container asset contains the following properties:</p>"},{"location":"project/switch-container/#switch_group","title":"switch_group","text":"<p><code>uint64</code> <code>required</code></p> <p>Provides the ID of the Switch object to listen for changes in this switch container. This value cannot be changed at runtime.</p>"},{"location":"project/switch-container/#default_switch_state","title":"default_switch_state","text":"<p><code>uint64</code> <code>required</code></p> <p>The initial state of the switch. This value should be one of the available states you defined in the Switch object.</p>"},{"location":"project/switch-container/#update_behavior","title":"update_behavior","text":"<p><code>SwitchContainerUpdateBehavior</code> <code>required</code></p> <p>With this property you can specify the behavior of the switch container when the tracked Switch object changes his state. The accepted values are:</p> ID Description UpdateOnPlay The switch container will update the sounds on the next play request after the tracked switch has changed his state. UpdateOnChange The switch container will update the sounds at the time the tracked switch has changed his state. That means if a sound from the container was already playing, it will be stopped and sounds registered for the new state will be played. If the currently playing sound was registered for the old and new states, it will continue playing."},{"location":"project/switch-container/#entries","title":"entries","text":"<p><code>SwitchContainerEntry[]</code> <code>required</code></p> <p>The <code>entries</code> property is an array of items (sound objects) you want to register in this switch container. Each entry is an object with the following properties:</p>"},{"location":"project/switch-container/#object","title":"object","text":"<p><code>uint64</code> <code>required</code></p> <p>The ID of a sound object (Sound or Collection).</p>"},{"location":"project/switch-container/#switch_states","title":"switch_states","text":"<p><code>uint64[]</code> <code>required</code></p> <p>The list of states where this entry is assigned. That means the sound object of this entry will play only when one of the assigned states will be active.</p>"},{"location":"project/switch-container/#continue_between_states","title":"continue_between_states","text":"<p><code>bool</code> <code>required</code></p> <p>Defines whether the sound object should continue playing when the switch state changes, and both new and old states are assigned to this entry.</p> <ul> <li>If <code>true</code>, the sound object will continue to play when the state will change.</li> <li>If <code>false</code>, the sound object will stop and start over after the switch has changed his state.</li> </ul>"},{"location":"project/switch-container/#fade_in","title":"fade_in","text":"<p><code>FadeTransitionSettings</code> <code>required</code></p> <p>The fade transition to apply on the sound object when one of the assigned states becomes active. It takes as value a FadeTransitionSettings object.</p>"},{"location":"project/switch-container/#fade_out","title":"fade_out","text":"<p><code>FadeTransitionSettings</code> <code>required</code></p> <p>The fade transition to apply on the sound object when one all the assigned states becomes inactive. It takes as value a FadeTransitionSettings object.</p>"},{"location":"project/switch-container/#gain","title":"gain","text":"<p><code>RtpcCompatibleValue</code> <code>required</code></p> <p>A custom <code>gain</code> to apply on the sound object of this entry. The value should match the schema of an RtpcCompatibleValue object.</p>"},{"location":"project/switch-container/#example","title":"Example","text":"footsteps.json<pre><code>{\n  \"id\": 200,\n  \"name\": \"footsteps\",\n  \"priority\": {\n    \"kind\": \"Static\",\n    \"value\": 1.0\n  },\n  \"gain\": {\n    \"kind\": \"Static\",\n    \"value\": 0.0625\n  },\n  \"bus\": 2,\n  \"spatialization\": \"Position\",\n  \"attenuation\": 1,\n  \"scope\": \"Entity\",\n  \"fader\": \"Linear\",\n  \"update_behavior\": \"UpdateOnChange\",\n  \"switch_group\": 1,\n  \"default_switch_state\": 4,\n  \"entries\": [\n  {\n    \"object\": 1003,\n    \"continue_between_states\": false,\n    \"fade_in\": {\n      \"duration\": 1,\n      \"fader\": \"Linear\"\n    },\n    \"fade_out\": {\n      \"duration\": 1,\n      \"fader\": \"Linear\"\n    },\n    \"gain\": {\n      \"kind\": \"Static\",\n      \"value\": 1.0\n    },\n    \"switch_states\": [\n    4\n    ]\n  },\n  {\n    \"object\": 1004,\n    \"continue_between_states\": false,\n    \"fade_in\": {\n      \"duration\": 1,\n      \"fader\": \"Linear\"\n    },\n    \"fade_out\": {\n      \"duration\": 1,\n      \"fader\": \"Linear\"\n    },\n    \"gain\": {\n      \"kind\": \"Static\",\n      \"value\": 1.0\n    },\n    \"switch_states\": [\n    5\n    ]\n  },\n  {\n    \"object\": 1005,\n    \"continue_between_states\": false,\n    \"fade_in\": {\n      \"duration\": 1,\n      \"fader\": \"Linear\"\n    },\n    \"fade_out\": {\n      \"duration\": 1,\n      \"fader\": \"Linear\"\n    },\n    \"gain\": {\n      \"kind\": \"Static\",\n      \"value\": 1.0\n    },\n    \"switch_states\": [\n    3\n    ]\n  }\n  ]\n}\n</code></pre>"},{"location":"project/switch/","title":"Switch","text":"<p>A switch is an object maintaining a single state at a time during runtime. Its main purpose is to send feedback to Switch Container objects, so they can play the right sounds for the current state. For example, you could create a switch for a terrain or any walkable area, with states like grass, ice, or wood, and link it to a switch container playing footstep sounds according to the current state.</p> <p>Info</p> <p>The flatbuffers schema of this file can be found here.</p> <p>A switch asset is described by the following attributes:</p>"},{"location":"project/switch/#id","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique value across switch assets that represents the ID of this object. It may be reused later to get the instance of this switch from the engine at runtime.</p>"},{"location":"project/switch/#name","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>A unique value across switch assets that represents the name of this object. It may be reused later to get the instance of this switch from the engine at runtime.</p>"},{"location":"project/switch/#states","title":"states","text":"<p><code>SwitchStateDefinition</code> <code>required</code></p> <p>An array of switch states. Each state is represented by an object containing the following attributes:</p>"},{"location":"project/switch/#id_1","title":"id","text":"<p><code>uint64</code> <code>required</code></p> <p>A unique value between the states of this switch. It represents the identifier of this state and may be reused later in switch containers to link a sound object with this state, or in the engine at runtime to get the instance of this state.</p>"},{"location":"project/switch/#name_1","title":"name","text":"<p><code>string</code> <code>required</code></p> <p>The name of this state. This value should be unique between the states of this switch.</p>"},{"location":"project/switch/#example","title":"Example","text":"surfaces.json<pre><code>{\n  \"id\": 1,\n  \"name\": \"surface_type\",\n  \"states\": [\n    {\n      \"id\": 1,\n      \"name\": \"wood\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"water\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"metal\"\n    },\n    {\n      \"id\": 4,\n      \"name\": \"grass\"\n    },\n    {\n      \"id\": 5,\n      \"name\": \"snow\"\n    }\n  ]\n}\n</code></pre>"},{"location":"tutorials/custom-codec/","title":"Custom Codec","text":"<p>Danger</p> <p>This document is work in progress.</p>"},{"location":"tutorials/custom-driver/","title":"Custom Driver","text":"<p>Danger</p> <p>This document is work in progress.</p>"},{"location":"tutorials/custom-effect/","title":"Custom Effect","text":"<p>Danger</p> <p>This document is work in progress.</p>"},{"location":"tutorials/custom-fader/","title":"Custom Fader","text":"<p>Danger</p> <p>This document is work in progress.</p>"}]}