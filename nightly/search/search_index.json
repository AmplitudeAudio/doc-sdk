{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amplitude Audio SDK","text":"<p>Welcome to the official Amplitude Audio SDK documentation.</p> <ul> <li> <p> Getting Started</p> <p>Overview of basic concepts of the C++ SDK, and the installation process.</p> <p> Getting started</p> </li> <li> <p> Integration</p> <p>Step-by-step usage and integrate guide of the C++ SDK in your projects.</p> <p> Engine Integration</p> </li> <li> <p> Project Reference</p> <p>Detailed reference documentation and usage guides for Amplitude projects.</p> <p> Project Reference</p> </li> <li> <p> API Reference</p> <p>Public C++ API reference and documentation.</p> <p> API Reference</p> </li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Amplitude Audio SDK public API reference and documentation.</p> Core Core functionalities of the SDK Engine Engine-specific functionalities Assets Assets API IO Input/Output API Math Math libraries and utilities Memory Memory management and allocation SparkyStudios"},{"location":"api/#macros","title":"Macros","text":"Name Description AM_ID_CHAR_FMT Compiling for a Linux platform Defines the format used to print AmObjectId value AM_LIB_EXPORT Call policy AM_OS_CHAR_FMT Defines the format used to print AmOsString text AM_OS_STRING Macro used to convert a string literal to an AmOsString string at compile-time AM_OS_STRING_TO_STRING Conversion between OS strings and default strings amMemory Shortcut access to the Amplitude's memory manager instance. ampoolmalloc Allocates a block of memory from the specified memory pool. ampoolmalign Allocates an aligned block of memory from the specified memory pool. ampoolrealloc Reallocates a block of memory from the specified memory pool. ampoolrealign Reallocates an aligned block of memory from the specified memory pool. ampoolfree Deallocates a block of memory from the specified memory pool. ammalloc Allocates a block of memory from the default memory pool. ammalign Allocates a block of memory from the default memory pool. amrealloc Reallocates a block of memory from the deault memory pool. amrealign Reallocates an aligned block of memory from the default memory pool. amfree Deallocates a block of memory from the default memory pool. ampoolnew Allocates memory for a new object in the Default pool using the memory manager. ampooldelete Deallocates a memory allocated with @a ampoolnew. amnew Allocates memory for a new object in the Default pool using the memory manager. amdelete Deallocates a memory allocated with @a amnew. amVersion Gets the current Amplitude SDK version. AM_ID_CHAR_FMT Compiling for an Apple platform Compiling for iOS or tvOS (iPhone, iPad, iPod, Apple TV. M_PI Define the value of Pi if the platform doesn't do that AM_FILTERS_PER_STREAM Maximum number of filters per stream AM_MAX_THREAD_POOL_TASKS Maximum number of tasks in a single pool amEngine Macro to get the current Amplitude engine instance. amLogger The global logger instance. amLog Logs a message with the given level. amLogDebug Logs a debug message. amLogInfo Logs an informational message. amLogWarning Logs a warning message. amLogError Logs an error message. amLogCritical Logs a critical message."},{"location":"api/#macro-details","title":"Macro Details","text":""},{"location":"api/#am_filters_per_stream","title":"AM_FILTERS_PER_STREAM","text":"<p>#define AM_FILTERS_PER_STREAM</p> <p>Maximum number of filters per stream</p>"},{"location":"api/#am_id_char_fmt","title":"AM_ID_CHAR_FMT","text":"<p>#define AM_ID_CHAR_FMT</p> <p>Compiling for a Linux platform Defines the format used to print AmObjectId value</p>"},{"location":"api/#am_id_char_fmt_1","title":"AM_ID_CHAR_FMT","text":"<p>#define AM_ID_CHAR_FMT</p> <p>Compiling for an Apple platform Compiling for iOS or tvOS (iPhone, iPad, iPod, Apple TV...) Compiling for Mac OS X Defines the format used to print AmObjectId value</p>"},{"location":"api/#am_lib_export","title":"AM_LIB_EXPORT","text":"<p>#define AM_LIB_EXPORT</p> <p>Call policy</p>"},{"location":"api/#am_max_thread_pool_tasks","title":"AM_MAX_THREAD_POOL_TASKS","text":"<p>#define AM_MAX_THREAD_POOL_TASKS</p> <p>Maximum number of tasks in a single pool</p>"},{"location":"api/#am_os_char_fmt","title":"AM_OS_CHAR_FMT","text":"<p>#define AM_OS_CHAR_FMT</p> <p>Defines the format used to print AmOsString text</p>"},{"location":"api/#am_os_string","title":"AM_OS_STRING","text":"<p>#define AM_OS_STRING(s)</p> <p>Macro used to convert a string literal to an AmOsString string at compile-time</p>"},{"location":"api/#am_os_string_to_string","title":"AM_OS_STRING_TO_STRING","text":"<p>#define AM_OS_STRING_TO_STRING(s)</p> <p>Conversion between OS strings and default strings</p>"},{"location":"api/#m_pi","title":"M_PI","text":"<p>#define M_PI</p> <p>Define the value of Pi if the platform doesn't do that</p>"},{"location":"api/#amengine","title":"amEngine","text":"<p>#define amEngine</p> <p>Macro to get the current Amplitude engine instance.</p>"},{"location":"api/#amlog","title":"amLog","text":"<p>#define amLog(level, message, ...)                                                                                                     \\</p> <p>Logs a message with the given level.</p> Parameter <code>_level_</code> The level of the log message. Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/#amlogcritical","title":"amLogCritical","text":"<p>#define amLogCritical(message, ...)</p> <p>Logs a critical message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/#amlogdebug","title":"amLogDebug","text":"<p>#define amLogDebug(message, ...)</p> <p>Logs a debug message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/#amlogerror","title":"amLogError","text":"<p>#define amLogError(message, ...)</p> <p>Logs an error message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/#amloginfo","title":"amLogInfo","text":"<p>#define amLogInfo(message, ...)</p> <p>Logs an informational message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/#amlogwarning","title":"amLogWarning","text":"<p>#define amLogWarning(message, ...)</p> <p>Logs a warning message.</p> Parameter <code>_message_</code> The message to log. Parameter <code>The</code> arguments to format the message with."},{"location":"api/#amlogger","title":"amLogger","text":"<p>#define amLogger</p> <p>The global logger instance.</p>"},{"location":"api/#ammemory","title":"amMemory","text":"<p>#define amMemory</p> <p>Shortcut access to the Amplitude's memory manager instance.</p>"},{"location":"api/#amversion","title":"amVersion","text":"<p>#define amVersion</p> <p>Gets the current Amplitude SDK version.</p>"},{"location":"api/#amdelete","title":"amdelete","text":"<p>#define amdelete(type, ptr)</p> <p>Deallocates a memory allocated with @a amnew.</p> <p>This will call the object's destructor before the memory is freed.</p> See amnew"},{"location":"api/#amfree","title":"amfree","text":"<p>#define amfree(ptr)</p> <p>Deallocates a block of memory from the default memory pool.</p> Parameter <code>_ptr_</code> The pointer to deallocate. See ampoolfree"},{"location":"api/#ammalign","title":"ammalign","text":"<p>#define ammalign(size, alignment)</p> <p>Allocates a block of memory from the default memory pool.</p> Parameter <code>_size_</code> The size of the memory to allocate. Parameter <code>_alignment_</code> The alignment of the memory to allocate. See ampoolmalign"},{"location":"api/#ammalloc","title":"ammalloc","text":"<p>#define ammalloc(size)</p> <p>Allocates a block of memory from the default memory pool.</p> Parameter <code>_size_</code> The size of the memory to allocate. See ampoolmalloc"},{"location":"api/#amnew","title":"amnew","text":"<p>#define amnew(type, ...)</p> <p>Allocates memory for a new object in the Default pool using the memory manager.</p> <p>This will create a new memory allocation in the Default pool. The allocated memory will be freed when the object is destroyed using amdelete.</p> See amdelete"},{"location":"api/#ampooldelete","title":"ampooldelete","text":"<p>#define ampooldelete(pool, type, ptr)                                                                                                \\</p> <p>Deallocates a memory allocated with @a ampoolnew.</p> <p>This will call the object's destructor before the memory is freed.</p> See ampoolnew"},{"location":"api/#ampoolfree","title":"ampoolfree","text":"<p>#define ampoolfree(pool, ptr)</p> <p>Deallocates a block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to deallocate from. Parameter <code>_ptr_</code> The pointer to deallocate."},{"location":"api/#ampoolmalign","title":"ampoolmalign","text":"<p>#define ampoolmalign(pool, size, alignment)</p> <p>Allocates an aligned block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to deallocate from. Parameter <code>_size_</code> The size of the memory to allocate. Parameter <code>_alignment_</code> The alignment of the memory to allocate."},{"location":"api/#ampoolmalloc","title":"ampoolmalloc","text":"<p>#define ampoolmalloc(pool, size)</p> <p>Allocates a block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to allocate from. Parameter <code>_size_</code> The size of the memory to allocate."},{"location":"api/#ampoolnew","title":"ampoolnew","text":"<p>#define ampoolnew(pool, type, ...)</p> <p>Allocates memory for a new object in the Default pool using the memory manager.</p> <p>This will create a new memory allocation in the Default pool. The allocated memory will be freed when the object is destroyed using amdelete.</p> See ampooldelete"},{"location":"api/#ampoolrealign","title":"ampoolrealign","text":"<p>#define ampoolrealign(pool, ptr, size, alignment)</p> <p>Reallocates an aligned block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to reallocate from. Should be the same as the one used to allocate the memory. Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory. Parameter <code>_alignment_</code> The alignment of the memory to allocate."},{"location":"api/#ampoolrealloc","title":"ampoolrealloc","text":"<p>#define ampoolrealloc(pool, ptr, size)</p> <p>Reallocates a block of memory from the specified memory pool.</p> Parameter <code>_pool_</code> The memory pool to reallocate from. Should be the same as the one used to allocate the memory. Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory."},{"location":"api/#amrealign","title":"amrealign","text":"<p>#define amrealign(ptr, size, alignment)                                                                                              \\</p> <p>Reallocates an aligned block of memory from the default memory pool.</p> Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory. Parameter <code>_alignment_</code> The alignment of the memory to allocate. See ampoolrealign"},{"location":"api/#amrealloc","title":"amrealloc","text":"<p>#define amrealloc(ptr, size)</p> <p>Reallocates a block of memory from the deault memory pool.</p> Parameter <code>_ptr_</code> The pointer to reallocate. Parameter <code>_size_</code> The new size of the memory. See ampoolrealloc"},{"location":"api/SparkyStudios/","title":"SparkyStudios","text":"Thread"},{"location":"api/SparkyStudios/#types","title":"Types","text":"Name Description AmThreadHandle The AmThreadFunction signature is used to create threads. Amplimix Amplitude Audio Mixer. AmplimixLayer Called just before the mixer process audio data. Called just after the mixer process audio data. Attenuation Amplitude Attenuation. AttenuationZone The propagation shape for positional sounds. AudioConverter Allow converting audio buffers between different sample rates and channel counts. BarycentricCoordinates Represents barycentric coordinates between a point and 3 vertices of a triangle. BoxShape A box shape, defined by a width, an height, and a depth. CapsuleShape A capsule shape, defined by a radius and an height. CartesianCoordinateSystem A class representing a cartesian coordinate system. Collection Amplitude Collection. ConeShape A cone shape, defined by a radius and an height. ConsoleLogger The console logger class. ConsumerNodeInstance Interface for Amplimix pipeline nodes that can consume * audio data from an input buffer. Curve A Curve which describe the variation of a value (on the Y-axis) according to another (on the X-axis). CurvePart A part of a Curve. CurvePoint A single point in a Curve. DiskFile A File implementation that reads and writes a file on disk. DiskFileSystem A FileSystem implementation that reads and write files * from disk. Edge Represents an edge. Effect Amplitude Effect. EffectInstance An instance of an Effect asset. Entity An Entity represent an object in the game. Environment An Environment is a zone where every spatialized audio playing inside him got * applied a specific effect. Event An event is mainly used to apply a set of actions at a given time in game. EventCanceler A class which can cancel a triggered Event. EventInstance A triggered event. FFT The Fast Fourier Transform (FFT) class. Face Represents a triangulated face. Fader Helper class to process faders. FaderInstance A Fader instance. An object of this class will be created each time a <code>Fader</code> is requested. File Base class for a file in a FileSystem. FileOpenKind The type of file being opened. FileOpenMode Describes the mode in which open the file. FileSeekOrigin Defines from where to seek in the file. FileSystem Base class for files and resources loaders. Filter Helper class to manage filters. FilterInstance A Filter instance. InputNodeInstance Class used to marks the input of the pipeline. Listener An object whose distance from sounds determines their gain. LogMessageLevel The level of a log message. Logger The logger class. MemoryFile A File implementation that reads and writes a memory buffer. MemoryManager Manages memory allocations inside the engine. MemoryManagerConfig Configures the memory management system. MemoryPoolKind Available memory pools. MemoryPoolStats Collects the statistics about the memory allocations * for a specific pool MixerNodeInstance Base class for Amplimix pipeline nodes that can mix * audio data from multiple input buffers, and outputs the result * of the mix. Node Base class for Amplimix pipeline nodes. NodeInstance An instance of an Amplimix pipeline node. Orientation Represents an orientation in 3D space. OutputNodeInstance Class used to marks the output of the pipeline. PackageFileCompressionAlgorithm Defines the compression algorithms a package file can be compressed with. PackageFileHeaderDescription Provides metadata about the package file. PackageFileItemDescription Describes an item in the package file. PackageFileSystem A FileSystem implementation that provides access * to an Amplitude package file. PackageItemFile A File implementation that provides access to an item in an * Amplitude package file. Pipeline A pipeline assembles a set of nodes to process audio data. ProcessorNodeInstance Base class for Amplimix pipeline nodes that can process * audio data in-place. ProviderNodeInstance Interface for Amplimix pipeline nodes that can provide * audio data to an output buffer. RefCounter Holds the number of references to an object. ResamplerInstance A Resampler instance. Resource An Amplitude resource in a FileSystem. Room The absorption coefficients of the material. Represents a physical space where sound waves can propagate. Any sound source within the room will be affected * by the room's properties, and got applied early reflections and reverberation effects. RoomMaterial Represents the material of a @c Room wall. RoomMaterialType Defines the material type of a @c Room wall. RoomWall Enumerates the walls of a @c Room. Rtpc Amplitude Real-Time Parameter Control. RtpcValue A RTPC compatible value is used as a wrapper to hold propertiy values * that can be linked to RTPCs. ScopedMemoryAllocation Allocates a block of memory with the given size in the given pool. Shape A Shape. Sound Amplitude Sound. SoundBank Amplitude Sound Bank SoundObject The SoundObject class is the base class for all sound objects. SphereShape A sphere shape, defined by a radius. SphericalPosition Describes the coordinates of a point on a sphere's surface, relative * to the center of that sphere. SplitComplex Buffer for split-complex representation of FFT results. Switch Amplitude Switch. SwitchContainer Amplitude Switch Container. SwitchContainerItem Describes a single item within a SwitchContainer. SwitchState A switch state. Zone A shape that represents a zone in the world."},{"location":"api/SparkyStudios/#functions","title":"Functions","text":"Name Description FindGCD Finds the greatest common divisor (GCD) of two integers. GetRelativeDirection Returns a direction vector relative to a given position and rotation. IntegerPow Computes the value base^exp using the squared exponentiation method. NextPowerOf2 Returns the next power of 2 of a given number."},{"location":"api/SparkyStudios/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/#findgcd","title":"FindGCD","text":"<p>inline AmInt64 FindGCD(AmInt64 a, AmInt64 b)</p> <p>Finds the greatest common divisor (GCD) of two integers.</p> Parameter <code>a</code> First integer. Parameter <code>b</code> Second integer. Return The greatest common divisor of a and b."},{"location":"api/SparkyStudios/#getrelativedirection","title":"GetRelativeDirection","text":"<p>inline AmVec3 GetRelativeDirection(const AmVec3&amp; originPosition, const AmQuat&amp; originRotation, const AmVec3&amp; position)</p> <p>Returns a direction vector relative to a given position and rotation.</p> Parameter <code>originPosition</code> Origin position of the direction. Parameter <code>originRotation</code> Origin rotation of the direction. Parameter <code>position</code> Target position of the direction. Return A relative direction vector (not normalized)."},{"location":"api/SparkyStudios/#integerpow","title":"IntegerPow","text":"<p>template&lt;typename T&gt; inline T IntegerPow(T base, AmInt32 exp)</p> <p>Computes the value base^exp using the squared exponentiation method.</p> Template parameter <code>T</code> An integer type, a floating-point type, or a any other type where operatror *= is defined. Parameter <code>base</code> Input of the power function. Parameter <code>exp</code> The exponent of the power function. Must be non-negative. Return The result of raising the base to the power of the exponent."},{"location":"api/SparkyStudios/#nextpowerof2","title":"NextPowerOf2","text":"<p>template&lt;typename T&gt; inline T NextPowerOf2(const T&amp; val)</p> <p>Returns the next power of 2 of a given number.</p> Parameter <code>val</code> The number. Return The next power of 2."},{"location":"api/SparkyStudios/AmThreadHandle/","title":"AmThreadHandle","text":"<p>typedef AmVoidPtr AmThreadHandle</p> <p>The AmThreadFunction signature is used to create threads.</p>"},{"location":"api/SparkyStudios/Amplimix/","title":"Amplimix","text":"<p>class  Amplimix</p> <p>Amplitude Audio Mixer.</p> <p>This class handles processing of audio data by mixing multiple audio sources. The resulting audio stream are next handled by the <code>Driver</code> for playback or recording.</p>"},{"location":"api/SparkyStudios/Amplimix/#functions","title":"Functions","text":"Name Description UpdateDevice Saves the information about the rendering audio device. IsInitialized Checks if the mixer is initialized. Mix Processes the audio data by mixing multiple audio sources for the specified number of frames. GetDeviceDescription Gets the description of the rendering audio device."},{"location":"api/SparkyStudios/Amplimix/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Amplimix/#getdevicedescription","title":"GetDeviceDescription","text":"<p>[[nodiscard]] virtual const DeviceDescription&amp; GetDeviceDescription() const = 0</p> <p>Gets the description of the rendering audio device.</p> Return The description of the rendering audio device."},{"location":"api/SparkyStudios/Amplimix/#isinitialized","title":"IsInitialized","text":"<p>[[nodiscard]] virtual bool IsInitialized() const = 0</p> <p>Checks if the mixer is initialized.</p> Return <code>true</code> if the mixer is initialized, <code>false</code> otherwise."},{"location":"api/SparkyStudios/Amplimix/#mix","title":"Mix","text":"<p>virtual AmUInt64 Mix(AudioBuffer** outBuffer, AmUInt64 frameCount) = 0</p> <p>Processes the audio data by mixing multiple audio sources for the specified number of frames.</p> Parameter <code>outBuffer</code> The buffer to store the mixed audio data. Parameter <code>frameCount</code> The number of frames to mix. Return The number of frames actually mixed."},{"location":"api/SparkyStudios/Amplimix/#updatedevice","title":"UpdateDevice","text":"<p>virtual void UpdateDevice( AmObjectID deviceID, AmString deviceName, AmUInt32 deviceOutputSampleRate, PlaybackOutputChannels deviceOutputChannels, PlaybackOutputFormat deviceOutputFormat) = 0</p> <p>Saves the information about the rendering audio device.</p> Parameter <code>deviceID</code> The ID of the audio device. Parameter <code>deviceName</code> The name of the audio device. Parameter <code>deviceOutputSampleRate</code> The sample rate of the audio device's output. Parameter <code>deviceOutputChannels</code> The number of audio channels of the audio device's output. Parameter <code>deviceOutputFormat</code> The format of the audio device's output."},{"location":"api/SparkyStudios/AmplimixLayer/","title":"AmplimixLayer","text":"<p>class  AmplimixLayer</p> <p>Called just before the mixer process audio data.</p> <p>Called just after the mixer process audio data.</p>"},{"location":"api/SparkyStudios/Attenuation/","title":"Attenuation","text":"<p>class  Attenuation : public Asset&lt;AmAttenuationID&gt;</p> <p>Amplitude Attenuation.</p> <p>An Attenuation materializes how the sound volume and other distance-based parameters are calculated following the distance of the sound source to the listener.</p> <p>The Attenuation is a shared object between sound sources. They are used only when the sound need to adjust his volume due to the distance of from the listener, and many other parameters.</p>"},{"location":"api/SparkyStudios/Attenuation/#functions","title":"Functions","text":"Name Description GetGain Returns the gain of the sound from the given distance to the listener. GetGain Returns the gain of the sound from the given distance to the listener. GetShape Returns the shape object of this Attenuation. GetGainCurve Returns the gain curve attached to this Attenuation. GetMaxDistance Returns the maximum distance for a fully attenuated sound IsAirAbsorptionEnabled Returns whether air absorption is enabled for this Attenuation. EvaluateAirAbsorption Evaluates the air absorption effect for a specific frequency band."},{"location":"api/SparkyStudios/Attenuation/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Attenuation/#evaluateairabsorption","title":"EvaluateAirAbsorption","text":"<p>[[nodiscard]] virtual AmReal32 EvaluateAirAbsorption( const AmVec3&amp; soundLocation, const AmVec3&amp; listenerLocation, AmUInt32 band) const = 0</p> <p>Evaluates the air absorption effect for a specific frequency band.</p> <p>This method calculates the attenuation factor due to air absorption at a given frequency band for a sound source located at a specific position and a listener located at another specific position.</p> Parameter <code>soundLocation</code> The location of the sound source. Parameter <code>listenerLocation</code> The location of the listener which is hearing the sound. Parameter <code>band</code> The frequency band for which the air absorption effect is evaluated. Return The air absorption attenuation factor for the given frequency band. The returned value is in decibels (dB)."},{"location":"api/SparkyStudios/Attenuation/#getgain","title":"GetGain","text":"<p>[[nodiscard]] virtual AmReal32 GetGain(const AmVec3&amp; soundLocation, const Listener&amp; listener) const = 0</p> <p>Returns the gain of the sound from the given distance to the listener.</p> Parameter <code>soundLocation</code> The location of the sound source. Parameter <code>listener</code> The listener which is hearing the sound. Return The computed gain value fom the curve. <p>[[nodiscard]] virtual AmReal32 GetGain(const Entity&amp; entity, const Listener&amp; listener) const = 0</p> <p>Returns the gain of the sound from the given distance to the listener.</p> Parameter <code>entity</code> The entity which emits the sound. Parameter <code>listener</code> The listener which is hearing the sound. Return The computed gain value fom the curve."},{"location":"api/SparkyStudios/Attenuation/#getgaincurve","title":"GetGainCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetGainCurve() const = 0</p> <p>Returns the gain curve attached to this Attenuation.</p> Return The attenuation's gain curve."},{"location":"api/SparkyStudios/Attenuation/#getmaxdistance","title":"GetMaxDistance","text":"<p>[[nodiscard]] virtual AmReal64 GetMaxDistance() const = 0</p> <p>Returns the maximum distance for a fully attenuated sound</p> Return The maximum sound attenuation distance."},{"location":"api/SparkyStudios/Attenuation/#getshape","title":"GetShape","text":"<p>* GetShape() const</p> <p>Returns the shape object of this Attenuation.</p> Return The Attenuation shape."},{"location":"api/SparkyStudios/Attenuation/#isairabsorptionenabled","title":"IsAirAbsorptionEnabled","text":"<p>[[nodiscard]] virtual bool IsAirAbsorptionEnabled() const = 0</p> <p>Returns whether air absorption is enabled for this Attenuation.</p> Return <code>true</code> if air absorption is enabled, <code>false</code> otherwise."},{"location":"api/SparkyStudios/AttenuationZone/","title":"AttenuationZone","text":"<p>class  AttenuationZone</p> <p>The propagation shape for positional sounds.</p> <p>This allows to increase the attenuation according to the shape of the sound propagation.</p>"},{"location":"api/SparkyStudios/AttenuationZone/#functions","title":"Functions","text":"Name Description GetAttenuationFactor Returns the attenuation factor. GetAttenuationFactor Returns the attenuation factor."},{"location":"api/SparkyStudios/AttenuationZone/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/AttenuationZone/#getattenuationfactor","title":"GetAttenuationFactor","text":"<p>virtual AmReal32 GetAttenuationFactor(const Attenuation* attenuation, const AmVec3&amp; soundLocation, const Listener&amp; listener) = 0</p> <p>Returns the attenuation factor.</p> <p>This method is used only for position based sound sources.</p> Parameter <code>attenuation</code> The Attenuator object to use for distance attenuation. Parameter <code>soundLocation</code> The location of the sound source. Parameter <code>listener</code> The listener for which compute the attenuation. Return The attenuation factor. <p>virtual AmReal32 GetAttenuationFactor(const Attenuation* attenuation, const Entity&amp; entity, const Listener&amp; listener) = 0</p> <p>Returns the attenuation factor.</p> <p>This method is used by position and orientation based sound sources.</p> Parameter <code>attenuation</code> The Attenuator object to use for distance attenuation. Parameter <code>entity</code> The entity which emits the sound. Parameter <code>listener</code> The listener for which compute the attenuation. Return The attenuation factor."},{"location":"api/SparkyStudios/AudioConverter/","title":"AudioConverter","text":"<p>class AudioConverter final</p> <p>Allow converting audio buffers between different sample rates and channel counts.</p> <p>Note</p> <p>This class uses the <code>Resampler</code> class to perform sample rate conversion.</p> <p>Note</p> <pre><code> Only mono to stereo or vice versa conversions are supported.\n</code></pre>"},{"location":"api/SparkyStudios/AudioConverter/#types","title":"Types","text":"Name Description Settings Store conversion settings for an @c AudioConverter instance."},{"location":"api/SparkyStudios/AudioConverter/#functions","title":"Functions","text":"Name Description AudioConverter Default constructor. Configure Initializes the audio converter with the given conversion settings. Process Converts the audio buffer from the source sample rate and channel count to the target sample rate and channel count. SetSampleRate Updates the source sample rate and target sample rate. GetRequiredInputFrameCount Returns the required number of frames to have as input for the * given amount of output frames. GetExpectedOutputFrameCount Returns the expected number of frames to have as output for the * given amount of input frames. GetInputLatency Returns the current input latency in frames. GetOutputLatency Returns the current output latency in frames. Reset Resets the internal state of the converter. ConvertStereoFromMono Convert stereo audio to mono. ConvertMonoFromStereo Convert mono audio to stereo."},{"location":"api/SparkyStudios/AudioConverter/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/AudioConverter/#audioconverter_1","title":"AudioConverter","text":"<p>AudioConverter()</p> <p>Default constructor.</p>"},{"location":"api/SparkyStudios/AudioConverter/#configure","title":"Configure","text":"<p>bool Configure(const Settings&amp; settings)</p> <p>Initializes the audio converter with the given conversion settings.</p> Parameter <code>settings</code> The conversion settings. Return <code>true</code> if the initialization was successful, <code>false</code> otherwise."},{"location":"api/SparkyStudios/AudioConverter/#convertmonofromstereo","title":"ConvertMonoFromStereo","text":"<p>static void ConvertMonoFromStereo(const AudioBuffer&amp; input, AudioBuffer&amp; output)</p> <p>Convert mono audio to stereo.</p> Parameter <code>input</code> The input audio buffer. Parameter <code>output</code> The output audio buffer to store the converted audio."},{"location":"api/SparkyStudios/AudioConverter/#convertstereofrommono","title":"ConvertStereoFromMono","text":"<p>static void ConvertStereoFromMono(const AudioBuffer&amp; input, AudioBuffer&amp; output)</p> <p>Convert stereo audio to mono.</p> Parameter <code>input</code> The input audio buffer. Parameter <code>output</code> The output audio buffer to store the converted audio."},{"location":"api/SparkyStudios/AudioConverter/#getexpectedoutputframecount","title":"GetExpectedOutputFrameCount","text":"<p>[[nodiscard]] AmUInt64 GetExpectedOutputFrameCount(AmUInt64 inputFrameCount) const</p> <p>Returns the expected number of frames to have as output for the          * given amount of input frames.</p> Parameter <code>inputFrameCount</code> The number of input frames. Return The expected number of output frames for the given input frame count."},{"location":"api/SparkyStudios/AudioConverter/#getinputlatency","title":"GetInputLatency","text":"<p>[[nodiscard]] AmUInt64 GetInputLatency() const</p> <p>Returns the current input latency in frames.</p> Return The current input latency in frames."},{"location":"api/SparkyStudios/AudioConverter/#getoutputlatency","title":"GetOutputLatency","text":"<p>[[nodiscard]] AmUInt64 GetOutputLatency() const</p> <p>Returns the current output latency in frames.</p> Return The current output latency in frames."},{"location":"api/SparkyStudios/AudioConverter/#getrequiredinputframecount","title":"GetRequiredInputFrameCount","text":"<p>[[nodiscard]] AmUInt64 GetRequiredInputFrameCount(AmUInt64 outputFrameCount) const</p> <p>Returns the required number of frames to have as input for the          * given amount of output frames.</p> Parameter <code>outputFrameCount</code> The number of output frames. Return The input frame count needed to produce the given output frame count."},{"location":"api/SparkyStudios/AudioConverter/#process","title":"Process","text":"<p>void Process(const AudioBuffer&amp; input, AmUInt64&amp; inputFrames, AudioBuffer&amp; output, AmUInt64&amp; outputFrames)</p> <p>Converts the audio buffer from the source sample rate and channel count to the target sample rate and channel count.</p> Parameter <code>input</code> The source audio buffer. Parameter <code>inputFrames</code> The number of frames to process in the input audio buffer. Parameter <code>output</code> The target audio buffer to store the converted audio. Parameter <code>outputFrames</code> The number of frames to process in the target audio buffer."},{"location":"api/SparkyStudios/AudioConverter/#reset","title":"Reset","text":"<p>void Reset()</p> <p>Resets the internal state of the converter.</p>"},{"location":"api/SparkyStudios/AudioConverter/#setsamplerate","title":"SetSampleRate","text":"<p>void SetSampleRate(AmUInt64 sourceSampleRate, AmUInt64 targetSampleRate)</p> <p>Updates the source sample rate and target sample rate.</p> Parameter <code>sourceSampleRate</code> The source sample rate. Parameter <code>targetSampleRate</code> The target sample rate."},{"location":"api/SparkyStudios/AudioConverter/Settings/","title":"Settings","text":"<p>struct Settings</p> <p>Store conversion settings for an @c AudioConverter instance.</p>"},{"location":"api/SparkyStudios/AudioConverter/Settings/#variables","title":"Variables","text":"Name Description m_sourceSampleRate The source sample rate. m_targetSampleRate The destination sample rate. m_sourceChannelCount The source channel count. m_targetChannelCount The destination channel count."},{"location":"api/SparkyStudios/AudioConverter/Settings/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/AudioConverter/Settings/#m_sourcechannelcount","title":"m_sourceChannelCount","text":"<p>AmUInt16 m_sourceChannelCount</p> <p>The source channel count.</p>"},{"location":"api/SparkyStudios/AudioConverter/Settings/#m_sourcesamplerate","title":"m_sourceSampleRate","text":"<p>AmUInt32 m_sourceSampleRate</p> <p>The source sample rate.</p>"},{"location":"api/SparkyStudios/AudioConverter/Settings/#m_targetchannelcount","title":"m_targetChannelCount","text":"<p>AmUInt16 m_targetChannelCount</p> <p>The destination channel count.</p>"},{"location":"api/SparkyStudios/AudioConverter/Settings/#m_targetsamplerate","title":"m_targetSampleRate","text":"<p>AmUInt32 m_targetSampleRate</p> <p>The destination sample rate.</p>"},{"location":"api/SparkyStudios/BarycentricCoordinates/","title":"BarycentricCoordinates","text":"<p>struct BarycentricCoordinates</p> <p>Represents barycentric coordinates between a point and 3 vertices of a triangle.</p>"},{"location":"api/SparkyStudios/BarycentricCoordinates/#functions","title":"Functions","text":"Name Description RayTriangleIntersection Computes the barycentric coordinates of the intersection of a ray with a triangle. BarycentricCoordinates Default constructor. BarycentricCoordinates Computes barycentric coordinates from a position and a triangle. IsValid Checks whether the coordinates are valid."},{"location":"api/SparkyStudios/BarycentricCoordinates/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/BarycentricCoordinates/#barycentriccoordinates_1","title":"BarycentricCoordinates","text":"<p>BarycentricCoordinates()</p> <p>Default constructor.</p> <p>BarycentricCoordinates(const AmVec3&amp; position, const std::array&lt;AmVec3, 3&gt;&amp; triangle)</p> <p>Computes barycentric coordinates from a position and a triangle.</p> Parameter <code>position</code> The position of the intersection. Parameter <code>triangle</code> The triangle."},{"location":"api/SparkyStudios/BarycentricCoordinates/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const</p> <p>Checks whether the coordinates are valid.</p> Return <code>true</code> if the coordinates are valid, <code>false</code> otherwise."},{"location":"api/SparkyStudios/BarycentricCoordinates/#raytriangleintersection","title":"RayTriangleIntersection","text":"<p>static bool RayTriangleIntersection( const AmVec3&amp; rayOrigin, const AmVec3&amp; rayDirection, const std::array&lt;AmVec3, 3&gt;&amp; triangle, BarycentricCoordinates&amp; result)</p> <p>Computes the barycentric coordinates of the intersection of a ray with a triangle.</p> Parameter <code>rayOrigin</code> The origin of the ray. Parameter <code>rayDirection</code> The direction of the ray. Parameter <code>triangle</code> The vertices of the triangle. Parameter <code>result</code> The result of the intersection. Return <code>true</code> if the ray intersects the triangle, <code>false</code> otherwise."},{"location":"api/SparkyStudios/BoxShape/","title":"BoxShape","text":"<p>class  BoxShape : public Shape</p> <p>A box shape, defined by a width, an height, and a depth.</p>"},{"location":"api/SparkyStudios/BoxShape/#functions","title":"Functions","text":"Name Description Create Creates a new BoxShape from a definition. BoxShape Construct a new Box Shape. BoxShape Construct a new Box Shape. GetHalfWidth Get the half width of the box shape. GetHalfHeight Get the half height of the box shape. GetHalfDepth Get the half depth of the box shape. GetWidth Get the width of the box shape. GetHeight Get the height of the box shape. GetDepth Get the depth of the box shape. SetHalfWidth Set the half width of the box shape. SetHalfHeight Set the half height of the box shape. SetHalfDepth Set the half depth of the box shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape. GetClosestPoint Get the closest point to the given location."},{"location":"api/SparkyStudios/BoxShape/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/BoxShape/#boxshape_1","title":"BoxShape","text":"<p>explicit BoxShape(AmReal32 halfWidth, AmReal32 halfHeight, AmReal32 halfDepth)</p> <p>Construct a new Box Shape.</p> Parameter <code>halfWidth</code> The half width of the box shape. Parameter <code>halfHeight</code> The half height of the box shape. Parameter <code>halfDepth</code> The half depth of the box shape. <p>explicit BoxShape(const AmVec3&amp; position, const AmVec3&amp; dimensions)</p> <p>Construct a new Box Shape.</p> Parameter <code>position</code> The position of the box shape. Parameter <code>dimensions</code> The dimensions of the box shape."},{"location":"api/SparkyStudios/BoxShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/SparkyStudios/BoxShape/#create","title":"Create","text":"<p>static BoxShape* Create(const BoxShapeDefinition* definition)</p> <p>Creates a new BoxShape from a definition.</p> Parameter <code>definition</code> The definition of the box shape generated                   from a flatbuffer binary."},{"location":"api/SparkyStudios/BoxShape/#getclosestpoint","title":"GetClosestPoint","text":"<p>[[nodiscard]] AmVec3 GetClosestPoint(const AmVec3&amp; location) const</p> <p>Get the closest point to the given location.</p> Parameter <code>location</code> The location to get the closest point for. Return The closest point to the given location."},{"location":"api/SparkyStudios/BoxShape/#getdepth","title":"GetDepth","text":"<p>[[nodiscard]] AmReal32 GetDepth() const</p> <p>Get the depth of the box shape.</p> Return The box shape's depth."},{"location":"api/SparkyStudios/BoxShape/#gethalfdepth","title":"GetHalfDepth","text":"<p>[[nodiscard]] AmReal32 GetHalfDepth() const</p> <p>Get the half depth of the box shape.</p> Return The box shape's half depth."},{"location":"api/SparkyStudios/BoxShape/#gethalfheight","title":"GetHalfHeight","text":"<p>[[nodiscard]] AmReal32 GetHalfHeight() const</p> <p>Get the half height of the box shape.</p> Return The box shape's half height."},{"location":"api/SparkyStudios/BoxShape/#gethalfwidth","title":"GetHalfWidth","text":"<p>[[nodiscard]] AmReal32 GetHalfWidth() const</p> <p>Get the half width of the box shape.</p> Return The box shape's half width."},{"location":"api/SparkyStudios/BoxShape/#getheight","title":"GetHeight","text":"<p>[[nodiscard]] AmReal32 GetHeight() const</p> <p>Get the height of the box shape.</p> Return The box shape's height."},{"location":"api/SparkyStudios/BoxShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/SparkyStudios/BoxShape/#getwidth","title":"GetWidth","text":"<p>[[nodiscard]] AmReal32 GetWidth() const</p> <p>Get the width of the box shape.</p> Return The box shape's width."},{"location":"api/SparkyStudios/BoxShape/#sethalfdepth","title":"SetHalfDepth","text":"<p>void SetHalfDepth(AmReal32 halfDepth)</p> <p>Set the half depth of the box shape.</p> Parameter <code>halfDepth</code> The new box shape's half depth."},{"location":"api/SparkyStudios/BoxShape/#sethalfheight","title":"SetHalfHeight","text":"<p>void SetHalfHeight(AmReal32 halfHeight)</p> <p>Set the half height of the box shape.</p> Parameter <code>halfHeight</code> The new box shape's half height."},{"location":"api/SparkyStudios/BoxShape/#sethalfwidth","title":"SetHalfWidth","text":"<p>void SetHalfWidth(AmReal32 halfWidth)</p> <p>Set the half width of the box shape.</p> Parameter <code>halfWidth</code> The new box shape's half width."},{"location":"api/SparkyStudios/CapsuleShape/","title":"CapsuleShape","text":"<p>class  CapsuleShape : public Shape</p> <p>A capsule shape, defined by a radius and an height.</p>"},{"location":"api/SparkyStudios/CapsuleShape/#functions","title":"Functions","text":"Name Description Create Creates a new CapsuleShape from a definition. CapsuleShape Construct a new Capsule Shape. GetRadius Get the radius of the capsule shape. GetHalfHeight Get the half height of the capsule shape. GetDiameter Get the diameter of the capsule shape. GetHeight Get the height of the capsule shape. SetRadius Set the radius of the capsule shape. SetHalfHeight Set the half height of the capsule shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape."},{"location":"api/SparkyStudios/CapsuleShape/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/CapsuleShape/#capsuleshape_1","title":"CapsuleShape","text":"<p>explicit CapsuleShape(AmReal32 radius, AmReal32 halfHeight)</p> <p>Construct a new Capsule Shape.</p> Parameter <code>radius</code> The capsule radius. Parameter <code>halfHeight</code> The capsule half height."},{"location":"api/SparkyStudios/CapsuleShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/SparkyStudios/CapsuleShape/#create","title":"Create","text":"<p>static CapsuleShape* Create(const CapsuleShapeDefinition* definition)</p> <p>Creates a new CapsuleShape from a definition.</p> Parameter <code>definition</code> The definition of the capsule shape generated                   from a flatbuffer binary."},{"location":"api/SparkyStudios/CapsuleShape/#getdiameter","title":"GetDiameter","text":"<p>[[nodiscard]] AmReal32 GetDiameter() const</p> <p>Get the diameter of the capsule shape.</p> Return The capsule's diameter."},{"location":"api/SparkyStudios/CapsuleShape/#gethalfheight","title":"GetHalfHeight","text":"<p>[[nodiscard]] AmReal32 GetHalfHeight() const</p> <p>Get the half height of the capsule shape.</p> Return The capsule's half height."},{"location":"api/SparkyStudios/CapsuleShape/#getheight","title":"GetHeight","text":"<p>[[nodiscard]] AmReal32 GetHeight() const</p> <p>Get the height of the capsule shape.</p> Return The capsule's height."},{"location":"api/SparkyStudios/CapsuleShape/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] AmReal32 GetRadius() const</p> <p>Get the radius of the capsule shape.</p> Return The capsule's radius."},{"location":"api/SparkyStudios/CapsuleShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/SparkyStudios/CapsuleShape/#sethalfheight","title":"SetHalfHeight","text":"<p>void SetHalfHeight(AmReal32 halfHeight)</p> <p>Set the half height of the capsule shape.</p> Parameter <code>halfHeight</code> The capsule's half height."},{"location":"api/SparkyStudios/CapsuleShape/#setradius","title":"SetRadius","text":"<p>void SetRadius(AmReal32 radius)</p> <p>Set the radius of the capsule shape.</p> Parameter <code>radius</code> The capsule's radius."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/","title":"CartesianCoordinateSystem","text":"<p>class  CartesianCoordinateSystem</p> <p>A class representing a cartesian coordinate system.</p> <p>It's used to know which direction is positive along each axis, and also allows Amplitude to convert incoming data to the internal coordinate system.</p>"},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#types","title":"Types","text":"Name Description Axis Enumerates the axes of the cartesian coordinate system. Converter Converts values from one cartesian coordinate system to another."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#functions","title":"Functions","text":"Name Description Default Creates a cartesian coordinate system which match the one used in Amplitude. AmbiX Creates a cartesian coordinate system suitable for the AmbiX ambisonics format. RightHandedYUp Creates a right-handed, Y-up cartesian coordinate system. LeftHandedYUp Creates a left-handed, Y-up cartesian coordinate system. RightHandedZUp Creates a right-handed, Z-up cartesian coordinate system. LeftHandedZUp Creates a left-handed, Z-up cartesian coordinate system. Convert Converts a vector from one coordinate system to another. ConvertToDefault Converts a vector from one coordinate system to the default coordinate system. GetVector Gets a vector corresponding to the given axis. CartesianCoordinateSystem Creates a new cartesian coordinate system with the given axes. GetRightVector Gets the vector corresponding to the coordinate system's right axis. * @return The coordinate system's right vector. GetForwardVector Gets the vector corresponding to the coordinate system's forward axis. * @return The coordinate system's forward vector. GetUpVector Gets the vector corresponding to the coordinate system's up axis. * @return The coordinate system's up vector. Convert Converts a vector from one coordinate system to the current one. Convert Converts a quaternion from one coordinate system to the current one. Convert Converts a scalar from one coordinate system to the current one."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#ambix","title":"AmbiX","text":"<p>static CartesianCoordinateSystem AmbiX()</p> <p>Creates a cartesian coordinate system suitable for the AmbiX ambisonics format.</p> Return AmbiX format's cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#cartesiancoordinatesystem_1","title":"CartesianCoordinateSystem","text":"<p>CartesianCoordinateSystem(Axis right, Axis forward, Axis up)</p> <p>Creates a new cartesian coordinate system with the given axes.</p> Parameter <code>right</code> The right axis of the new coordinate system. Parameter <code>forward</code> The forward axis of the new coordinate system. Parameter <code>up</code> The up axis of the new coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#convert","title":"Convert","text":"<p>static AmVec3 Convert(const AmVec3&amp; vector, const CartesianCoordinateSystem&amp; from, const CartesianCoordinateSystem&amp; to)</p> <p>Converts a vector from one coordinate system to another.</p> Parameter <code>vector</code> The vector to convert. Parameter <code>from</code> The source coordinate system. Parameter <code>to</code> The destination coordinate system. Return The converted vector. <p>[[nodiscard]] AmVec3 Convert(const AmVec3&amp; vector, const CartesianCoordinateSystem&amp; from) const</p> <p>Converts a vector from one coordinate system to the current one.</p> Parameter <code>vector</code> The vector to convert. Parameter <code>from</code> The original coordinate system of the vector. Return The converted vector in the current coordinate system. <p>[[nodiscard]] AmQuat Convert(const AmQuat&amp; quaternion, const CartesianCoordinateSystem&amp; from) const</p> <p>Converts a quaternion from one coordinate system to the current one.</p> Parameter <code>quaternion</code> The quaternion to convert. Parameter <code>from</code> The original coordinate system of the quaternion. Return The converted quaternion in the current coordinate system. <p>[[nodiscard]] AmReal32 Convert(const AmReal32&amp; scalar, const CartesianCoordinateSystem&amp; from) const</p> <p>Converts a scalar from one coordinate system to the current one.</p> Parameter <code>scalar</code> The scalar to convert. Parameter <code>from</code> The original coordinate system of the scalar. Return The converted scalar in the current coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#converttodefault","title":"ConvertToDefault","text":"<p>static AmVec3 ConvertToDefault(const AmVec3&amp; vector, const CartesianCoordinateSystem&amp; from)</p> <p>Converts a vector from one coordinate system to the default coordinate system.</p> Parameter <code>vector</code> The vector to convert. Parameter <code>from</code> The source coordinate system. Return The converted vector."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#default","title":"Default","text":"<p>static CartesianCoordinateSystem Default()</p> <p>Creates a cartesian coordinate system which match the one used in Amplitude.</p> Return Amplitude's internal coordinate system for right-handed, Z-up cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#getforwardvector","title":"GetForwardVector","text":"<p>[[nodiscard]] inline AmVec3 GetForwardVector() const</p> <p>Gets the vector corresponding to the coordinate system's forward axis.          * @return The coordinate system's forward vector.</p>"},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#getrightvector","title":"GetRightVector","text":"<p>[[nodiscard]] inline AmVec3 GetRightVector() const</p> <p>Gets the vector corresponding to the coordinate system's right axis.          * @return The coordinate system's right vector.</p>"},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#getupvector","title":"GetUpVector","text":"<p>[[nodiscard]] inline AmVec3 GetUpVector() const</p> <p>Gets the vector corresponding to the coordinate system's up axis.          * @return The coordinate system's up vector.</p>"},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#getvector","title":"GetVector","text":"<p>[[nodiscard]] static AmVec3 GetVector(Axis axis)</p> <p>Gets a vector corresponding to the given axis.</p> Parameter <code>axis</code> The axis to get the vector for. Return A vector corresponding to the given axis."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#lefthandedyup","title":"LeftHandedYUp","text":"<p>static CartesianCoordinateSystem LeftHandedYUp()</p> <p>Creates a left-handed, Y-up cartesian coordinate system.</p> Return A left-handed, Y-up cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#lefthandedzup","title":"LeftHandedZUp","text":"<p>static CartesianCoordinateSystem LeftHandedZUp()</p> <p>Creates a left-handed, Z-up cartesian coordinate system.</p> Return A left-handed, Z-up cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#righthandedyup","title":"RightHandedYUp","text":"<p>static CartesianCoordinateSystem RightHandedYUp()</p> <p>Creates a right-handed, Y-up cartesian coordinate system.</p> Return A right-handed, Y-up cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/#righthandedzup","title":"RightHandedZUp","text":"<p>static CartesianCoordinateSystem RightHandedZUp()</p> <p>Creates a right-handed, Z-up cartesian coordinate system.</p> Return A right-handed, Z-up cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Axis/","title":"Axis","text":"<p>enum class Axis</p> <p>Enumerates the axes of the cartesian coordinate system.</p> PositiveX The positive X axis (1, 0, 0). PositiveY The positive Y axis (0, 1, 0). PositiveZ The positive Z axis (0, 0, 1). NegativeX The negative X axis (-1, 0, 0). NegativeY The negative Y axis (0, -1, 0). NegativeZ The negative Z axis (0, 0, -1)."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Converter/","title":"Converter","text":"<p>class Converter</p> <p>Converts values from one cartesian coordinate system to another.</p>"},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Converter/#functions","title":"Functions","text":"Name Description Converter Constructs a converter from two cartesian coordinate systems. Forward Converts a vector from the source coordinate system to the target coordinate system. Forward Converts a quaternion from the source coordinate system to the target coordinate system. Forward Converts a scalar from the source coordinate system to the target coordinate system. Backward Converts a vector from the target coordinate system to the source coordinate system. Backward Converts a quaternion from the target coordinate system to the source coordinate system. Backward Converts a scalar from the target coordinate system to the source coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Converter/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Converter/#backward","title":"Backward","text":"<p>[[nodiscard]] AmVec3 Backward(const AmVec3&amp; vector) const</p> <p>Converts a vector from the target coordinate system to the source coordinate system.</p> Parameter <code>vector</code> The vector to convert. Return A vector in the source coordinate system. <p>[[nodiscard]] AmQuat Backward(const AmQuat&amp; quaternion) const</p> <p>Converts a quaternion from the target coordinate system to the source coordinate system.</p> Parameter <code>quaternion</code> The quaternion to convert. Return A quaternion in the source coordinate system. <p>[[nodiscard]] AmReal32 Backward(const AmReal32&amp; scalar) const</p> <p>Converts a scalar from the target coordinate system to the source coordinate system.</p> Parameter <code>scalar</code> The scalar to convert. Return A scalar in the source coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Converter/#converter_1","title":"Converter","text":"<p>Converter(const CartesianCoordinateSystem&amp; from, const CartesianCoordinateSystem&amp; to)</p> <p>Constructs a converter from two cartesian coordinate systems.</p> Parameter <code>from</code> The source cartesian coordinate system. Parameter <code>to</code> The target cartesian coordinate system."},{"location":"api/SparkyStudios/CartesianCoordinateSystem/Converter/#forward","title":"Forward","text":"<p>[[nodiscard]] AmVec3 Forward(const AmVec3&amp; vector) const</p> <p>Converts a vector from the source coordinate system to the target coordinate system.</p> Parameter <code>vector</code> The vector to convert. Return A vector in the target coordinate system. <p>[[nodiscard]] AmQuat Forward(const AmQuat&amp; quaternion) const</p> <p>Converts a quaternion from the source coordinate system to the target coordinate system.</p> Parameter <code>quaternion</code> The quaternion to convert. Return A quaternion in the target coordinate system. <p>[[nodiscard]] AmReal32 Forward(const AmReal32&amp; scalar) const</p> <p>Converts a scalar from the source coordinate system to the target coordinate system.</p> Parameter <code>scalar</code> The scalar to convert. Return A scalar in the target coordinate system."},{"location":"api/SparkyStudios/Collection/","title":"Collection","text":"<p>class  Collection : public SoundObject , public Asset&lt;AmCollectionID&gt;</p> <p>Amplitude Collection.</p> <p>A Collection is a container sound object that group multiple sounds over the same name. Only one sound can be playing at a time in the same collection, and the sound picked for playback is chosen by the collection's Scheduler.</p>"},{"location":"api/SparkyStudios/Collection/#functions","title":"Functions","text":"Name Description SelectFromWorld Returns a Sound from this collection from the World scope. SelectFromEntity Returns a Sound from this collection from an Entity scope. ResetEntityScopeScheduler Resets the internal state of the scheduler running for the given Entity. ResetWorldScopeScheduler Resets the internal state of the scheduler running for the World. GetSounds Returns the list of Sound objects referenced in this collection."},{"location":"api/SparkyStudios/Collection/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Collection/#getsounds","title":"GetSounds","text":"<p>[[nodiscard]] virtual const std::vector&lt;AmSoundID&gt;&amp; GetSounds() const = 0</p> <p>Returns the list of Sound objects referenced in this collection.</p> Return The list of Sound IDs."},{"location":"api/SparkyStudios/Collection/#resetentityscopescheduler","title":"ResetEntityScopeScheduler","text":"<p>virtual void ResetEntityScopeScheduler(const Entity&amp; entity) = 0</p> <p>Resets the internal state of the scheduler running for the given Entity.</p> Parameter <code>entity</code> The entity for which reset the scheduler state."},{"location":"api/SparkyStudios/Collection/#resetworldscopescheduler","title":"ResetWorldScopeScheduler","text":"<p>virtual void ResetWorldScopeScheduler() = 0</p> <p>Resets the internal state of the scheduler running for the World.</p>"},{"location":"api/SparkyStudios/Collection/#selectfromentity","title":"SelectFromEntity","text":"<p>* SelectFromEntity(const Entity&amp; entity, const std::vector&lt;AmSoundID&gt;&amp; toSkip)</p> <p>Returns a Sound from this collection from an Entity scope.</p> Parameter <code>entity</code> The entity from which pick the sound. Parameter <code>toSkip</code> The list of Sound IDs to skip fom the selection. Return The selected Sound."},{"location":"api/SparkyStudios/Collection/#selectfromworld","title":"SelectFromWorld","text":"<p>* SelectFromWorld(const std::vector&lt;AmSoundID&gt;&amp; toSkip) const</p> <p>Returns a Sound from this collection from the World scope.</p> Parameter <code>toSkip</code> The list of Sound IDs to skip fom the selection. Return The selected Sound."},{"location":"api/SparkyStudios/ConeShape/","title":"ConeShape","text":"<p>class  ConeShape : public Shape</p> <p>A cone shape, defined by a radius and an height.</p>"},{"location":"api/SparkyStudios/ConeShape/#functions","title":"Functions","text":"Name Description Create Creates a new ConeShape from a definition. ConeShape Construct a new Cone Shape. GetRadius Get the radius of the cone shape. GetDiameter Get the diameter of the cone shape. GetHeight Get the height of the cone shape. SetRadius Set the radius of the cone shape. SetHeight Set the height of the cone shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape."},{"location":"api/SparkyStudios/ConeShape/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/ConeShape/#coneshape_1","title":"ConeShape","text":"<p>explicit ConeShape(AmReal32 radius, AmReal32 height)</p> <p>Construct a new Cone Shape.</p> Parameter <code>radius</code> The radius of the cone's base. Parameter <code>height</code> The height of the cone."},{"location":"api/SparkyStudios/ConeShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/SparkyStudios/ConeShape/#create","title":"Create","text":"<p>static ConeShape* Create(const ConeShapeDefinition* definition)</p> <p>Creates a new ConeShape from a definition.</p> Parameter <code>definition</code> The definition of the cone shape generated                   from a flatbuffer binary."},{"location":"api/SparkyStudios/ConeShape/#getdiameter","title":"GetDiameter","text":"<p>[[nodiscard]] AmReal32 GetDiameter() const</p> <p>Get the diameter of the cone shape.</p> Return The cone base's diameter."},{"location":"api/SparkyStudios/ConeShape/#getheight","title":"GetHeight","text":"<p>[[nodiscard]] AmReal32 GetHeight() const</p> <p>Get the height of the cone shape.</p> Return The cone's height."},{"location":"api/SparkyStudios/ConeShape/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] AmReal32 GetRadius() const</p> <p>Get the radius of the cone shape.</p> Return The cone base's radius."},{"location":"api/SparkyStudios/ConeShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/SparkyStudios/ConeShape/#setheight","title":"SetHeight","text":"<p>void SetHeight(AmReal32 height)</p> <p>Set the height of the cone shape.</p> Parameter <code>height</code> The cone's height."},{"location":"api/SparkyStudios/ConeShape/#setradius","title":"SetRadius","text":"<p>void SetRadius(AmReal32 radius)</p> <p>Set the radius of the cone shape.</p> Parameter <code>radius</code> The cone base's radius."},{"location":"api/SparkyStudios/ConsoleLogger/","title":"ConsoleLogger","text":"<p>class  ConsoleLogger final : public Logger</p> <p>The console logger class.</p> <p>This class logs messages to the console.</p>"},{"location":"api/SparkyStudios/ConsoleLogger/#functions","title":"Functions","text":"Name Description Log @copydoc Logger::Log"},{"location":"api/SparkyStudios/ConsoleLogger/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/ConsoleLogger/#log","title":"Log","text":"<p>void Log(LogMessageLevel level, const char* file, int line, const AmString&amp; message) override</p> <p>@copydoc Logger::Log</p>"},{"location":"api/SparkyStudios/ConsumerNodeInstance/","title":"ConsumerNodeInstance","text":"<p>class  ConsumerNodeInstance</p> <p>Interface for Amplimix pipeline nodes that can consume      * audio data from an input buffer.</p>"},{"location":"api/SparkyStudios/ConsumerNodeInstance/#functions","title":"Functions","text":"Name Description Consume Consumes audio data from the provider node * specified with the call of @c ConsumerNodeInstance::Connect(). Connect Set the input provider node ID for this node."},{"location":"api/SparkyStudios/ConsumerNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/ConsumerNodeInstance/#connect","title":"Connect","text":"<p>virtual void Connect(AmObjectID provider) = 0</p> <p>Set the input provider node ID for this node.</p> Parameter <code>provider</code> The provider node for this node."},{"location":"api/SparkyStudios/ConsumerNodeInstance/#consume","title":"Consume","text":"<p>virtual void Consume() = 0</p> <p>Consumes audio data from the provider node          * specified with the call of @c ConsumerNodeInstance::Connect().</p>"},{"location":"api/SparkyStudios/Curve/","title":"Curve","text":"<p>class  Curve</p> <p>A Curve which describe the variation of a value (on the Y-axis) according to another (on the X-axis).</p>"},{"location":"api/SparkyStudios/Curve/#functions","title":"Functions","text":"Name Description Initialize Initializes curve parts from the given definition. Get Get the curve value corresponding to the given X value."},{"location":"api/SparkyStudios/Curve/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Curve/#get","title":"Get","text":"<p>[[nodiscard]] float Get(double x) const</p> <p>Get the curve value corresponding to the given X value.</p> Parameter <code>x</code> The X value. Return The curve value."},{"location":"api/SparkyStudios/Curve/#initialize","title":"Initialize","text":"<p>void Initialize(const CurveDefinition* definition)</p> <p>Initializes curve parts from the given definition.</p> Parameter <code>definition</code> The curve definition data."},{"location":"api/SparkyStudios/CurvePart/","title":"CurvePart","text":"<p>class  CurvePart</p> <p>A part of a Curve.</p> <p>CurveParts allows to a curve to have different fading algorithms at the same time. Each CurvePart has a start and end point, and the fading algorithm which moves the value from the start point to the end point.</p>"},{"location":"api/SparkyStudios/CurvePart/#functions","title":"Functions","text":"Name Description CurvePart Creates an empty CurvePart. Initialize Initializes this CurvePart from a definition. GetStart Returns the start point of this CurvePart. SetStart Sets the start point of this CurvePart. GetEnd Returns the end point of this CurvePart. SetEnd Sets the end point of this CurvePart. GetFader Returns the Fader of this CurvePart. SetFader Sets the Fader of this CurvePart. Get Gets the Y coordinates of a point given its coordinates over the X axis."},{"location":"api/SparkyStudios/CurvePart/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/CurvePart/#curvepart_1","title":"CurvePart","text":"<p>CurvePart()</p> <p>Creates an empty CurvePart.</p>"},{"location":"api/SparkyStudios/CurvePart/#get","title":"Get","text":"<p>[[nodiscard]] float Get(double x) const</p> <p>Gets the Y coordinates of a point given its coordinates over the X axis.</p> Parameter <code>x</code> The coordinates of the point over the X axis. Return The Y coordinates of the point."},{"location":"api/SparkyStudios/CurvePart/#getend","title":"GetEnd","text":"<p>[[nodiscard]] const CurvePoint&amp; GetEnd() const</p> <p>Returns the end point of this CurvePart.</p> Return The end point of this CurvePart."},{"location":"api/SparkyStudios/CurvePart/#getfader","title":"GetFader","text":"<p>[[nodiscard]] FaderInstance* GetFader() const</p> <p>Returns the Fader of this CurvePart.</p> Return The Fader of this CurvePart."},{"location":"api/SparkyStudios/CurvePart/#getstart","title":"GetStart","text":"<p>[[nodiscard]] const CurvePoint&amp; GetStart() const</p> <p>Returns the start point of this CurvePart.</p> Return The start point of this CurvePart."},{"location":"api/SparkyStudios/CurvePart/#initialize","title":"Initialize","text":"<p>void Initialize(const CurvePartDefinition* definition)</p> <p>Initializes this CurvePart from a definition.</p> Parameter <code>definition</code> The definition of the curve part generated                   from a flatbuffer binary."},{"location":"api/SparkyStudios/CurvePart/#setend","title":"SetEnd","text":"<p>void SetEnd(const CurvePoint&amp; end)</p> <p>Sets the end point of this CurvePart.</p> Parameter <code>end</code> The new end point."},{"location":"api/SparkyStudios/CurvePart/#setfader","title":"SetFader","text":"<p>void SetFader(const AmString&amp; fader)</p> <p>Sets the Fader of this CurvePart.</p> Parameter <code>fader</code> The new Fader."},{"location":"api/SparkyStudios/CurvePart/#setstart","title":"SetStart","text":"<p>void SetStart(const CurvePoint&amp; start)</p> <p>Sets the start point of this CurvePart.</p> Parameter <code>start</code> The new start point."},{"location":"api/SparkyStudios/CurvePoint/","title":"CurvePoint","text":"<p>struct  CurvePoint</p> <p>A single point in a Curve.</p>"},{"location":"api/SparkyStudios/CurvePoint/#variables","title":"Variables","text":"Name Description x The coordinates of the point over the X axis. y The coordinates of the point over the Y axis."},{"location":"api/SparkyStudios/CurvePoint/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/CurvePoint/#x","title":"x","text":"<p>double x</p> <p>The coordinates of the point over the X axis.</p>"},{"location":"api/SparkyStudios/CurvePoint/#y","title":"y","text":"<p>float y</p> <p>The coordinates of the point over the Y axis.</p>"},{"location":"api/SparkyStudios/DiskFile/","title":"DiskFile","text":"<p>class  DiskFile : public File</p> <p>A File implementation that reads and writes a file on disk.</p>"},{"location":"api/SparkyStudios/DiskFile/#functions","title":"Functions","text":"Name Description DiskFile Creates a new DiskFile instance. DiskFile Creates a new DiskFile instance from a file handle. DiskFile Creates a new DiskFile instance by opening a file at the given path. ~DiskFile Destroys the instance and release the file handler. GetPath @copydoc File::GetPath Eof @copydoc File::Eof Read @copydoc File::Read Write @copydoc File::Write Length @copydoc File::Length Seek @copydoc File::Seek Position @copydoc File::Position GetPtr @copydoc File::GetPtr IsValid @copydoc File::IsValid Open Opens a file at the given path. Close Closes the file."},{"location":"api/SparkyStudios/DiskFile/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/DiskFile/#close","title":"Close","text":"<p>void Close()</p> <p>Closes the file.</p>"},{"location":"api/SparkyStudios/DiskFile/#diskfile_1","title":"DiskFile","text":"<p>DiskFile()</p> <p>Creates a new DiskFile instance.</p> <p>explicit DiskFile(AmFileHandle fp)</p> <p>Creates a new DiskFile instance from a file handle.</p> Parameter <code>fp</code> The file handle to manage in this instance. <p>explicit DiskFile(const std::filesystem::path&amp; fileName, FileOpenMode mode = eFOM_READ, FileOpenKind kind = eFOK_BINARY)</p> <p>Creates a new DiskFile instance by opening a file at the given path.</p> Parameter <code>fileName</code> The path to the file to open. Parameter <code>mode</code> The open mode to use. Parameter <code>kind</code> The type of file to open."},{"location":"api/SparkyStudios/DiskFile/#eof","title":"Eof","text":"<p>bool Eof() override</p> <p>@copydoc File::Eof</p>"},{"location":"api/SparkyStudios/DiskFile/#getpath","title":"GetPath","text":"<p>[[nodiscard]] AmOsString GetPath() const override</p> <p>@copydoc File::GetPath</p>"},{"location":"api/SparkyStudios/DiskFile/#getptr","title":"GetPtr","text":"<p>AmVoidPtr GetPtr() override</p> <p>@copydoc File::GetPtr</p>"},{"location":"api/SparkyStudios/DiskFile/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const override</p> <p>@copydoc File::IsValid</p>"},{"location":"api/SparkyStudios/DiskFile/#length","title":"Length","text":"<p>AmSize Length() override</p> <p>@copydoc File::Length</p>"},{"location":"api/SparkyStudios/DiskFile/#open","title":"Open","text":"<p>AmResult Open(const std::filesystem::path&amp; filePath, FileOpenMode mode = eFOM_READ, FileOpenKind kind = eFOK_BINARY)</p> <p>Opens a file at the given path.</p> Parameter <code>filePath</code> The path to the file to open. Parameter <code>mode</code> The open mode to use. Parameter <code>kind</code> The type of file to open. Return The result of the operation."},{"location":"api/SparkyStudios/DiskFile/#position","title":"Position","text":"<p>AmSize Position() override</p> <p>@copydoc File::Position</p>"},{"location":"api/SparkyStudios/DiskFile/#read","title":"Read","text":"<p>AmSize Read(AmUInt8Buffer dst, AmSize bytes) override</p> <p>@copydoc File::Read</p>"},{"location":"api/SparkyStudios/DiskFile/#seek","title":"Seek","text":"<p>void Seek(AmInt64 offset, FileSeekOrigin origin) override</p> <p>@copydoc File::Seek</p>"},{"location":"api/SparkyStudios/DiskFile/#write","title":"Write","text":"<p>AmSize Write(AmConstUInt8Buffer src, AmSize bytes) override</p> <p>@copydoc File::Write</p>"},{"location":"api/SparkyStudios/DiskFile/#diskfile_2","title":"~DiskFile","text":"<p>~DiskFile() override</p> <p>Destroys the instance and release the file handler.</p>"},{"location":"api/SparkyStudios/DiskFileSystem/","title":"DiskFileSystem","text":"<p>class  DiskFileSystem final : public FileSystem</p> <p>A FileSystem implementation that reads and write files      * from disk.</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#functions","title":"Functions","text":"Name Description DiskFileSystem Create a new instance of the DiskFileSystem class. SetBasePath @copydoc FileSystem::SetBasePath GetBasePath @copydoc FileSystem::GetBasePath ResolvePath @copydoc FileSystem::ResolvePath Exists @copydoc FileSystem::Exists IsDirectory @copydoc FileSystem::IsDirectory Join @copydoc FileSystem::Join OpenFile @copydoc FileSystem::OpenFile StartOpenFileSystem @copydoc FileSystem::StartOpenFileSystem TryFinalizeOpenFileSystem @copydoc FileSystem::TryFinalizeOpenFileSystem StartCloseFileSystem @copydoc FileSystem::StartCloseFileSystem TryFinalizeCloseFileSystem @copydoc FileSystem::TryFinalizeCloseFileSystem"},{"location":"api/SparkyStudios/DiskFileSystem/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/DiskFileSystem/#diskfilesystem_1","title":"DiskFileSystem","text":"<p>DiskFileSystem()</p> <p>Create a new instance of the DiskFileSystem class.</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#exists","title":"Exists","text":"<p>[[nodiscard]] bool Exists(const AmOsString&amp; path) const override</p> <p>@copydoc FileSystem::Exists</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#getbasepath","title":"GetBasePath","text":"<p>[[nodiscard]] const AmOsString&amp; GetBasePath() const override</p> <p>@copydoc FileSystem::GetBasePath</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#isdirectory","title":"IsDirectory","text":"<p>[[nodiscard]] bool IsDirectory(const AmOsString&amp; path) const override</p> <p>@copydoc FileSystem::IsDirectory</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#join","title":"Join","text":"<p>[[nodiscard]] AmOsString Join(const std::vector&lt;AmOsString&gt;&amp; parts) const override</p> <p>@copydoc FileSystem::Join</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#openfile","title":"OpenFile","text":"<p>[[nodiscard]] std::shared_ptr&lt;File&gt; OpenFile(const AmOsString&amp; path, FileOpenMode mode) const override</p> <p>@copydoc FileSystem::OpenFile</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#resolvepath","title":"ResolvePath","text":"<p>[[nodiscard]] AmOsString ResolvePath(const AmOsString&amp; path) const override</p> <p>@copydoc FileSystem::ResolvePath</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#setbasepath","title":"SetBasePath","text":"<p>void SetBasePath(const AmOsString&amp; basePath) override</p> <p>@copydoc FileSystem::SetBasePath</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>void StartCloseFileSystem() override</p> <p>@copydoc FileSystem::StartCloseFileSystem</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>void StartOpenFileSystem() override</p> <p>@copydoc FileSystem::StartOpenFileSystem</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>bool TryFinalizeCloseFileSystem() override</p> <p>@copydoc FileSystem::TryFinalizeCloseFileSystem</p>"},{"location":"api/SparkyStudios/DiskFileSystem/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>bool TryFinalizeOpenFileSystem() override</p> <p>@copydoc FileSystem::TryFinalizeOpenFileSystem</p>"},{"location":"api/SparkyStudios/Edge/","title":"Edge","text":"<p>struct  Edge</p> <p>Represents an edge.</p>"},{"location":"api/SparkyStudios/Effect/","title":"Effect","text":"<p>class  Effect : public Asset&lt;AmEffectID&gt;</p> <p>Amplitude Effect.</p> <p>An effect is a sound filter applied to one or more sound objects (sounds, collections, or switch containers) during playback.</p> <p>Effects are customized using parameters and each parameters can be updated at runtime using a <code>RTPC.</code></p>"},{"location":"api/SparkyStudios/Effect/#functions","title":"Functions","text":"Name Description Update Updates the effect parameters on each frames. CreateInstance Creates an instance of this effect. DestroyInstance Destroys an instance of this effect."},{"location":"api/SparkyStudios/Effect/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Effect/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance() const</p> <p>Creates an instance of this effect.</p> Return The effect instance."},{"location":"api/SparkyStudios/Effect/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(EffectInstance* instance) const = 0</p> <p>Destroys an instance of this effect.</p> Parameter <code>instance</code> The effect instance to delete."},{"location":"api/SparkyStudios/Effect/#update","title":"Update","text":"<p>virtual void Update() = 0</p> <p>Updates the effect parameters on each frames.</p>"},{"location":"api/SparkyStudios/EffectInstance/","title":"EffectInstance","text":"<p>class EffectInstance</p> <p>An instance of an Effect asset.</p> <p>The effect instance is the real filter applied to only one sound object at a time. It is used to not share the same state between multiple sound objects.</p>"},{"location":"api/SparkyStudios/EffectInstance/#functions","title":"Functions","text":"Name Description ~EffectInstance Destroys the EffectInstance. GetFilter Get the filter instance wrapped by this effect."},{"location":"api/SparkyStudios/EffectInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/EffectInstance/#getfilter","title":"GetFilter","text":"<p>* GetFilter() const</p> <p>Get the filter instance wrapped by this effect.</p> Return The filter instance."},{"location":"api/SparkyStudios/EffectInstance/#effectinstance_1","title":"~EffectInstance","text":"<p>virtual ~EffectInstance() = default</p> <p>Destroys the EffectInstance.</p>"},{"location":"api/SparkyStudios/Entity/","title":"Entity","text":"<p>class  Entity</p> <p>An Entity represent an object in the game.</p> <p>Amplitude use entities to link sound to an object in the game. Each sounds played from an entity get the location and orientation data fom that entity.</p> <p>The Entity class is a lightweight reference to a EntityInternalState object which is managed by the Engine.</p>"},{"location":"api/SparkyStudios/Entity/#functions","title":"Functions","text":"Name Description Entity Creates an uninitialized Entity. Clear Uninitializes this Entity. Valid Checks whether this Entity has been initialized. GetId Gets the ID of this Entity in game. GetVelocity Gets the velocity of the Entity. SetLocation Sets the location of this Entity. GetLocation Gets the current location of this Entity. SetOrientation Sets the orientation of this Entity. GetDirection Get the direction vector of the Entity. GetUp Get the up vector of the Entity. GetOrientation Get the orientation of the Entity. Update Update the state of this Entity. SetObstruction Set the obstruction level of sounds played by this Entity. SetOcclusion Set the occlusion level of sounds played by this Entity. SetDirectivity Sets the directivity and sharpness of sounds played by this Entity. GetObstruction Get the obstruction level of sounds played by this Entity. GetOcclusion Get the occlusion level of sounds played by this Entity. GetDirectivity Gets the directivity of sounds played by this Entity. GetDirectivitySharpness Gets the directivity sharpness of sounds played by this Entity. SetEnvironmentFactor Sets the environment factor for this Entity in the given environment. GetEnvironmentFactor Gets the environment factor of this Entity for the given environment. GetEnvironments Get the list of environments where this Entity belongs or has visited. GetState Returns the internal state of this Entity."},{"location":"api/SparkyStudios/Entity/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Entity/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this Entity.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/SparkyStudios/Entity/#entity_1","title":"Entity","text":"<p>Entity()</p> <p>Creates an uninitialized Entity.</p> <p>An uninitialized Entity cannot provide location and orientation information, and therefore cannot play sounds.</p>"},{"location":"api/SparkyStudios/Entity/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Get the direction vector of the Entity.</p> Return The direction vector."},{"location":"api/SparkyStudios/Entity/#getdirectivity","title":"GetDirectivity","text":"<p>[[nodiscard]] AmReal32 GetDirectivity() const</p> <p>Gets the directivity of sounds played by this Entity.</p> Return The directivity of sound sources."},{"location":"api/SparkyStudios/Entity/#getdirectivitysharpness","title":"GetDirectivitySharpness","text":"<p>[[nodiscard]] AmReal32 GetDirectivitySharpness() const</p> <p>Gets the directivity sharpness of sounds played by this Entity.</p> Return The directivity sharpness of sounds played by this Entity."},{"location":"api/SparkyStudios/Entity/#getenvironmentfactor","title":"GetEnvironmentFactor","text":"<p>[[nodiscard]] AmReal32 GetEnvironmentFactor(AmEnvironmentID environment) const</p> <p>Gets the environment factor of this Entity for the given environment.</p> Parameter <code>environment</code> The environment ID. Return The environment factor."},{"location":"api/SparkyStudios/Entity/#getenvironments","title":"GetEnvironments","text":"<p>[[nodiscard]] const std::map&lt;AmEnvironmentID, AmReal32&gt;&amp; GetEnvironments() const</p> <p>Get the list of environments where this Entity belongs or has visited.</p> Return The list of environments where this Entity belongs or has visited."},{"location":"api/SparkyStudios/Entity/#getid","title":"GetId","text":"<p>[[nodiscard]] AmEntityID GetId() const</p> <p>Gets the ID of this Entity in game.</p> Return The game Entity ID."},{"location":"api/SparkyStudios/Entity/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this Entity.</p> Return The current location of this Entity."},{"location":"api/SparkyStudios/Entity/#getobstruction","title":"GetObstruction","text":"<p>[[nodiscard]] AmReal32 GetObstruction() const</p> <p>Get the obstruction level of sounds played by this Entity.</p> Return The obstruction amount."},{"location":"api/SparkyStudios/Entity/#getocclusion","title":"GetOcclusion","text":"<p>[[nodiscard]] AmReal32 GetOcclusion() const</p> <p>Get the occlusion level of sounds played by this Entity.</p> Return The occlusion amount."},{"location":"api/SparkyStudios/Entity/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Get the orientation of the Entity.</p> Return The entity's orientation."},{"location":"api/SparkyStudios/Entity/#getstate","title":"GetState","text":"<p>[[nodiscard]] EntityInternalState* GetState() const</p> <p>Returns the internal state of this Entity.</p> Return The Entity internal state."},{"location":"api/SparkyStudios/Entity/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Get the up vector of the Entity.</p> Return The up vector."},{"location":"api/SparkyStudios/Entity/#getvelocity","title":"GetVelocity","text":"<p>[[nodiscard]] const AmVec3&amp; GetVelocity() const</p> <p>Gets the velocity of the Entity.</p> Return The Entity's velocity."},{"location":"api/SparkyStudios/Entity/#setdirectivity","title":"SetDirectivity","text":"<p>void SetDirectivity(AmReal32 directivity, AmReal32 sharpness) const</p> <p>Sets the directivity and sharpness of sounds played by this Entity.</p> Parameter <code>directivity</code> The directivity of the sound source, in the range [0, 1]. Parameter <code>sharpness</code> The directivity sharpness of the sound source, in the range [1, +INF]. Increasing this value increases the directivity towards the front of the source."},{"location":"api/SparkyStudios/Entity/#setenvironmentfactor","title":"SetEnvironmentFactor","text":"<p>void SetEnvironmentFactor(AmEnvironmentID environment, AmReal32 factor) const</p> <p>Sets the environment factor for this Entity in the given environment.</p> Parameter <code>environment</code> The environment ID. Parameter <code>factor</code> The environment factor."},{"location":"api/SparkyStudios/Entity/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this Entity.</p> Parameter <code>location</code> The new location."},{"location":"api/SparkyStudios/Entity/#setobstruction","title":"SetObstruction","text":"<p>void SetObstruction(AmReal32 obstruction) const</p> <p>Set the obstruction level of sounds played by this Entity.</p> Parameter <code>obstruction</code> The obstruction amount. This is provided by the game engine."},{"location":"api/SparkyStudios/Entity/#setocclusion","title":"SetOcclusion","text":"<p>void SetOcclusion(AmReal32 occlusion) const</p> <p>Set the occlusion level of sounds played by this Entity.</p> Parameter <code>occlusion</code> The occlusion amount. This is provided by the game engine."},{"location":"api/SparkyStudios/Entity/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the orientation of this Entity.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/SparkyStudios/Entity/#update","title":"Update","text":"<p>void Update() const</p> <p>Update the state of this Entity.</p> <p>This method is called automatically by the Engine on each frames.</p>"},{"location":"api/SparkyStudios/Entity/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this Entity has been initialized.</p> Return boolean true if this Entity has been initialized."},{"location":"api/SparkyStudios/Environment/","title":"Environment","text":"<p>class  Environment</p> <p>An Environment is a zone where every spatialized audio playing inside him got      * applied a specific effect.</p> <p>The Environment class is a lightweight reference to a EnvironmentInternalState object which is managed by the Engine.</p>"},{"location":"api/SparkyStudios/Environment/#functions","title":"Functions","text":"Name Description Environment Creates an uninitialized Environment. Clear Uninitializes this Environment. Valid Checks whether this Environment has been initialized. GetId Returns the unique ID of this Environment. SetLocation Sets the location of this Environment. GetLocation Gets the current location of this Environment. SetOrientation Sets the orientation of this Environment. GetOrientation Gets the current orientation of this Environment. GetDirection Get the direction vector of the Environment. GetUp Get the up vector of the Environment. GetFactor Get the Environment factor for the given location. GetFactor Get the Environment factor for the given entity. SetEffect Set the Effect applied in the Environment. SetEffect Set the Effect applied in the Environment. SetEffect Set the Effect applied in the Environment. GetEffect Get the Effect linked to this environment. SetZone Set the Zone for this environment. GetZone Get the Zone linked to this environment. GetState Returns the internal state of this Environment. Update Update the state of this Environment."},{"location":"api/SparkyStudios/Environment/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Environment/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this Environment.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/SparkyStudios/Environment/#environment_1","title":"Environment","text":"<p>Environment()</p> <p>Creates an uninitialized Environment.</p> <p>An uninitialized Environment cannot provide location and orientation information, and therefore cannot play sounds.</p>"},{"location":"api/SparkyStudios/Environment/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Get the direction vector of the Environment.</p> Return The direction vector."},{"location":"api/SparkyStudios/Environment/#geteffect","title":"GetEffect","text":"<p>[[nodiscard]] const Effect* GetEffect() const</p> <p>Get the Effect linked to this environment.</p> Return An Effect instance."},{"location":"api/SparkyStudios/Environment/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] AmReal32 GetFactor(const AmVec3&amp; location) const</p> <p>Get the Environment factor for the given location.</p> Parameter <code>location</code> The location for which compute the environment factor. Return The environment factor. <p>[[nodiscard]] AmReal32 GetFactor(const Entity&amp; entity) const</p> <p>Get the Environment factor for the given entity.</p> Parameter <code>entity</code> The entity for which compute the environment factor. Return The environment factor."},{"location":"api/SparkyStudios/Environment/#getid","title":"GetId","text":"<p>[[nodiscard]] AmEnvironmentID GetId() const</p> <p>Returns the unique ID of this Environment.</p> Return The Environment unique ID."},{"location":"api/SparkyStudios/Environment/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this Environment.</p> Return The current location of this Environment."},{"location":"api/SparkyStudios/Environment/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the current orientation of this Environment.</p> Return The current orientation of this Environment."},{"location":"api/SparkyStudios/Environment/#getstate","title":"GetState","text":"<p>[[nodiscard]] EnvironmentInternalState* GetState() const</p> <p>Returns the internal state of this Environment.</p> Return The Environment internal state."},{"location":"api/SparkyStudios/Environment/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Get the up vector of the Environment.</p> Return The up vector."},{"location":"api/SparkyStudios/Environment/#getzone","title":"GetZone","text":"<p>[[nodiscard]] Zone* GetZone() const</p> <p>Get the Zone linked to this environment.</p> Return An Zone instance."},{"location":"api/SparkyStudios/Environment/#seteffect","title":"SetEffect","text":"<p>void SetEffect(AmEffectID effect) const</p> <p>Set the Effect applied in the Environment.</p> Parameter <code>effect</code> The effect to apply in the Environment. <p>void SetEffect(const std::string&amp; effect) const</p> <p>Set the Effect applied in the Environment.</p> Parameter <code>effect</code> The effect to apply in the Environment. <p>void SetEffect(const Effect* effect) const</p> <p>Set the Effect applied in the Environment.</p> Parameter <code>effect</code> The effect to apply in the Environment."},{"location":"api/SparkyStudios/Environment/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this Environment.</p> Parameter <code>location</code> The new location."},{"location":"api/SparkyStudios/Environment/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the orientation of this Environment.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/SparkyStudios/Environment/#setzone","title":"SetZone","text":"<p>void SetZone(Zone* zone) const</p> <p>Set the Zone for this environment.</p> Parameter <code>zone</code> The environment's zone."},{"location":"api/SparkyStudios/Environment/#update","title":"Update","text":"<p>void Update() const</p> <p>Update the state of this Environment.</p> <p>This method is called automatically by the Engine on each frames.</p>"},{"location":"api/SparkyStudios/Environment/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this Environment has been initialized.</p> Return boolean true if this Environment has been initialized."},{"location":"api/SparkyStudios/Event/","title":"Event","text":"<p>class  Event : public Asset&lt;AmEventID&gt;</p> <p>An event is mainly used to apply a set of actions at a given time in game.</p> <p>This Event class is only referenced through an EventCanceler object and it is managed by the Engine. Events can be triggered at runtime by calling the <code>Engine::Trigger()</code> method using the name of the event.</p>"},{"location":"api/SparkyStudios/EventCanceler/","title":"EventCanceler","text":"<p>class  EventCanceler</p> <p>A class which can cancel a triggered Event.</p>"},{"location":"api/SparkyStudios/EventCanceler/#functions","title":"Functions","text":"Name Description EventCanceler Creates an uninitialized EventCanceler. EventCanceler Creates an @c EventCanceler which will abort * the given event once cancelled. ~EventCanceler Destroys the event canceller and releases * the wrapped event instance. Valid Checks whether this EventCanceler has been initialized. Cancel Cancels and abort the wrapped Event. GetEvent Returns the Event wrapped by this EventCanceler."},{"location":"api/SparkyStudios/EventCanceler/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/EventCanceler/#cancel","title":"Cancel","text":"<p>void Cancel() const</p> <p>Cancels and abort the wrapped Event.</p>"},{"location":"api/SparkyStudios/EventCanceler/#eventcanceler_1","title":"EventCanceler","text":"<p>EventCanceler()</p> <p>Creates an uninitialized EventCanceler.</p> <p>An uninitialized Event cannot be triggered.</p> <p>explicit EventCanceler(EventInstance* event)</p> <p>Creates an @c EventCanceler which will abort          * the given event once cancelled.</p> Parameter <code>event</code> The event instance to cancel."},{"location":"api/SparkyStudios/EventCanceler/#getevent","title":"GetEvent","text":"<p>[[nodiscard]] EventInstance* GetEvent() const</p> <p>Returns the Event wrapped by this EventCanceler.</p> Return The Event wrapped by this EventCanceler."},{"location":"api/SparkyStudios/EventCanceler/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this EventCanceler has been initialized.</p> Return true if this EventCanceler has been initialized, false otherwise."},{"location":"api/SparkyStudios/EventCanceler/#eventcanceler_2","title":"~EventCanceler","text":"<p>~EventCanceler()</p> <p>Destroys the event canceller and releases          * the wrapped event instance.</p>"},{"location":"api/SparkyStudios/EventInstance/","title":"EventInstance","text":"<p>class  EventInstance</p> <p>A triggered event.</p> <p>EventInstance are created when an Event is effectively triggered. They represent the lifetime of that event at that particular time.</p>"},{"location":"api/SparkyStudios/EventInstance/#functions","title":"Functions","text":"Name Description AdvanceFrame Applies a frame update on this Event. IsRunning Returns whether thisEvent is running. Abort Aborts the execution of this Event."},{"location":"api/SparkyStudios/EventInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/EventInstance/#abort","title":"Abort","text":"<p>virtual void Abort() = 0</p> <p>Aborts the execution of this Event.</p>"},{"location":"api/SparkyStudios/EventInstance/#advanceframe","title":"AdvanceFrame","text":"<p>virtual void AdvanceFrame(AmTime deltaTime) = 0</p> <p>Applies a frame update on this Event.</p> Parameter <code>deltaTime</code> The time elapsed since the last frame."},{"location":"api/SparkyStudios/EventInstance/#isrunning","title":"IsRunning","text":"<p>[[nodiscard]] virtual bool IsRunning() const = 0</p> <p>Returns whether thisEvent is running.</p> Return true if the event is running, false otherwise."},{"location":"api/SparkyStudios/FFT/","title":"FFT","text":"<p>class  FFT</p> <p>The Fast Fourier Transform (FFT) class.</p> <p>This utility class is used to perform Fast Fourier Transform (FFT) operations on audio data with real-to-complex/complex-to-real routines. The algorithm is highly optimized for speed, and the class provides and high-level API for the user.</p> <p>The output of the operation is ready-to-use, that means all the post processing operations (scale, normalization, etc.) have been applied.</p>"},{"location":"api/SparkyStudios/FFT/#functions","title":"Functions","text":"Name Description GetOutputSize Gets the FFT output buffer size. FFT The default constructor. ~FFT Destructor. Initialize Initializes the FFT instance. Forward Performs the forward FFT operation. Backward Performs the inverse FFT operation."},{"location":"api/SparkyStudios/FFT/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/FFT/#backward","title":"Backward","text":"<p>void Backward(AmAudioSampleBuffer output, SplitComplex&amp; splitComplex) const</p> <p>Performs the inverse FFT operation.</p> Parameter <code>output</code> The output audio data. This buffer needs to be of the same size as the one provided to the Initialize() method. Parameter <code>splitComplex</code> The complex buffer output separated into real and imaginary parts. The buffer will be resized if necessary."},{"location":"api/SparkyStudios/FFT/#fft_1","title":"FFT","text":"<p>FFT()</p> <p>The default constructor.</p>"},{"location":"api/SparkyStudios/FFT/#forward","title":"Forward","text":"<p>void Forward(AmConstAudioSampleBuffer input, SplitComplex&amp; splitComplex) const</p> <p>Performs the forward FFT operation.</p> Parameter <code>input</code> The input audio data. This buffer needs to be of the same size as the one provided to the Initialize() method. Parameter <code>splitComplex</code> The complex buffer output separated into real and imaginary parts. The buffer will be resized if necessary."},{"location":"api/SparkyStudios/FFT/#getoutputsize","title":"GetOutputSize","text":"<p>static AmUInt64 GetOutputSize(AmUInt64 inputSize)</p> <p>Gets the FFT output buffer size.</p> Parameter <code>inputSize</code> The size of the input buffer. Return The size of the FFT output buffer for the given input size."},{"location":"api/SparkyStudios/FFT/#initialize","title":"Initialize","text":"<p>void Initialize(AmSize size) const</p> <p>Initializes the FFT instance.</p> Parameter <code>size</code> The size of the input (as a power of 2)."},{"location":"api/SparkyStudios/FFT/#fft_2","title":"~FFT","text":"<p>~FFT()</p> <p>Destructor.</p>"},{"location":"api/SparkyStudios/Face/","title":"Face","text":"<p>struct  Face</p> <p>Represents a triangulated face.</p>"},{"location":"api/SparkyStudios/Fader/","title":"Fader","text":"<p>class  Fader</p> <p>Helper class to process faders.</p> <p>A fader is used to move a value to a specific target value during an amount of time and according to a fading algorithm.</p>"},{"location":"api/SparkyStudios/Fader/#variables","title":"Variables","text":"Name Description m_name The name of this Fader."},{"location":"api/SparkyStudios/Fader/#functions","title":"Functions","text":"Name Description Fader Create a new Fader instance. Fader Default Fader constructor. CreateInstance Creates a new instance of the Fader. * @return A new instance of the Fader. DestroyInstance Destroys an instance of the Fader. The instance should have * been created with CreateInstance(). * @param instance The Fader instance to be destroyed. GetName Gets the name of this Fader. GetControlPoints Gets the control points of the transition curve used by this Fader. Register Registers a new fader. Unregister Unregister a fader. Construct Creates a new instance of the the Fader with the given name * and returns its pointer. The returned pointer should be deleted using Fader::Destruct(). Destruct Destroys the given Fader instance. LockRegistry Locks the faders registry. UnlockRegistry Unlocks the faders registry. GetRegistry Gets the list of registered Faders. Find Look up a Fader by name."},{"location":"api/SparkyStudios/Fader/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/Fader/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this Fader.</p>"},{"location":"api/SparkyStudios/Fader/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Fader/#construct","title":"Construct","text":"<p>static FaderInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the the Fader with the given name          * and returns its pointer. The returned pointer should be deleted using Fader::Destruct().</p> Parameter <code>name</code> The name of the Fader. Return The Fader with the given name, or NULL if none."},{"location":"api/SparkyStudios/Fader/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance()</p> <p>Creates a new instance of the Fader.          * @return A new instance of the Fader.</p>"},{"location":"api/SparkyStudios/Fader/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(FaderInstance* instance) = 0</p> <p>Destroys an instance of the Fader. The instance should have          * been created with CreateInstance().          * @param instance The Fader instance to be destroyed.</p>"},{"location":"api/SparkyStudios/Fader/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, FaderInstance* instance)</p> <p>Destroys the given Fader instance.</p> Parameter <code>name</code> The name of the Fader. Parameter <code>instance</code> The Fader instance to destroy."},{"location":"api/SparkyStudios/Fader/#fader_1","title":"Fader","text":"<p>explicit Fader(AmString name)</p> <p>Create a new Fader instance.</p> Parameter <code>name</code> The Fader name. eg. \"MiniAudioLinear\". <p>Fader()</p> <p>Default Fader constructor.</p> <p>This will not automatically register the Fader. It's meant for internal Faders only.</p>"},{"location":"api/SparkyStudios/Fader/#find","title":"Find","text":"<p>static Fader* Find(const AmString&amp; name)</p> <p>Look up a Fader by name.</p> Return The Fader with the given name, or NULL if none."},{"location":"api/SparkyStudios/Fader/#getcontrolpoints","title":"GetControlPoints","text":"<p>[[nodiscard]] virtual BeizerCurveControlPoints GetControlPoints() const = 0</p> <p>Gets the control points of the transition curve used by this Fader.</p> Return The control points of the transition curve used by this Fader."},{"location":"api/SparkyStudios/Fader/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this Fader.</p> Return The name of this Fader."},{"location":"api/SparkyStudios/Fader/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, Fader*&gt;&amp; GetRegistry()</p> <p>Gets the list of registered Faders.</p> Return The registry of Faders."},{"location":"api/SparkyStudios/Fader/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the faders registry.</p> <p>This function is mainly used for internal purposes. Its called before the Engine initialization, to discard the registration of new Faders after the engine is fully loaded.</p>"},{"location":"api/SparkyStudios/Fader/#register","title":"Register","text":"<p>static void Register(Fader* fader)</p> <p>Registers a new fader.</p> Parameter <code>fader</code> The Fader to add in the registry."},{"location":"api/SparkyStudios/Fader/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the faders registry.</p> <p>This function is mainly used for internal purposes. Its called after the Engine deinitialization, to allow the registration of new divers after the engine is fully unloaded.</p>"},{"location":"api/SparkyStudios/Fader/#unregister","title":"Unregister","text":"<p>static void Unregister(const Fader* fader)</p> <p>Unregister a fader.</p> Parameter <code>fader</code> The Fader to remove from the registry."},{"location":"api/SparkyStudios/FaderInstance/","title":"FaderInstance","text":"<p>class  FaderInstance</p> <p>A Fader instance. An object of this class will be created each time a <code>Fader</code> is requested.</p>"},{"location":"api/SparkyStudios/FaderInstance/#types","title":"Types","text":"Name Description Transition Create an animation transition function using * a one-dimensional cubic bezier curve."},{"location":"api/SparkyStudios/FaderInstance/#functions","title":"Functions","text":"Name Description FaderInstance Construct a new FaderInstance object. Set Set up fader. Set Set up fader. SetDuration Set the duration of the transition. GetFromTime Get the current fading value. GetFromPercentage Get the current fading value. GetState Get the state of this Fader. SetState Set the state of this Fader. Start Sets the fading start time."},{"location":"api/SparkyStudios/FaderInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/FaderInstance/#faderinstance_1","title":"FaderInstance","text":"<p>FaderInstance()</p> <p>Construct a new FaderInstance object.</p> <p>This will initialize the fader instance state to default values.</p>"},{"location":"api/SparkyStudios/FaderInstance/#getfrompercentage","title":"GetFromPercentage","text":"<p>virtual AmReal64 GetFromPercentage(AmReal64 percentage)</p> <p>Get the current fading value.</p> Parameter <code>percentage</code> The percentage of time elapsed. This should be in the range [0, 1]. Return The current value."},{"location":"api/SparkyStudios/FaderInstance/#getfromtime","title":"GetFromTime","text":"<p>virtual AmReal64 GetFromTime(AmTime time)</p> <p>Get the current fading value.</p> <p>To use this method you firstly need to define the fading start time using <code>Fader::Start()</code>.</p> Parameter <code>time</code> The time at which the value should be calculated. Return The current value."},{"location":"api/SparkyStudios/FaderInstance/#getstate","title":"GetState","text":"<p>[[nodiscard]] inline eFaderState GetState() const</p> <p>Get the state of this Fader.</p> Return The Fader state."},{"location":"api/SparkyStudios/FaderInstance/#set","title":"Set","text":"<p>void Set(AmReal64 from, AmReal64 to, AmTime duration)</p> <p>Set up fader.</p> Parameter <code>from</code> The start value. Parameter <code>to</code> The target value. Parameter <code>duration</code> The duration of transition. <p>void Set(AmReal64 from, AmReal64 to)</p> <p>Set up fader.</p> Parameter <code>from</code> The start value. Parameter <code>to</code> The target value."},{"location":"api/SparkyStudios/FaderInstance/#setduration","title":"SetDuration","text":"<p>void SetDuration(AmTime duration)</p> <p>Set the duration of the transition.</p> Parameter <code>duration</code> The transition duration."},{"location":"api/SparkyStudios/FaderInstance/#setstate","title":"SetState","text":"<p>inline void SetState(eFaderState state)</p> <p>Set the state of this Fader.</p> Parameter <code>state</code> The state to set."},{"location":"api/SparkyStudios/FaderInstance/#start","title":"Start","text":"<p>void Start(AmTime time = 0.0)</p> <p>Sets the fading start time.</p> Parameter <code>time</code> The fading start time."},{"location":"api/SparkyStudios/FaderInstance/Transition/","title":"Transition","text":"<p>struct Transition</p> <p>Create an animation transition function using          * a one-dimensional cubic bezier curve.</p> <p>This use the exact same algorithm as in CSS. The first and last control points of the cubic bezier curve are fixed to (0,0) and (1,1) respectively.</p>"},{"location":"api/SparkyStudios/FaderInstance/Transition/#variables","title":"Variables","text":"Name Description m_controlPoints The control points."},{"location":"api/SparkyStudios/FaderInstance/Transition/#functions","title":"Functions","text":"Name Description Transition Construct a new Transition curve. Transition Construct a new Transition curve. Ease Given an animation duration percentage (in the range [0, 1]), * it calculates the animation progression percentage from the configured curve."},{"location":"api/SparkyStudios/FaderInstance/Transition/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/FaderInstance/Transition/#m_controlpoints","title":"m_controlPoints","text":"<p>BeizerCurveControlPoints m_controlPoints</p> <p>The control points.</p>"},{"location":"api/SparkyStudios/FaderInstance/Transition/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/FaderInstance/Transition/#ease","title":"Ease","text":"<p>[[nodiscard]] AmTime Ease(AmTime t) const</p> <p>Given an animation duration percentage (in the range [0, 1]),              * it calculates the animation progression percentage from the configured curve.</p> Parameter <code>t</code> The animation duration percentage (in the range [0, 1]). Return The animation progress percentage (in the range [0, 1])."},{"location":"api/SparkyStudios/FaderInstance/Transition/#transition_1","title":"Transition","text":"<p>Transition(AmReal32 x1, AmReal32 y1, AmReal32 x2, AmReal32 y2)</p> <p>Construct a new Transition curve.</p> Parameter <code>x1</code> The x coordinate of the second control point. Parameter <code>y1</code> The y coordinate of the second control point. Parameter <code>x2</code> The x coordinate of the third control point. Parameter <code>y2</code> The y coordinate of the third control point. <p>Transition(const BeizerCurveControlPoints&amp; controlPoints)</p> <p>Construct a new Transition curve.</p> Parameter <code>controlPoints</code> The control points of the curve."},{"location":"api/SparkyStudios/File/","title":"File","text":"<p>class  File</p> <p>Base class for a file in a FileSystem.</p>"},{"location":"api/SparkyStudios/File/#functions","title":"Functions","text":"Name Description ~File Virtual destructor. GetPath Gets the path to the file in the loaded FileSystem. Read8 Reads a single byte from the file in an @c AmUInt8. Read16 Reads two bytes from the file in an @c AmUInt16. Read32 Reads four bytes from the file in an @c AmUInt32. Read64 Reads eight bytes from the file in an @c AmUInt64. ReadString Reads a string from the file. Write8 Writes a single byte to the file from an @c AmUInt8. Write16 Writes two bytes to the file from an @c AmUInt16. Write32 Writes four bytes to the file from an @c AmUInt32. Write64 Writes eight bytes to the file from an @c AmUInt64. WriteString Writes a string to the file. Eof Check if the read cursor is at the end of the file. Read Reads data from the file. Write Writes data to the file. Length Gets the size of the file in bytes. Seek Seeks the read/write to the specified offset. Seek Seeks the read/write to the specified offset, starting at the given * origin. Position Gets the current position of the read/write cursor. GetPtr Gets the pointer to the internal file handle. IsValid Checks if the file is valid."},{"location":"api/SparkyStudios/File/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/File/#eof","title":"Eof","text":"<p>virtual bool Eof() = 0</p> <p>Check if the read cursor is at the end of the file.</p> Return True if the read cursor is at the end of the file, false otherwise."},{"location":"api/SparkyStudios/File/#getpath","title":"GetPath","text":"<p>[[nodiscard]] virtual AmOsString GetPath() const = 0</p> <p>Gets the path to the file in the loaded FileSystem.</p> Return The path to the file."},{"location":"api/SparkyStudios/File/#getptr","title":"GetPtr","text":"<p>virtual AmVoidPtr GetPtr()</p> <p>Gets the pointer to the internal file handle.</p> Return The internal file handle. This depends on the implementation."},{"location":"api/SparkyStudios/File/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] virtual bool IsValid() const = 0</p> <p>Checks if the file is valid.</p> <p>Validity of a file is determined by the underlying implementation. But this should primarily mean that the file exists AND has been opened.</p> Return True if the file is valid, false otherwise."},{"location":"api/SparkyStudios/File/#length","title":"Length","text":"<p>virtual AmSize Length() = 0</p> <p>Gets the size of the file in bytes.</p> Return The size of the file in bytes."},{"location":"api/SparkyStudios/File/#position","title":"Position","text":"<p>virtual AmSize Position() = 0</p> <p>Gets the current position of the read/write cursor.</p> Return The actual position of the read/write cursor."},{"location":"api/SparkyStudios/File/#read","title":"Read","text":"<p>virtual AmSize Read(AmUInt8Buffer dst, AmSize bytes) = 0</p> <p>Reads data from the file.</p> Parameter <code>dst</code> The destination buffer of the read data. Parameter <code>bytes</code> The number of bytes to read from the file. The destination buffer must be at least as large as the number of bytes to read. Return The number of bytes read from the file."},{"location":"api/SparkyStudios/File/#read16","title":"Read16","text":"<p>AmUInt16 Read16()</p> <p>Reads two bytes from the file in an @c AmUInt16.</p> Return The read value."},{"location":"api/SparkyStudios/File/#read32","title":"Read32","text":"<p>AmUInt32 Read32()</p> <p>Reads four bytes from the file in an @c AmUInt32.</p> Return The read value."},{"location":"api/SparkyStudios/File/#read64","title":"Read64","text":"<p>AmUInt64 Read64()</p> <p>Reads eight bytes from the file in an @c AmUInt64.</p> Return The read value."},{"location":"api/SparkyStudios/File/#read8","title":"Read8","text":"<p>AmUInt8 Read8()</p> <p>Reads a single byte from the file in an @c AmUInt8.</p> Return The read value."},{"location":"api/SparkyStudios/File/#readstring","title":"ReadString","text":"<p>AmString ReadString()</p> <p>Reads a string from the file.</p> Return The read value."},{"location":"api/SparkyStudios/File/#seek","title":"Seek","text":"<p>void Seek(AmSize offset)</p> <p>Seeks the read/write to the specified offset.</p> Parameter <code>offset</code> The offset in bytes from the beginning of the file. <p>virtual void Seek(AmInt64 offset, FileSeekOrigin origin) = 0</p> <p>Seeks the read/write to the specified offset, starting at the given          * origin.</p> Parameter <code>offset</code> The offset in bytes from the beginning of the file. Parameter <code>origin</code> The origin from which to begin seeking."},{"location":"api/SparkyStudios/File/#write","title":"Write","text":"<p>virtual AmSize Write(AmConstUInt8Buffer src, AmSize bytes) = 0</p> <p>Writes data to the file.</p> Parameter <code>src</code> The source buffer of the data to write. Parameter <code>bytes</code> The number of bytes to write to the file. The source buffer must be at least as large as the number of bytes to write. Return The number of bytes written to the file."},{"location":"api/SparkyStudios/File/#write16","title":"Write16","text":"<p>AmSize Write16(AmUInt16 value)</p> <p>Writes two bytes to the file from an @c AmUInt16.</p> Parameter <code>value</code> The value to write."},{"location":"api/SparkyStudios/File/#write32","title":"Write32","text":"<p>AmSize Write32(AmUInt32 value)</p> <p>Writes four bytes to the file from an @c AmUInt32.</p> Parameter <code>value</code> The value to write."},{"location":"api/SparkyStudios/File/#write64","title":"Write64","text":"<p>AmSize Write64(AmUInt64 value)</p> <p>Writes eight bytes to the file from an @c AmUInt64.</p> Parameter <code>value</code> The value to write."},{"location":"api/SparkyStudios/File/#write8","title":"Write8","text":"<p>AmSize Write8(AmUInt8 value)</p> <p>Writes a single byte to the file from an @c AmUInt8.</p> Parameter <code>value</code> The value to write."},{"location":"api/SparkyStudios/File/#writestring","title":"WriteString","text":"<p>AmSize WriteString(const AmString&amp; value)</p> <p>Writes a string to the file.</p> Parameter <code>value</code> The value to write."},{"location":"api/SparkyStudios/File/#file_1","title":"~File","text":"<p>virtual ~File() = default</p> <p>Virtual destructor.</p>"},{"location":"api/SparkyStudios/FileOpenKind/","title":"FileOpenKind","text":"<p>enum FileOpenKind : AmUInt8</p> <p>The type of file being opened.</p>"},{"location":"api/SparkyStudios/FileOpenMode/","title":"FileOpenMode","text":"<p>enum FileOpenMode : AmUInt8</p> <p>Describes the mode in which open the file.</p>"},{"location":"api/SparkyStudios/FileSeekOrigin/","title":"FileSeekOrigin","text":"<p>enum FileSeekOrigin : AmUInt8</p> <p>Defines from where to seek in the file.</p>"},{"location":"api/SparkyStudios/FileSystem/","title":"FileSystem","text":"<p>class  FileSystem</p> <p>Base class for files and resources loaders.</p> <p>The FileSystem class is used by the engine as an interface to load files and other resources. It provides basic functionnalities needed by a filesystem</p>"},{"location":"api/SparkyStudios/FileSystem/#functions","title":"Functions","text":"Name Description ~FileSystem Default virtual destructor. SetBasePath Changes the filesystem base path. That path is interpreted by the implementation * and doesn't necessarily have to be a real path on disk. It's just used as the base path * for resolving relative paths from which the engine will load resources. GetBasePath Returns the base path of the filesystem. ResolvePath Resolves a relative path from the filesystem base path. Exists Checks if an item (file or folder) exists on the filesystem. IsDirectory Checks if an item (file or folder) is a directory. Join Merge the given parts of the path into a single path, by joining them with the filesystem * path separator. OpenFile Opens the file at the given path. StartOpenFileSystem Opens the FileSystem. TryFinalizeOpenFileSystem Checks if the FileSystem is initialized. StartCloseFileSystem Stops the FileSystem. TryFinalizeCloseFileSystem Checks if the FileSystem is stopped."},{"location":"api/SparkyStudios/FileSystem/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/FileSystem/#exists","title":"Exists","text":"<p>[[nodiscard]] virtual bool Exists(const AmOsString&amp; path) const = 0</p> <p>Checks if an item (file or folder) exists on the filesystem.</p> Parameter <code>path</code> The path to the item. Return True if the file exists, false otherwise."},{"location":"api/SparkyStudios/FileSystem/#getbasepath","title":"GetBasePath","text":"<p>[[nodiscard]] virtual const AmOsString&amp; GetBasePath() const = 0</p> <p>Returns the base path of the filesystem.</p> Return The base path for resolving relative paths from which the engine will load resources."},{"location":"api/SparkyStudios/FileSystem/#isdirectory","title":"IsDirectory","text":"<p>[[nodiscard]] virtual bool IsDirectory(const AmOsString&amp; path) const = 0</p> <p>Checks if an item (file or folder) is a directory.</p> Parameter <code>path</code> The path to the item. Return True if the file is a directory, false otherwise."},{"location":"api/SparkyStudios/FileSystem/#join","title":"Join","text":"<p>[[nodiscard]] virtual AmOsString Join(const std::vector&lt;AmOsString&gt;&amp; parts) const = 0</p> <p>Merge the given parts of the path into a single path, by joining them with the filesystem          * path separator.</p> Parameter <code>parts</code> The parts of the path. Return A path concatenated with the given parts and the filesystem path separator."},{"location":"api/SparkyStudios/FileSystem/#openfile","title":"OpenFile","text":"<p>[[nodiscard]] virtual std::shared_ptr&lt;File&gt; OpenFile(const AmOsString&amp; path, FileOpenMode mode = eFOM_READ) const = 0</p> <p>Opens the file at the given path.</p> Parameter <code>path</code> The path to the file to open. Parameter <code>mode</code> The file open mode. Return The opened file. The returned File implementation depends on the FileSystem implementation."},{"location":"api/SparkyStudios/FileSystem/#resolvepath","title":"ResolvePath","text":"<p>[[nodiscard]] virtual AmOsString ResolvePath(const AmOsString&amp; path) const = 0</p> <p>Resolves a relative path from the filesystem base path.</p> Return The resolved path."},{"location":"api/SparkyStudios/FileSystem/#setbasepath","title":"SetBasePath","text":"<p>virtual void SetBasePath(const AmOsString&amp; basePath) = 0</p> <p>Changes the filesystem base path. That path is interpreted by the implementation          * and doesn't necessarily have to be a real path on disk. It's just used as the base path          * for resolving relative paths from which the engine will load resources.</p> Parameter <code>basePath</code> The filesystem base path."},{"location":"api/SparkyStudios/FileSystem/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>virtual void StartCloseFileSystem() = 0</p> <p>Stops the FileSystem.</p> <p>This function MUST be called when the FileSystem is no longer needed. It is used to stop the filesystem (eg: unmounting an archive). It is recommended to process the stopping in a separate thread.</p> <p>The implementation is free to ignore this if not needed.</p>"},{"location":"api/SparkyStudios/FileSystem/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>virtual void StartOpenFileSystem() = 0</p> <p>Opens the FileSystem.</p> <p>This function MUST be called before any other actions in the filesystem. It is used to initialize the filesystem (eg: mounting an archive). It is recommended to process the initialization in a separate thread.</p> <p>The implementation is free to ignore this if not needed.</p>"},{"location":"api/SparkyStudios/FileSystem/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>virtual bool TryFinalizeCloseFileSystem() = 0</p> <p>Checks if the FileSystem is stopped.</p> <p>Since the StartCloseFileSystem() function is designed to be asynchronous, this function is used to check if the FileSystem has been successfully stopped.</p> Return True if the FileSystem has been stopped, false otherwise."},{"location":"api/SparkyStudios/FileSystem/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>virtual bool TryFinalizeOpenFileSystem() = 0</p> <p>Checks if the FileSystem is initialized.</p> <p>Since the StartOpenFileSystem() function is designed to be asynchronous, this function is used to check if the FileSystem has been successfully initialized.</p> Return True if the FileSystem has been initialized, false otherwise."},{"location":"api/SparkyStudios/FileSystem/#filesystem_1","title":"~FileSystem","text":"<p>virtual ~FileSystem() = default</p> <p>Default virtual destructor.</p>"},{"location":"api/SparkyStudios/Filter/","title":"Filter","text":"<p>class  Filter</p> <p>Helper class to manage filters.</p> <p>A filter applies transformations on an audio buffer..</p>"},{"location":"api/SparkyStudios/Filter/#variables","title":"Variables","text":"Name Description m_name The name of this filter."},{"location":"api/SparkyStudios/Filter/#functions","title":"Functions","text":"Name Description Filter Create a new @c Filter instance. GetParamCount Get the maximum number of parameters available for this filter. GetParamName Get the name of the parameter at the given index. GetParamType Get the type of the parameter at the given index. GetParamMax Get the maximum allowed value of the parameter at the given index. GetParamMin Get the minimum allowed value of the parameter at the given index. CreateInstance Creates a new instance of the filter. DestroyInstance Destroys an instance of the filter. The instance should have * been created with @c Filter::CreateInstance(). GetName Gets the name of this filter. Register Registers a new filter. Unregister Unregisters a filter. Find Look up a filter by name. Construct Creates a new instance of the the filter with the given name * and returns its pointer. The returned pointer should be deleted using @c Filter::Destruct(). Destruct Destroys the given filter instance. LockRegistry Locks the filters registry. UnlockRegistry Unlocks the filters registry. GetRegistry Gets the list of registered filters."},{"location":"api/SparkyStudios/Filter/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/Filter/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this filter.</p>"},{"location":"api/SparkyStudios/Filter/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Filter/#construct","title":"Construct","text":"<p>static FilterInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the the filter with the given name          * and returns its pointer. The returned pointer should be deleted using @c Filter::Destruct().</p> Parameter <code>name</code> The name of the filter. Return The filter with the given name, or <code>nullptr</code> if none."},{"location":"api/SparkyStudios/Filter/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance()</p> <p>Creates a new instance of the filter.</p> Return A new instance of the filter."},{"location":"api/SparkyStudios/Filter/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(FilterInstance* instance) = 0</p> <p>Destroys an instance of the filter. The instance should have          * been created with @c Filter::CreateInstance().</p> Parameter <code>instance</code> The filter instance to be destroyed."},{"location":"api/SparkyStudios/Filter/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, FilterInstance* instance)</p> <p>Destroys the given filter instance.</p> Parameter <code>name</code> The name of the filter. Parameter <code>instance</code> The filter instance to destroy."},{"location":"api/SparkyStudios/Filter/#filter_1","title":"Filter","text":"<p>explicit Filter(AmString name)</p> <p>Create a new @c Filter instance.</p> Parameter <code>name</code> The filter name. eg. \"Delay\"."},{"location":"api/SparkyStudios/Filter/#find","title":"Find","text":"<p>static Filter* Find(const AmString&amp; name)</p> <p>Look up a filter by name.</p> Return The filter with the given name, or <code>nullptr</code> if none."},{"location":"api/SparkyStudios/Filter/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this filter.</p> Return The name of this filter."},{"location":"api/SparkyStudios/Filter/#getparamcount","title":"GetParamCount","text":"<p>[[nodiscard]] virtual AmUInt32 GetParamCount() const</p> <p>Get the maximum number of parameters available for this filter.</p> Return The maximum number of filter parameters."},{"location":"api/SparkyStudios/Filter/#getparammax","title":"GetParamMax","text":"<p>[[nodiscard]] virtual AmReal32 GetParamMax(AmUInt32 index) const</p> <p>Get the maximum allowed value of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The maximum allowed value of the parameter at the given index."},{"location":"api/SparkyStudios/Filter/#getparammin","title":"GetParamMin","text":"<p>[[nodiscard]] virtual AmReal32 GetParamMin(AmUInt32 index) const</p> <p>Get the minimum allowed value of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The minimum allowed value of the parameter at the given index."},{"location":"api/SparkyStudios/Filter/#getparamname","title":"GetParamName","text":"<p>[[nodiscard]] virtual AmString GetParamName(AmUInt32 index) const</p> <p>Get the name of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The name of the parameter at the given index."},{"location":"api/SparkyStudios/Filter/#getparamtype","title":"GetParamType","text":"<p>[[nodiscard]] virtual AmUInt32 GetParamType(AmUInt32 index) const</p> <p>Get the type of the parameter at the given index.</p> Parameter <code>index</code> The parameter index. Return The type of the parameter at the given index."},{"location":"api/SparkyStudios/Filter/#getregistry","title":"GetRegistry","text":"<p>static const std::map&lt;AmString, Filter*&gt;&amp; GetRegistry()</p> <p>Gets the list of registered filters.</p> Return The registry of filters."},{"location":"api/SparkyStudios/Filter/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the filters registry.</p> <p>This function is mainly used for internal purposes. Its called before the Engine initialization, to discard the registration of new filters after the engine is fully loaded.</p>"},{"location":"api/SparkyStudios/Filter/#register","title":"Register","text":"<p>static void Register(Filter* filter)</p> <p>Registers a new filter.</p> Parameter <code>filter</code> The filter to add in the registry."},{"location":"api/SparkyStudios/Filter/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the filters registry.</p> <p>This function is mainly used for internal purposes. Its called after the Engine deinitialization, to allow the registration of new divers after the engine is fully unloaded.</p>"},{"location":"api/SparkyStudios/Filter/#unregister","title":"Unregister","text":"<p>static void Unregister(const Filter* filter)</p> <p>Unregisters a filter.</p> Parameter <code>filter</code> The filter to remove from the registry."},{"location":"api/SparkyStudios/FilterInstance/","title":"FilterInstance","text":"<p>class  FilterInstance</p> <p>A Filter instance.</p> <p>An object of this class will be created each time a <code>Filter</code> is requested.</p>"},{"location":"api/SparkyStudios/FilterInstance/#functions","title":"Functions","text":"Name Description FilterInstance Constructs a new @c FilterInstance object. Initialize Initializes the filter instance with the provided number of * parameters. AdvanceFrame Updates the filter instance state for the provided delta time. Process Executes the filter instance. GetParameter Gets the current value of the parameter at the given index. SetParameter Sets the value of the parameter at the given index. ProcessChannel Executes the filter instance on a single channel of the given buffer. ProcessSample Executes the filter instance on a single sample of the given buffer."},{"location":"api/SparkyStudios/FilterInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/FilterInstance/#advanceframe","title":"AdvanceFrame","text":"<p>virtual void AdvanceFrame(AmTime deltaTime)</p> <p>Updates the filter instance state for the provided delta time.</p> Parameter <code>deltaTime</code> The time in milliseconds since the last frame."},{"location":"api/SparkyStudios/FilterInstance/#filterinstance_1","title":"FilterInstance","text":"<p>explicit FilterInstance(Filter* parent)</p> <p>Constructs a new @c FilterInstance object.</p> Parameter <code>parent</code> The parent <code>Filter</code> object that created this instance."},{"location":"api/SparkyStudios/FilterInstance/#getparameter","title":"GetParameter","text":"<p>virtual AmReal32 GetParameter(AmUInt32 parameterIndex)</p> <p>Gets the current value of the parameter at the given index.</p> Parameter <code>parameterIndex</code> The index of the parameter to retrieve. Return The current value of the parameter."},{"location":"api/SparkyStudios/FilterInstance/#initialize","title":"Initialize","text":"<p>AmResult Initialize(AmUInt32 paramCount)</p> <p>Initializes the filter instance with the provided number of          * parameters.</p> Parameter <code>paramCount</code> The number of parameters the filter will need."},{"location":"api/SparkyStudios/FilterInstance/#process","title":"Process","text":"<p>virtual void Process(const AudioBuffer&amp; in, AudioBuffer&amp; out, AmUInt64 frames, AmUInt32 sampleRate)</p> <p>Executes the filter instance.</p> Parameter <code>in</code> The input buffer on which the filter should be applied. Parameter <code>out</code> The output buffer where the filtered output will be stored. Parameter <code>frames</code> The number of frames to process. Parameter <code>sampleRate</code> The current sample rate of the <code>buffer.</code>"},{"location":"api/SparkyStudios/FilterInstance/#processchannel","title":"ProcessChannel","text":"<p>virtual void ProcessChannel(const AudioBuffer&amp; in, AudioBuffer&amp; out, AmUInt16 channel, AmUInt64 frames, AmUInt32 sampleRate)</p> <p>Executes the filter instance on a single channel of the given buffer.</p> Parameter <code>in</code> The input buffer on which the filter should be applied. Parameter <code>out</code> The output buffer where the filtered output will be stored. Parameter <code>channel</code> The index of the channel to process. Parameter <code>frames</code> The number of frames to process. Parameter <code>sampleRate</code> The current sample rate of the <code>buffer.</code>"},{"location":"api/SparkyStudios/FilterInstance/#processsample","title":"ProcessSample","text":"<p>virtual AmAudioSample ProcessSample(AmAudioSample sample, AmUInt16 channel, AmUInt32 sampleRate)</p> <p>Executes the filter instance on a single sample of the given buffer.</p> Parameter <code>sample</code> The audio sample to process. Parameter <code>channel</code> The index of the channel to process. Parameter <code>sampleRate</code> The current sample rate of the <code>buffer.</code>"},{"location":"api/SparkyStudios/FilterInstance/#setparameter","title":"SetParameter","text":"<p>virtual void SetParameter(AmUInt32 parameterIndex, AmReal32 value)</p> <p>Sets the value of the parameter at the given index.</p> Parameter <code>parameterIndex</code> The index of the parameter to retrieve. Parameter <code>value</code> The value to set to the parameter."},{"location":"api/SparkyStudios/InputNodeInstance/","title":"InputNodeInstance","text":"<p>class  InputNodeInstance final : public NodeInstance , public ProviderNodeInstance</p> <p>Class used to marks the input of the pipeline.</p> <p>This node is automatically added to the pipeline when created. And thus should not be manually added to the pipeline asset.</p>"},{"location":"api/SparkyStudios/InputNodeInstance/#functions","title":"Functions","text":"Name Description InputNodeInstance InputNodeInstance constructor. ~InputNodeInstance InputNodeInstance destructor. SetInput Set the input of the pipeline. Provide @copydoc ProviderNodeInstance::Provide() Reset @copydoc NodeInstance::Reset()"},{"location":"api/SparkyStudios/InputNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/InputNodeInstance/#inputnodeinstance_1","title":"InputNodeInstance","text":"<p>InputNodeInstance()</p> <p>InputNodeInstance constructor.</p>"},{"location":"api/SparkyStudios/InputNodeInstance/#provide","title":"Provide","text":"<p>const AudioBuffer* Provide() override</p> <p>@copydoc ProviderNodeInstance::Provide()</p>"},{"location":"api/SparkyStudios/InputNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@copydoc NodeInstance::Reset()</p>"},{"location":"api/SparkyStudios/InputNodeInstance/#setinput","title":"SetInput","text":"<p>void SetInput(AudioBuffer* buffer)</p> <p>Set the input of the pipeline.</p> Parameter <code>buffer</code> The buffer to set as the input."},{"location":"api/SparkyStudios/InputNodeInstance/#inputnodeinstance_2","title":"~InputNodeInstance","text":"<p>~InputNodeInstance() override = default</p> <p>InputNodeInstance destructor.</p>"},{"location":"api/SparkyStudios/Listener/","title":"Listener","text":"<p>class  Listener</p> <p>An object whose distance from sounds determines their gain.</p> <p>The Listener class is a lightweight reference to a ListenerInternalState which is managed by the Engine. Multiple Listener objects may point to the same underlying data.</p>"},{"location":"api/SparkyStudios/Listener/#functions","title":"Functions","text":"Name Description Listener Construct an uninitialized Listener. Clear Deinitialize this Listener. Valid Checks whether this Listener has been initialized. GetId Gets the ID of this Listener in game. GetVelocity Gets the velocity of the Listener. GetLocation Returns the location of this Listener. SetLocation Set the location of this Listener. GetDirection Get the direction vector of the Listener. GetUp Get the up vector of the Listener. SetOrientation Set the location, direction and up vector of this Listener. GetOrientation Get the orientation of the Listener. SetDirectivity Sets the directivity and sharpness of Listener. This affects how sounds are perceived * by the Listener. GetDirectivity Gets the directivity of sounds played by this Entity. GetDirectivitySharpness Gets the directivity sharpness of sounds played by this Entity. GetInverseMatrix Gets the inverse matrix of the Listener. Update Update the state of this Listener. GetState Returns the internal state of this Listener."},{"location":"api/SparkyStudios/Listener/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Listener/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Deinitialize this Listener.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it. To destroy the Listener, use <code>Engine::RemoveListener();</code>.</p>"},{"location":"api/SparkyStudios/Listener/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Get the direction vector of the Listener.</p> Return The direction vector."},{"location":"api/SparkyStudios/Listener/#getdirectivity","title":"GetDirectivity","text":"<p>[[nodiscard]] AmReal32 GetDirectivity() const</p> <p>Gets the directivity of sounds played by this Entity.</p> Return The directivity of sound sources."},{"location":"api/SparkyStudios/Listener/#getdirectivitysharpness","title":"GetDirectivitySharpness","text":"<p>[[nodiscard]] AmReal32 GetDirectivitySharpness() const</p> <p>Gets the directivity sharpness of sounds played by this Entity.</p> Return The directivity sharpness of sounds played by this Entity."},{"location":"api/SparkyStudios/Listener/#getid","title":"GetId","text":"<p>[[nodiscard]] AmListenerID GetId() const</p> <p>Gets the ID of this Listener in game.</p> Return The game Listener ID."},{"location":"api/SparkyStudios/Listener/#getinversematrix","title":"GetInverseMatrix","text":"<p>[[nodiscard]] const AmMat4&amp; GetInverseMatrix() const</p> <p>Gets the inverse matrix of the Listener.</p> <p>You can use this matrix to transform 3D global space into Listener space.</p>"},{"location":"api/SparkyStudios/Listener/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Returns the location of this Listener.</p> Return AmVec3 The location of this Listener."},{"location":"api/SparkyStudios/Listener/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] Orientation GetOrientation() const</p> <p>Get the orientation of the Listener.</p> Return The orientation of this Listener."},{"location":"api/SparkyStudios/Listener/#getstate","title":"GetState","text":"<p>[[nodiscard]] ListenerInternalState* GetState() const</p> <p>Returns the internal state of this Listener.</p> Return ListenerInternalState*"},{"location":"api/SparkyStudios/Listener/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Get the up vector of the Listener.</p> Return The up vector."},{"location":"api/SparkyStudios/Listener/#getvelocity","title":"GetVelocity","text":"<p>[[nodiscard]] const AmVec3&amp; GetVelocity() const</p> <p>Gets the velocity of the Listener.</p> Return The Listener's velocity."},{"location":"api/SparkyStudios/Listener/#listener_1","title":"Listener","text":"<p>Listener()</p> <p>Construct an uninitialized Listener.</p> <p>An uninitialized Listener cannot have its location set or queried. To initialize the Listener, use <code>Engine::AddListener();</code>.</p>"},{"location":"api/SparkyStudios/Listener/#setdirectivity","title":"SetDirectivity","text":"<p>void SetDirectivity(AmReal32 directivity, AmReal32 sharpness) const</p> <p>Sets the directivity and sharpness of Listener. This affects how sounds are perceived          * by the Listener.</p> Parameter <code>directivity</code> The directivity of the listener, in the range [0, 1]. Parameter <code>sharpness</code> The directivity sharpness of the listener, in the range [1, +INF]. Increasing this value increases the directivity towards the front of the listener."},{"location":"api/SparkyStudios/Listener/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Set the location of this Listener.</p> Parameter <code>location</code> The new location of this Listener."},{"location":"api/SparkyStudios/Listener/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Set the location, direction and up vector of this Listener.</p> Parameter <code>orientation</code> The new orientation of this Listener."},{"location":"api/SparkyStudios/Listener/#update","title":"Update","text":"<p>void Update() const</p> <p>Update the state of this Listener.</p> <p>This method is called automatically by the Engine on each frames.</p>"},{"location":"api/SparkyStudios/Listener/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this Listener has been initialized.</p> Return bool true if this Listener has been initialized."},{"location":"api/SparkyStudios/LogMessageLevel/","title":"LogMessageLevel","text":"<p>enum LogMessageLevel : AmUInt8</p> <p>The level of a log message.</p> <p>This is used to determine the importance of a log message.</p>"},{"location":"api/SparkyStudios/Logger/","title":"Logger","text":"<p>class  Logger</p> <p>The logger class.</p> <p>Base class used to perform logging. Implementations of this class have the ability to display or store log messages wherever they are needed.</p>"},{"location":"api/SparkyStudios/Logger/#functions","title":"Functions","text":"Name Description SetLogger Sets the logger instance to use when calling @c amLogger GetLogger Gets the logger instance to use when calling @c amLogger Debug Logs a debug message. Info Logs an informational message. Warning Logs a warning message. Error Logs an error message. Critical Logs a critical message. Log Logs a message with the given level."},{"location":"api/SparkyStudios/Logger/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Logger/#critical","title":"Critical","text":"<p>void Critical(const char* file, int line, const AmString&amp; message)</p> <p>Logs a critical message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/SparkyStudios/Logger/#debug","title":"Debug","text":"<p>void Debug(const char* file, int line, const AmString&amp; message)</p> <p>Logs a debug message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/SparkyStudios/Logger/#error","title":"Error","text":"<p>void Error(const char* file, int line, const AmString&amp; message)</p> <p>Logs an error message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/SparkyStudios/Logger/#getlogger","title":"GetLogger","text":"<p>static Logger* GetLogger()</p> <p>Gets the logger instance to use when calling @c amLogger</p> Return The logger instance."},{"location":"api/SparkyStudios/Logger/#info","title":"Info","text":"<p>void Info(const char* file, int line, const AmString&amp; message)</p> <p>Logs an informational message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/SparkyStudios/Logger/#log","title":"Log","text":"<p>virtual void Log(LogMessageLevel level, const char* file, int line, const AmString&amp; message) = 0</p> <p>Logs a message with the given level.</p> Parameter <code>level</code> The level of the log message. Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/SparkyStudios/Logger/#setlogger","title":"SetLogger","text":"<p>static void SetLogger(Logger* loggerInstance)</p> <p>Sets the logger instance to use when calling @c amLogger</p> Parameter <code>loggerInstance</code> The logger instance."},{"location":"api/SparkyStudios/Logger/#warning","title":"Warning","text":"<p>void Warning(const char* file, int line, const AmString&amp; message)</p> <p>Logs a warning message.</p> Parameter <code>file</code> The file where the message was logged. Parameter <code>line</code> The line where the message was logged. Parameter <code>message</code> The message to log."},{"location":"api/SparkyStudios/MemoryFile/","title":"MemoryFile","text":"<p>class  MemoryFile : public File</p> <p>A File implementation that reads and writes a memory buffer.</p>"},{"location":"api/SparkyStudios/MemoryFile/#functions","title":"Functions","text":"Name Description MemoryFile Creates a new MemoryFile instance. MemoryFile Creates a new MemoryFile instance from a memory buffer. ~MemoryFile Destroys the instance and release the memory buffer if owned. GetPath @copydoc File::GetPath Eof @copydoc File::Eof Read @copydoc File::Read Write @copydoc File::Write Length @copydoc File::Length Seek @copydoc File::Seek Position @copydoc File::Position GetPtr @copydoc File::GetPtr IsValid @copydoc File::IsValid Open Opens a new memory buffer with the specified size. OpenMem Opens a memory buffer. OpenToMem Opens a memory buffer from a file content. OpenFileToMem Copies data from a file instance to a memory buffer. The file content is entirely copied. Close Closes the memory buffer and releases associated resources."},{"location":"api/SparkyStudios/MemoryFile/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/MemoryFile/#close","title":"Close","text":"<p>void Close()</p> <p>Closes the memory buffer and releases associated resources.</p>"},{"location":"api/SparkyStudios/MemoryFile/#eof","title":"Eof","text":"<p>bool Eof() override</p> <p>@copydoc File::Eof</p>"},{"location":"api/SparkyStudios/MemoryFile/#getpath","title":"GetPath","text":"<p>[[nodiscard]] AmOsString GetPath() const override</p> <p>@copydoc File::GetPath</p>"},{"location":"api/SparkyStudios/MemoryFile/#getptr","title":"GetPtr","text":"<p>AmVoidPtr GetPtr() override</p> <p>@copydoc File::GetPtr</p>"},{"location":"api/SparkyStudios/MemoryFile/#isvalid","title":"IsValid","text":"<p>[[nodiscard]] bool IsValid() const override</p> <p>@copydoc File::IsValid</p>"},{"location":"api/SparkyStudios/MemoryFile/#length","title":"Length","text":"<p>AmSize Length() override</p> <p>@copydoc File::Length</p>"},{"location":"api/SparkyStudios/MemoryFile/#memoryfile_1","title":"MemoryFile","text":"<p>MemoryFile()</p> <p>Creates a new MemoryFile instance.</p> <p>MemoryFile(AmUInt8Buffer buffer, AmSize size, bool copy = false, bool takeOwnership = true)</p> <p>Creates a new MemoryFile instance from a memory buffer.</p> Parameter <code>buffer</code> The memory buffer to manage in this instance. Parameter <code>size</code> The size of the memory buffer. Parameter <code>copy</code> If true, the memory buffer will be copied. Parameter <code>takeOwnership</code> If true, the memory buffer will be owned by this instance, and released when this instance is destroyed."},{"location":"api/SparkyStudios/MemoryFile/#open","title":"Open","text":"<p>AmResult Open(AmSize size)</p> <p>Opens a new memory buffer with the specified size.</p> Parameter <code>size</code> The size of the buffer. Return The result of the operation."},{"location":"api/SparkyStudios/MemoryFile/#openfiletomem","title":"OpenFileToMem","text":"<p>AmResult OpenFileToMem(File* file)</p> <p>Copies data from a file instance to a memory buffer. The file content is entirely copied.</p> Parameter <code>file</code> The file isntance to copy data from. Return The result of the operation."},{"location":"api/SparkyStudios/MemoryFile/#openmem","title":"OpenMem","text":"<p>AmResult OpenMem(AmConstUInt8Buffer buffer, AmSize size, bool copy = false, bool takeOwnership = true)</p> <p>Opens a memory buffer.</p> Parameter <code>buffer</code> The memory buffer to open. Parameter <code>size</code> The size of the memory buffer. Parameter <code>copy</code> If true, the memory buffer will be copied. Parameter <code>takeOwnership</code> If true, the memory buffer will be owned by this instance, and released when this instance is destroyed. Return The result of the operation."},{"location":"api/SparkyStudios/MemoryFile/#opentomem","title":"OpenToMem","text":"<p>AmResult OpenToMem(const std::filesystem::path&amp; fileName)</p> <p>Opens a memory buffer from a file content.</p> Parameter <code>fileName</code> The path to the file to open. Return The result of the operation."},{"location":"api/SparkyStudios/MemoryFile/#position","title":"Position","text":"<p>AmSize Position() override</p> <p>@copydoc File::Position</p>"},{"location":"api/SparkyStudios/MemoryFile/#read","title":"Read","text":"<p>AmSize Read(AmUInt8Buffer dst, AmSize bytes) override</p> <p>@copydoc File::Read</p>"},{"location":"api/SparkyStudios/MemoryFile/#seek","title":"Seek","text":"<p>void Seek(AmInt64 offset, FileSeekOrigin origin) override</p> <p>@copydoc File::Seek</p>"},{"location":"api/SparkyStudios/MemoryFile/#write","title":"Write","text":"<p>AmSize Write(AmConstUInt8Buffer src, AmSize bytes) override</p> <p>@copydoc File::Write</p>"},{"location":"api/SparkyStudios/MemoryFile/#memoryfile_2","title":"~MemoryFile","text":"<p>~MemoryFile() override</p> <p>Destroys the instance and release the memory buffer if owned.</p>"},{"location":"api/SparkyStudios/MemoryManager/","title":"MemoryManager","text":"<p>class  MemoryManager</p> <p>Manages memory allocations inside the engine.</p>"},{"location":"api/SparkyStudios/MemoryManager/#functions","title":"Functions","text":"Name Description Initialize Initializes the memory manager. Deinitialize Unloads the memory manager. IsInitialized Checks whether the memory manager is initialized. GetInstance Gets the actual instance of the memory manager. Malloc Allocates a block of memory with the given size in the given pool. Malign Allocates a block of memory with the given size and the given alignment, * in the given pool. Realloc Updates the size of a previously allocated memory. Realign Updates the size of a previously allocated aligned memory. Free Releases an allocated memory block. TotalReservedMemorySize Gets the total allocated size. SizeOf Gets the size of the given memory block. GetMemoryPoolName Gets the name of the given memory pool. GetStats Returns the memory allocation statistics for the given pool. InspectMemoryLeaks Inspect the memory manager for memory leaks."},{"location":"api/SparkyStudios/MemoryManager/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/MemoryManager/#deinitialize","title":"Deinitialize","text":"<p>static void Deinitialize()</p> <p>Unloads the memory manager.</p>"},{"location":"api/SparkyStudios/MemoryManager/#free","title":"Free","text":"<p>void Free(MemoryPoolKind pool, AmVoidPtr address)</p> <p>Releases an allocated memory block.</p> Parameter <code>pool</code> The memory pool to release from. Parameter <code>address</code> The address of the memory to release."},{"location":"api/SparkyStudios/MemoryManager/#getinstance","title":"GetInstance","text":"<p>static MemoryManager* GetInstance()</p> <p>Gets the actual instance of the memory manager.</p>"},{"location":"api/SparkyStudios/MemoryManager/#getmemorypoolname","title":"GetMemoryPoolName","text":"<p>static AmString GetMemoryPoolName(MemoryPoolKind pool)</p> <p>Gets the name of the given memory pool.</p> Parameter <code>pool</code> The memory pool to get the name for. Return The name of the memory pool."},{"location":"api/SparkyStudios/MemoryManager/#getstats","title":"GetStats","text":"<p>[[nodiscard]] const MemoryPoolStats&amp; GetStats(MemoryPoolKind pool) const</p> <p>Returns the memory allocation statistics for the given pool.</p> Parameter <code>pool</code> The pool to get the statistics for."},{"location":"api/SparkyStudios/MemoryManager/#initialize","title":"Initialize","text":"<p>static void Initialize(const MemoryManagerConfig&amp; config)</p> <p>Initializes the memory manager.</p> <p>@remarks This should be done prior to any call of GetInstance().</p>"},{"location":"api/SparkyStudios/MemoryManager/#inspectmemoryleaks","title":"InspectMemoryLeaks","text":"<p>[[nodiscard]] AmString InspectMemoryLeaks() const</p> <p>Inspect the memory manager for memory leaks.</p> <p>Note</p> <p>This function is most useful after the engine has been deinitialized. Calling it before may just report a lot of false positives (allocated memories still in use).</p> Return A string containing a report for the detected memory leaks."},{"location":"api/SparkyStudios/MemoryManager/#isinitialized","title":"IsInitialized","text":"<p>[[maybe_unused]] static bool IsInitialized()</p> <p>Checks whether the memory manager is initialized.</p> Return Whether the memory manager is initialized."},{"location":"api/SparkyStudios/MemoryManager/#malign","title":"Malign","text":"<p>[[nodiscard]] AmVoidPtr Malign(MemoryPoolKind pool, AmSize size, AmUInt32 alignment, const char* file, AmUInt32 line)</p> <p>Allocates a block of memory with the given size and the given alignment,          * in the given pool.</p> Parameter <code>pool</code> The memory pool to allocate from. Parameter <code>size</code> The size of the block to allocate. Parameter <code>alignment</code> The alignment of the block to allocate. Parameter <code>file</code> The file in which the allocation was made. Parameter <code>line</code> The line in which the allocation was made. Return A pointer to the allocated block."},{"location":"api/SparkyStudios/MemoryManager/#malloc","title":"Malloc","text":"<p>[[nodiscard]] AmVoidPtr Malloc(MemoryPoolKind pool, AmSize size, const char* file, AmUInt32 line)</p> <p>Allocates a block of memory with the given size in the given pool.</p> Parameter <code>pool</code> The memory pool to allocate from. Parameter <code>size</code> The size of the block to allocate. Parameter <code>file</code> The file in which the allocation was made. Parameter <code>line</code> The line in which the allocation was made. Return A pointer to the allocated block."},{"location":"api/SparkyStudios/MemoryManager/#realign","title":"Realign","text":"<p>[[nodiscard]] AmVoidPtr Realign( MemoryPoolKind pool, AmVoidPtr address, AmSize size, AmUInt32 alignment, const char* file, AmUInt32 line)</p> <p>Updates the size of a previously allocated aligned memory.</p> Parameter <code>pool</code> The memory pool to update. Parameter <code>address</code> The address of the aligned memory to update. Parameter <code>size</code> The new size of the aligned memory. Parameter <code>alignment</code> The new alignment of the aligned memory. Parameter <code>file</code> The file in which the allocation was made. Parameter <code>line</code> The line in which the allocation was made. Return A pointer to the allocated block. Maybe equal to address if the original pointer had enough memory."},{"location":"api/SparkyStudios/MemoryManager/#realloc","title":"Realloc","text":"<p>[[nodiscard]] AmVoidPtr Realloc(MemoryPoolKind pool, AmVoidPtr address, AmSize size, const char* file, AmUInt32 line)</p> <p>Updates the size of a previously allocated memory.</p> Parameter <code>pool</code> The memory pool to update. Parameter <code>address</code> The address of the memory to update. Parameter <code>size</code> The new size of the memory. Parameter <code>file</code> The file in which the allocation was made. Parameter <code>line</code> The line in which the allocation was made. Return A pointer to the allocated block. Maybe equal to address if the original pointer had enough memory."},{"location":"api/SparkyStudios/MemoryManager/#sizeof","title":"SizeOf","text":"<p>[[nodiscard]] AmSize SizeOf(MemoryPoolKind pool, AmConstVoidPtr address) const</p> <p>Gets the size of the given memory block.</p> Parameter <code>pool</code> The memory pool to get the size from. Parameter <code>address</code> The address of the memory block. Return The size of the given memory block."},{"location":"api/SparkyStudios/MemoryManager/#totalreservedmemorysize","title":"TotalReservedMemorySize","text":"<p>[[nodiscard]] AmSize TotalReservedMemorySize() const</p> <p>Gets the total allocated size.</p> Return The total currently allocated size."},{"location":"api/SparkyStudios/MemoryManagerConfig/","title":"MemoryManagerConfig","text":"<p>struct  MemoryManagerConfig</p> <p>Configures the memory management system.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#variables","title":"Variables","text":"Name Description malloc Memory allocation callback. realloc Memory reallocation callback. alignedMalloc Aligned memory allocation callback. alignedRealloc Aligned memory reallocation callback. free Memory release callback. totalReservedMemorySize Callback to get the total size of the memory allocated across memory pools sizeOf Callback to get the total size of memory for a specific pool."},{"location":"api/SparkyStudios/MemoryManagerConfig/#functions","title":"Functions","text":"Name Description MemoryManagerConfig Creates a new configuration set for the memory manager."},{"location":"api/SparkyStudios/MemoryManagerConfig/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/MemoryManagerConfig/#alignedmalloc","title":"alignedMalloc","text":"<p>AmMemoryMallocAlignedCallback alignedMalloc</p> <p>Aligned memory allocation callback.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#alignedrealloc","title":"alignedRealloc","text":"<p>AmMemoryReallocAlignedCallback alignedRealloc</p> <p>Aligned memory reallocation callback.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#free","title":"free","text":"<p>AmMemoryFreeCallback free</p> <p>Memory release callback.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#malloc","title":"malloc","text":"<p>AmMemoryMallocCallback malloc</p> <p>Memory allocation callback.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#realloc","title":"realloc","text":"<p>AmMemoryReallocCallback realloc</p> <p>Memory reallocation callback.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#sizeof","title":"sizeOf","text":"<p>AmMemorySizeOfCallback sizeOf</p> <p>Callback to get the total size of memory for a specific pool.</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#totalreservedmemorysize","title":"totalReservedMemorySize","text":"<p>AmMemoryTotalReservedMemorySizeCallback totalReservedMemorySize</p> <p>Callback to get the total size of the memory allocated across memory pools</p>"},{"location":"api/SparkyStudios/MemoryManagerConfig/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/MemoryManagerConfig/#memorymanagerconfig_1","title":"MemoryManagerConfig","text":"<p>MemoryManagerConfig()</p> <p>Creates a new configuration set for the memory manager.</p>"},{"location":"api/SparkyStudios/MemoryPoolKind/","title":"MemoryPoolKind","text":"<p>enum class MemoryPoolKind : AmUInt8</p> <p>Available memory pools.</p> Engine Amplitude Engine allocations. Amplimix Amplimix allocations. SoundData Sound data and streams. Filtering Filters related allocations. Codec Encoding/Decoding allocations. IO I/O and filesystem related allocations. Default Default allocations pool. Use this when the allocated memory pool is not available.          * @note amnew use this pool to allocate memory from the memory manager. COUNT The total number of memory pools."},{"location":"api/SparkyStudios/MemoryPoolStats/","title":"MemoryPoolStats","text":"<p>struct  MemoryPoolStats</p> <p>Collects the statistics about the memory allocations      * for a specific pool</p>"},{"location":"api/SparkyStudios/MemoryPoolStats/#variables","title":"Variables","text":"Name Description pool The pool for which this statistics is for. maxMemoryUsed The maximum total memory used by this pool. allocCount The total count of allocations made on this pool. freeCount The total count of frees made on this pool."},{"location":"api/SparkyStudios/MemoryPoolStats/#functions","title":"Functions","text":"Name Description MemoryPoolStats Default constructor. MemoryPoolStats Creates a new MemoryPoolStats object."},{"location":"api/SparkyStudios/MemoryPoolStats/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/MemoryPoolStats/#alloccount","title":"allocCount","text":"<p>std::atomic&lt;AmUInt64&gt; allocCount</p> <p>The total count of allocations made on this pool.</p>"},{"location":"api/SparkyStudios/MemoryPoolStats/#freecount","title":"freeCount","text":"<p>std::atomic&lt;AmUInt64&gt; freeCount</p> <p>The total count of frees made on this pool.</p>"},{"location":"api/SparkyStudios/MemoryPoolStats/#maxmemoryused","title":"maxMemoryUsed","text":"<p>std::atomic&lt;AmSize&gt; maxMemoryUsed</p> <p>The maximum total memory used by this pool.</p>"},{"location":"api/SparkyStudios/MemoryPoolStats/#pool","title":"pool","text":"<p>MemoryPoolKind pool</p> <p>The pool for which this statistics is for.</p>"},{"location":"api/SparkyStudios/MemoryPoolStats/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/MemoryPoolStats/#memorypoolstats_1","title":"MemoryPoolStats","text":"<p>MemoryPoolStats()</p> <p>Default constructor.</p> <p>explicit MemoryPoolStats(MemoryPoolKind pool)</p> <p>Creates a new MemoryPoolStats object.</p> Parameter <code>pool</code> The pool to get the statistics for."},{"location":"api/SparkyStudios/MixerNodeInstance/","title":"MixerNodeInstance","text":"<p>class  MixerNodeInstance : public NodeInstance , public ConsumerNodeInstance , public ProviderNodeInstance</p> <p>Base class for Amplimix pipeline nodes that can mix      * audio data from multiple input buffers, and outputs the result      * of the mix.</p>"},{"location":"api/SparkyStudios/MixerNodeInstance/#functions","title":"Functions","text":"Name Description MixerNodeInstance MixerNodeInstance constructor. ~MixerNodeInstance MixerNodeInstance destructor. Consume @copydoc ConsumerNodeInstance::Consume() Connect @copydoc ConsumerNodeInstance::Connect() !!! note This method appends the given provider to the list of input provider nodes. If the provider node already exists in the list, it will not be added again. Connect Set the input provider nodes for this mixer node. Provide @copydoc ProviderNodeInstance::Provide() Reset @copydoc NodeInstance::Reset()"},{"location":"api/SparkyStudios/MixerNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/MixerNodeInstance/#connect","title":"Connect","text":"<p>void Connect(AmObjectID provider) final</p> <p>@copydoc ConsumerNodeInstance::Connect()</p> <p>Note</p> <p>This method appends the given provider to the list of input provider nodes. If the provider node already exists in the list, it will not be added again.</p> <p>void Connect(const std::vector&lt;AmObjectID&gt;&amp; providers)</p> <p>Set the input provider nodes for this mixer node.</p> Parameter <code>providers</code> The provider nodes for this mixer node. <p>Note</p> <p>This method clears the existing input provider nodes, and replaces them with the provided ones.</p>"},{"location":"api/SparkyStudios/MixerNodeInstance/#consume","title":"Consume","text":"<p>void Consume() final</p> <p>@copydoc ConsumerNodeInstance::Consume()</p>"},{"location":"api/SparkyStudios/MixerNodeInstance/#mixernodeinstance_1","title":"MixerNodeInstance","text":"<p>MixerNodeInstance()</p> <p>MixerNodeInstance constructor.</p>"},{"location":"api/SparkyStudios/MixerNodeInstance/#provide","title":"Provide","text":"<p>const AudioBuffer* Provide() final</p> <p>@copydoc ProviderNodeInstance::Provide()</p>"},{"location":"api/SparkyStudios/MixerNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@copydoc NodeInstance::Reset()</p>"},{"location":"api/SparkyStudios/MixerNodeInstance/#mixernodeinstance_2","title":"~MixerNodeInstance","text":"<p>~MixerNodeInstance() override = default</p> <p>MixerNodeInstance destructor.</p>"},{"location":"api/SparkyStudios/Node/","title":"Node","text":"<p>class  Node</p> <p>Base class for Amplimix pipeline nodes.</p> <p>This class presents the basic structure to create Amplimix pipeline nodes. Each <code>Node</code> must be derived from this class and implement the <code>Node::CreateInstance()</code> and <code>Node::DestroyInstance()</code> methods.</p>"},{"location":"api/SparkyStudios/Node/#variables","title":"Variables","text":"Name Description m_name The name of this node."},{"location":"api/SparkyStudios/Node/#functions","title":"Functions","text":"Name Description Node Node constructor. ~Node Node destructor. CreateInstance Creates a new instance of the node. DestroyInstance Destroys the specified instance of the node. GetName Returns the name of the node. Register Registers a new node. Unregister Unregisters a node. Construct Creates a new instance of the the node with the given name * and returns its pointer. The returned pointer should be deleted using Node::Destruct(). Destruct Destroys the given node instance. LockRegistry Locks the nodes registry. UnlockRegistry Unlocks the nodes registry. Find Look up a node by name."},{"location":"api/SparkyStudios/Node/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/Node/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this node.</p>"},{"location":"api/SparkyStudios/Node/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Node/#construct","title":"Construct","text":"<p>static NodeInstance* Construct(const AmString&amp; name)</p> <p>Creates a new instance of the the node with the given name          * and returns its pointer. The returned pointer should be deleted using Node::Destruct().</p> Parameter <code>name</code> The name of the node. Return The node with the given name, or NULL if none."},{"location":"api/SparkyStudios/Node/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance() const</p> <p>Creates a new instance of the node.</p> Parameter <code>id</code> Unique identifier for the new instance. Parameter <code>layer</code> The Amplimix layer associated with the new instance. Parameter <code>pipeline</code> The pipeline associated with the new instance. Return A new instance of the node."},{"location":"api/SparkyStudios/Node/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(NodeInstance* instance) const = 0</p> <p>Destroys the specified instance of the node.</p> Parameter <code>instance</code> Pointer to the instance to be destroyed."},{"location":"api/SparkyStudios/Node/#destruct","title":"Destruct","text":"<p>static void Destruct(const AmString&amp; name, NodeInstance* instance)</p> <p>Destroys the given node instance.</p> Parameter <code>name</code> The name of the node. Parameter <code>instance</code> The node instance to destroy."},{"location":"api/SparkyStudios/Node/#find","title":"Find","text":"<p>static Node* Find(const AmString&amp; name)</p> <p>Look up a node by name.</p> Return The node with the given name, or NULL if none."},{"location":"api/SparkyStudios/Node/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Returns the name of the node.</p>"},{"location":"api/SparkyStudios/Node/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the nodes registry.</p> <p>This function is mainly used for internal purposes. Its called before the Engine initialization, to discard the registration of new nodes after the engine is fully loaded.</p>"},{"location":"api/SparkyStudios/Node/#node_1","title":"Node","text":"<p>Node(AmString name)</p> <p>Node constructor.</p> Parameter <code>name</code> Name of the node. Should be unique within the pipeline."},{"location":"api/SparkyStudios/Node/#register","title":"Register","text":"<p>static void Register(Node* node)</p> <p>Registers a new node.</p> Parameter <code>node</code> The node to add in the registry."},{"location":"api/SparkyStudios/Node/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the nodes registry.</p> <p>This function is mainly used for internal purposes. Its called after the Engine deinitialization, to allow the registration of new divers after the engine is fully unloaded.</p>"},{"location":"api/SparkyStudios/Node/#unregister","title":"Unregister","text":"<p>static void Unregister(const Node* node)</p> <p>Unregisters a node.</p> Parameter <code>node</code> The node to remove from the registry."},{"location":"api/SparkyStudios/Node/#node_2","title":"~Node","text":"<p>virtual ~Node()</p> <p>Node destructor.</p>"},{"location":"api/SparkyStudios/NodeInstance/","title":"NodeInstance","text":"<p>class  NodeInstance</p> <p>An instance of an Amplimix pipeline node.</p> <p>This class represents the actual node executed within the Amplimix pipeline. Each node instance has a unique ID assigned to it, that matches the one provided in the pipeline asset.</p>"},{"location":"api/SparkyStudios/NodeInstance/#variables","title":"Variables","text":"Name Description m_id The unique identifier for the node instance in the pipeline. m_layer The Amplimix layer this node instance is currently associated with. m_pipeline The pipeline this node instance belongs to."},{"location":"api/SparkyStudios/NodeInstance/#functions","title":"Functions","text":"Name Description Initialize Initializes the node instance. ~NodeInstance NodeInstance destructor. GetId Returns the unique identifier for the node instance. GetLayer Gets the Amplimix layer this node instance is currently associated with. Reset Resets the node instance's internal state."},{"location":"api/SparkyStudios/NodeInstance/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/NodeInstance/#m_id","title":"m_id","text":"<p>AmObjectID m_id</p> <p>The unique identifier for the node instance in the pipeline.</p>"},{"location":"api/SparkyStudios/NodeInstance/#m_layer","title":"m_layer","text":"<p>const AmplimixLayer* m_layer</p> <p>The Amplimix layer this node instance is currently associated with.</p>"},{"location":"api/SparkyStudios/NodeInstance/#m_pipeline","title":"m_pipeline","text":"<p>const PipelineInstance* m_pipeline</p> <p>The pipeline this node instance belongs to.</p>"},{"location":"api/SparkyStudios/NodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/NodeInstance/#getid","title":"GetId","text":"<p>[[nodiscard]] AmObjectID GetId() const</p> <p>Returns the unique identifier for the node instance.</p>"},{"location":"api/SparkyStudios/NodeInstance/#getlayer","title":"GetLayer","text":"<p>[[nodiscard]] const AmplimixLayer* GetLayer() const</p> <p>Gets the Amplimix layer this node instance is currently associated with.</p>"},{"location":"api/SparkyStudios/NodeInstance/#initialize","title":"Initialize","text":"<p>virtual void Initialize(AmObjectID id, const AmplimixLayer* layer, const PipelineInstance* pipeline)</p> <p>Initializes the node instance.</p> Parameter <code>id</code> Unique identifier for the node instance. Parameter <code>layer</code> The Amplimix layer this node instance is currently associated with. Parameter <code>pipeline</code> The pipeline this node instance belongs to."},{"location":"api/SparkyStudios/NodeInstance/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the node instance's internal state.</p> <p>This function should be called automatically by Amplimix, each time the pipeline is about to be executed. Call it manually only if you know what you're doing.</p>"},{"location":"api/SparkyStudios/NodeInstance/#nodeinstance_1","title":"~NodeInstance","text":"<p>virtual ~NodeInstance() = default</p> <p>NodeInstance destructor.</p>"},{"location":"api/SparkyStudios/Orientation/","title":"Orientation","text":"<p>struct  Orientation</p> <p>Represents an orientation in 3D space.</p> <p>This class provides methods for converting between different coordinate systems and manipulating orientations. The orientation can be built from yaw, pitch, and roll angles, or from a forward and up vector. Once built, the orientation is stored in the ZYX representation (yaw, pitch, roll), in the ZYZ representation, in the quaternion representation, and in forward-up vectors representation.</p>"},{"location":"api/SparkyStudios/Orientation/#functions","title":"Functions","text":"Name Description Zero Gets a zero Orientation instance. Orientation Constructs an Orientation instance with the given yaw, pitch, and roll angles. Orientation Constructs an Orientation instance from a forward and up vector. Orientation Constructs an Orientation instance from a quaternion. GetYaw The angle of rotation around the Z-axis in radians following the ZYX convention. GetPitch The angle of rotation around the Y-axis in radians following the ZYX convention. GetRoll The angle of rotation around the X-axis in radians following the ZYX convention. GetForward The forward vector of the orientation. GetUp The up vector of the orientation. GetAlpha The angle of rotation around the Z-axis in radians following the ZYZ convention. GetBeta The angle of rotation around the Y-axis in radians following the ZYZ convention. GetGamma The angle of rotation around the new Z-axis in radians following the ZYZ convention. GetQuaternion The quaternion representation of the orientation. GetRotationMatrix Converts the orientation to a rotation matrix. GetLookAtMatrix Converts the orientation to a look-at matrix."},{"location":"api/SparkyStudios/Orientation/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Orientation/#getalpha","title":"GetAlpha","text":"<p>[[nodiscard]] inline AmReal32 GetAlpha() const</p> <p>The angle of rotation around the Z-axis in radians following the ZYZ convention.</p>"},{"location":"api/SparkyStudios/Orientation/#getbeta","title":"GetBeta","text":"<p>[[nodiscard]] inline AmReal32 GetBeta() const</p> <p>The angle of rotation around the Y-axis in radians following the ZYZ convention.</p>"},{"location":"api/SparkyStudios/Orientation/#getforward","title":"GetForward","text":"<p>[[nodiscard]] inline AmVec3 GetForward() const</p> <p>The forward vector of the orientation.</p>"},{"location":"api/SparkyStudios/Orientation/#getgamma","title":"GetGamma","text":"<p>[[nodiscard]] inline AmReal32 GetGamma() const</p> <p>The angle of rotation around the new Z-axis in radians following the ZYZ convention.</p>"},{"location":"api/SparkyStudios/Orientation/#getlookatmatrix","title":"GetLookAtMatrix","text":"<p>[[nodiscard]] AmMat4 GetLookAtMatrix(AmVec3 eye) const</p> <p>Converts the orientation to a look-at matrix.</p> Parameter <code>eye</code> The eye's location. Return A look-at matrix representing the current orientation, with the eye at the given location."},{"location":"api/SparkyStudios/Orientation/#getpitch","title":"GetPitch","text":"<p>[[nodiscard]] inline AmReal32 GetPitch() const</p> <p>The angle of rotation around the Y-axis in radians following the ZYX convention.</p>"},{"location":"api/SparkyStudios/Orientation/#getquaternion","title":"GetQuaternion","text":"<p>[[nodiscard]] inline AmQuat GetQuaternion() const</p> <p>The quaternion representation of the orientation.</p>"},{"location":"api/SparkyStudios/Orientation/#getroll","title":"GetRoll","text":"<p>[[nodiscard]] inline AmReal32 GetRoll() const</p> <p>The angle of rotation around the X-axis in radians following the ZYX convention.</p>"},{"location":"api/SparkyStudios/Orientation/#getrotationmatrix","title":"GetRotationMatrix","text":"<p>[[nodiscard]] AmMat4 GetRotationMatrix() const</p> <p>Converts the orientation to a rotation matrix.</p> Return A rotation matrix representing the current orientation."},{"location":"api/SparkyStudios/Orientation/#getup","title":"GetUp","text":"<p>[[nodiscard]] inline AmVec3 GetUp() const</p> <p>The up vector of the orientation.</p>"},{"location":"api/SparkyStudios/Orientation/#getyaw","title":"GetYaw","text":"<p>[[nodiscard]] inline AmReal32 GetYaw() const</p> <p>The angle of rotation around the Z-axis in radians following the ZYX convention.</p>"},{"location":"api/SparkyStudios/Orientation/#orientation_1","title":"Orientation","text":"<p>Orientation(AmReal32 yaw, AmReal32 pitch, AmReal32 roll)</p> <p>Constructs an Orientation instance with the given yaw, pitch, and roll angles.</p> Parameter <code>yaw</code> The angle of rotation around the X-axis in radians. Parameter <code>pitch</code> The angle of rotation around the Y-axis in radians. Parameter <code>roll</code> The angle of rotation around the Z-axis in radians. <p>Orientation(AmVec3 forward, AmVec3 up)</p> <p>Constructs an Orientation instance from a forward and up vector.</p> Parameter <code>forward</code> The forward vector of the orientation. Parameter <code>up</code> The up vector of the orientation. <p>Orientation(AmQuat quaternion)</p> <p>Constructs an Orientation instance from a quaternion.</p> Parameter <code>quaternion</code> The quaternion representing the orientation."},{"location":"api/SparkyStudios/Orientation/#zero","title":"Zero","text":"<p>static Orientation Zero()</p> <p>Gets a zero Orientation instance.</p> Return A zero Orientation instance. 0 for all angles."},{"location":"api/SparkyStudios/OutputNodeInstance/","title":"OutputNodeInstance","text":"<p>class  OutputNodeInstance final : public NodeInstance , public ConsumerNodeInstance</p> <p>Class used to marks the output of the pipeline.</p> <p>This node is automatically added to the pipeline when created. And thus should not be manually added to the pipeline asset.</p>"},{"location":"api/SparkyStudios/OutputNodeInstance/#functions","title":"Functions","text":"Name Description OutputNodeInstance OutputNodeInstance constructor. ~OutputNodeInstance OutputNodeInstance destructor. SetOutput Set the output of the pipeline. Consume @copydoc ConsumerNodeInstance::Consume() Connect @copydoc ConsumerNodeInstance::Connect() Reset @copydoc NodeInstance::Reset()"},{"location":"api/SparkyStudios/OutputNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/OutputNodeInstance/#connect","title":"Connect","text":"<p>void Connect(AmObjectID provider) override</p> <p>@copydoc ConsumerNodeInstance::Connect()</p>"},{"location":"api/SparkyStudios/OutputNodeInstance/#consume","title":"Consume","text":"<p>void Consume() override</p> <p>@copydoc ConsumerNodeInstance::Consume()</p>"},{"location":"api/SparkyStudios/OutputNodeInstance/#outputnodeinstance_1","title":"OutputNodeInstance","text":"<p>OutputNodeInstance()</p> <p>OutputNodeInstance constructor.</p>"},{"location":"api/SparkyStudios/OutputNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@copydoc NodeInstance::Reset()</p>"},{"location":"api/SparkyStudios/OutputNodeInstance/#setoutput","title":"SetOutput","text":"<p>void SetOutput(AudioBuffer* buffer)</p> <p>Set the output of the pipeline.</p> Parameter <code>buffer</code> The buffer to set as the output."},{"location":"api/SparkyStudios/OutputNodeInstance/#outputnodeinstance_2","title":"~OutputNodeInstance","text":"<p>~OutputNodeInstance() override = default</p> <p>OutputNodeInstance destructor.</p>"},{"location":"api/SparkyStudios/PackageFileCompressionAlgorithm/","title":"PackageFileCompressionAlgorithm","text":"<p>enum PackageFileCompressionAlgorithm : AmUInt8</p> <p>Defines the compression algorithms a package file can be compressed with.</p> ePCA_None No compression algorithm has been used for the package file. ePCA_ZLib The package file has been compressed using ZLib. ePCA_Invalid Invalid compression algorithm."},{"location":"api/SparkyStudios/PackageFileHeaderDescription/","title":"PackageFileHeaderDescription","text":"<p>struct PackageFileHeaderDescription</p> <p>Provides metadata about the package file.</p>"},{"location":"api/SparkyStudios/PackageFileHeaderDescription/#variables","title":"Variables","text":"Name Description m_Version Package file header tag. Should be equal to 'AMPK'. Package file version. Used to implement new features in package * files and still be backward compatible with old versions. m_CompressionAlgorithm The compression algorithm used for this package file. m_Items The description of each item in the package file."},{"location":"api/SparkyStudios/PackageFileHeaderDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/PackageFileHeaderDescription/#m_compressionalgorithm","title":"m_CompressionAlgorithm","text":"<p>PackageFileCompressionAlgorithm m_CompressionAlgorithm</p> <p>The compression algorithm used for this package file.</p>"},{"location":"api/SparkyStudios/PackageFileHeaderDescription/#m_items","title":"m_Items","text":"<p>std::vector&lt;PackageFileItemDescription&gt; m_Items</p> <p>The description of each item in the package file.</p> <p>The total number of descriptions should match the number of items.</p>"},{"location":"api/SparkyStudios/PackageFileHeaderDescription/#m_version","title":"m_Version","text":"<p>AmUInt16 m_Version</p> <p>Package file header tag. Should be equal to 'AMPK'.</p> <p>Package file version. Used to implement new features in package          * files and still be backward compatible with old versions.</p>"},{"location":"api/SparkyStudios/PackageFileItemDescription/","title":"PackageFileItemDescription","text":"<p>struct PackageFileItemDescription</p> <p>Describes an item in the package file.</p> <p>The item description is stored in the package file's header.</p>"},{"location":"api/SparkyStudios/PackageFileItemDescription/#variables","title":"Variables","text":"Name Description m_Name The name of the package item. It usually refers to the * resource path. m_Offset The offset of the package item in the package file. m_Size The size of the package item in bytes."},{"location":"api/SparkyStudios/PackageFileItemDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/PackageFileItemDescription/#m_name","title":"m_Name","text":"<p>AmString m_Name</p> <p>The name of the package item. It usually refers to the          * resource path.</p>"},{"location":"api/SparkyStudios/PackageFileItemDescription/#m_offset","title":"m_Offset","text":"<p>AmSize m_Offset</p> <p>The offset of the package item in the package file.</p>"},{"location":"api/SparkyStudios/PackageFileItemDescription/#m_size","title":"m_Size","text":"<p>AmSize m_Size</p> <p>The size of the package item in bytes.</p>"},{"location":"api/SparkyStudios/PackageFileSystem/","title":"PackageFileSystem","text":"<p>class  PackageFileSystem final : public FileSystem</p> <p>A FileSystem implementation that provides access      * to an Amplitude package file.</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#functions","title":"Functions","text":"Name Description PackageFileSystem Constructs a new @c PackageFileSystem instance. SetBasePath @copydoc FileSystem::SetBasePath GetBasePath @copydoc FileSystem::GetBasePath ResolvePath @copydoc FileSystem::ResolvePath Exists @copydoc FileSystem::Exists IsDirectory @copydoc FileSystem::IsDirectory Join @copydoc FileSystem::Join OpenFile @copydoc FileSystem::OpenFile StartOpenFileSystem @copydoc FileSystem::StartOpenFileSystem TryFinalizeOpenFileSystem @copydoc FileSystem::TryFinalizeOpenFileSystem StartCloseFileSystem @copydoc FileSystem::StartCloseFileSystem TryFinalizeCloseFileSystem @copydoc FileSystem::TryFinalizeCloseFileSystem"},{"location":"api/SparkyStudios/PackageFileSystem/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/PackageFileSystem/#exists","title":"Exists","text":"<p>[[nodiscard]] bool Exists(const AmOsString&amp; path) const override</p> <p>@copydoc FileSystem::Exists</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#getbasepath","title":"GetBasePath","text":"<p>[[nodiscard]] const AmOsString&amp; GetBasePath() const override</p> <p>@copydoc FileSystem::GetBasePath</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#isdirectory","title":"IsDirectory","text":"<p>[[nodiscard]] bool IsDirectory(const AmOsString&amp; path) const override</p> <p>@copydoc FileSystem::IsDirectory</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#join","title":"Join","text":"<p>[[nodiscard]] AmOsString Join(const std::vector&lt;AmOsString&gt;&amp; parts) const override</p> <p>@copydoc FileSystem::Join</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#openfile","title":"OpenFile","text":"<p>[[nodiscard]] std::shared_ptr&lt;File&gt; OpenFile(const AmOsString&amp; path, FileOpenMode mode = eFOM_READ) const override</p> <p>@copydoc FileSystem::OpenFile</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#packagefilesystem_1","title":"PackageFileSystem","text":"<p>PackageFileSystem()</p> <p>Constructs a new @c PackageFileSystem instance.</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#resolvepath","title":"ResolvePath","text":"<p>[[nodiscard]] AmOsString ResolvePath(const AmOsString&amp; path) const override</p> <p>@copydoc FileSystem::ResolvePath</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#setbasepath","title":"SetBasePath","text":"<p>void SetBasePath(const AmOsString&amp; basePath) override</p> <p>@copydoc FileSystem::SetBasePath</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>void StartCloseFileSystem() override</p> <p>@copydoc FileSystem::StartCloseFileSystem</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>void StartOpenFileSystem() override</p> <p>@copydoc FileSystem::StartOpenFileSystem</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>bool TryFinalizeCloseFileSystem() override</p> <p>@copydoc FileSystem::TryFinalizeCloseFileSystem</p>"},{"location":"api/SparkyStudios/PackageFileSystem/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>bool TryFinalizeOpenFileSystem() override</p> <p>@copydoc FileSystem::TryFinalizeOpenFileSystem</p>"},{"location":"api/SparkyStudios/PackageItemFile/","title":"PackageItemFile","text":"<p>class  PackageItemFile : public DiskFile</p> <p>A File implementation that provides access to an item in an      * Amplitude package file.</p>"},{"location":"api/SparkyStudios/PackageItemFile/#functions","title":"Functions","text":"Name Description GetPath @copydoc DiskFile::GetPath Eof @copydoc DiskFile::Eof Read @copydoc DiskFile::Read Write @copydoc DiskFile::Write !!! note Writing is disabled for packages item files. Length @copydoc DiskFile::Length Seek @copydoc DiskFile::Seek Position @copydoc DiskFile::Position"},{"location":"api/SparkyStudios/PackageItemFile/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/PackageItemFile/#eof","title":"Eof","text":"<p>bool Eof() override</p> <p>@copydoc DiskFile::Eof</p>"},{"location":"api/SparkyStudios/PackageItemFile/#getpath","title":"GetPath","text":"<p>[[nodiscard]] AmOsString GetPath() const override</p> <p>@copydoc DiskFile::GetPath</p>"},{"location":"api/SparkyStudios/PackageItemFile/#length","title":"Length","text":"<p>AmSize Length() override</p> <p>@copydoc DiskFile::Length</p>"},{"location":"api/SparkyStudios/PackageItemFile/#position","title":"Position","text":"<p>AmSize Position() override</p> <p>@copydoc DiskFile::Position</p>"},{"location":"api/SparkyStudios/PackageItemFile/#read","title":"Read","text":"<p>AmSize Read(AmUInt8Buffer dst, AmSize bytes) override</p> <p>@copydoc DiskFile::Read</p>"},{"location":"api/SparkyStudios/PackageItemFile/#seek","title":"Seek","text":"<p>void Seek(AmInt64 offset, FileSeekOrigin origin) override</p> <p>@copydoc DiskFile::Seek</p>"},{"location":"api/SparkyStudios/PackageItemFile/#write","title":"Write","text":"<p>AmSize Write(AmConstUInt8Buffer src, AmSize bytes) override</p> <p>@copydoc DiskFile::Write</p> <p>Note</p> <p>Writing is disabled for packages item files.</p>"},{"location":"api/SparkyStudios/Pipeline/","title":"Pipeline","text":"<p>class  Pipeline : public Asset&lt;AmPipelineID&gt;</p> <p>A pipeline assembles a set of nodes to process audio data.</p> <p>For each layer in Amplimix, a pipeline is created for that specific layer.</p>"},{"location":"api/SparkyStudios/Pipeline/#functions","title":"Functions","text":"Name Description CreateInstance Creates a new pipeline instance for the specified layer. DestroyInstance Destroys the specified pipeline instance."},{"location":"api/SparkyStudios/Pipeline/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Pipeline/#createinstance","title":"CreateInstance","text":"<p>* CreateInstance(const AmplimixLayer* layer) const</p> <p>Creates a new pipeline instance for the specified layer.</p> Parameter <code>layer</code> The layer for which to create the pipeline instance. Return A new pipeline instance for the specified layer."},{"location":"api/SparkyStudios/Pipeline/#destroyinstance","title":"DestroyInstance","text":"<p>virtual void DestroyInstance(PipelineInstance* instance) const = 0</p> <p>Destroys the specified pipeline instance.</p> Parameter <code>instance</code> The pipeline instance to destroy."},{"location":"api/SparkyStudios/ProcessorNodeInstance/","title":"ProcessorNodeInstance","text":"<p>class  ProcessorNodeInstance : public NodeInstance , public ConsumerNodeInstance , public ProviderNodeInstance</p> <p>Base class for Amplimix pipeline nodes that can process      * audio data in-place.</p>"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#functions","title":"Functions","text":"Name Description ProcessorNodeInstance PropertyNodeInstance constructor. ~ProcessorNodeInstance ProcessorNodeInstance destructor. Process Process input audio data and returns the output audio data. Consume @copydoc ConsumerNodeInstance::Consume() Connect @copydoc ConsumerNodeInstance::Connect() Provide @copydoc ProviderNodeInstance::Provide() Reset @copydoc NodeInstance::Reset()"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/ProcessorNodeInstance/#connect","title":"Connect","text":"<p>void Connect(AmObjectID provider) final</p> <p>@copydoc ConsumerNodeInstance::Connect()</p>"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#consume","title":"Consume","text":"<p>void Consume() final</p> <p>@copydoc ConsumerNodeInstance::Consume()</p>"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#process","title":"Process","text":"<p>* Process(const AudioBuffer* input)</p> <p>Process input audio data and returns the output audio data.</p> Parameter <code>input</code> The input audio data to process. Return The output audio data."},{"location":"api/SparkyStudios/ProcessorNodeInstance/#processornodeinstance_1","title":"ProcessorNodeInstance","text":"<p>ProcessorNodeInstance(bool processOnEmptyBuffer = false)</p> <p>PropertyNodeInstance constructor.</p> Parameter <code>processOnEmptyBuffer</code> If true, the node will execute the Process() method even if the input buffer is <code>nullptr.</code>"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#provide","title":"Provide","text":"<p>const AudioBuffer* Provide() final</p> <p>@copydoc ProviderNodeInstance::Provide()</p>"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#reset","title":"Reset","text":"<p>void Reset() override</p> <p>@copydoc NodeInstance::Reset()</p>"},{"location":"api/SparkyStudios/ProcessorNodeInstance/#processornodeinstance_2","title":"~ProcessorNodeInstance","text":"<p>~ProcessorNodeInstance() override = default</p> <p>ProcessorNodeInstance destructor.</p>"},{"location":"api/SparkyStudios/ProviderNodeInstance/","title":"ProviderNodeInstance","text":"<p>class  ProviderNodeInstance</p> <p>Interface for Amplimix pipeline nodes that can provide      * audio data to an output buffer.</p>"},{"location":"api/SparkyStudios/ProviderNodeInstance/#functions","title":"Functions","text":"Name Description Provide Produces audio data ready to be taken as input of * a consumer node."},{"location":"api/SparkyStudios/ProviderNodeInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/ProviderNodeInstance/#provide","title":"Provide","text":"<p>* Provide()</p> <p>Produces audio data ready to be taken as input of          * a consumer node.</p> Return The output audio data."},{"location":"api/SparkyStudios/RefCounter/","title":"RefCounter","text":"<p>class  RefCounter</p> <p>Holds the number of references to an object.</p>"},{"location":"api/SparkyStudios/RefCounter/#functions","title":"Functions","text":"Name Description RefCounter Constructs a new RefCounter. Increment Updates the counter by adding one reference. Decrement Updates the counter by removing one reference. GetCount Gets the current number of references."},{"location":"api/SparkyStudios/RefCounter/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/RefCounter/#decrement","title":"Decrement","text":"<p>AmInt32 Decrement()</p> <p>Updates the counter by removing one reference.</p> Return The number of references."},{"location":"api/SparkyStudios/RefCounter/#getcount","title":"GetCount","text":"<p>[[nodiscard]] inline AmInt32 GetCount() const</p> <p>Gets the current number of references.</p> Return The current number of references."},{"location":"api/SparkyStudios/RefCounter/#increment","title":"Increment","text":"<p>AmInt32 Increment()</p> <p>Updates the counter by adding one reference.</p> Return The number of references."},{"location":"api/SparkyStudios/RefCounter/#refcounter_1","title":"RefCounter","text":"<p>RefCounter()</p> <p>Constructs a new RefCounter.</p> <p>This initializes the internal counter to 0.</p>"},{"location":"api/SparkyStudios/ResamplerInstance/","title":"ResamplerInstance","text":"<p>class  ResamplerInstance</p> <p>A Resampler instance.</p> <p>An object of this class will be created each time a <code>Resampler</code> is requested.</p>"},{"location":"api/SparkyStudios/ResamplerInstance/#functions","title":"Functions","text":"Name Description ResamplerInstance Construct a new ResamplerInstance object. Initialize Initialize a new instance of the resampler. Process Processes the audio data. SetSampleRate Changes the input and output sample rate. GetSampleRateIn Get the current input sample rate. GetSampleRateOut Get the current output sample rate. GetChannelCount Get the current channels count. GetRequiredInputFrames Returns the required number of frames to have as input for the * given amount of output frames. GetExpectedOutputFrames Returns the expected number of frames to have as output for the * given amount of input frames. GetInputLatency Returns the current input latency in frames. GetOutputLatency Returns the current output latency in frames. Reset Resets the internal resampler state. Clear Cleans up the internal resampler state and allocated data. * @note This method is called when the resampler is about to be destroyed."},{"location":"api/SparkyStudios/ResamplerInstance/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/ResamplerInstance/#clear","title":"Clear","text":"<p>virtual void Clear() = 0</p> <p>Cleans up the internal resampler state and allocated data.          * @note This method is called when the resampler is about to be destroyed.</p>"},{"location":"api/SparkyStudios/ResamplerInstance/#getchannelcount","title":"GetChannelCount","text":"<p>[[nodiscard]] virtual AmUInt16 GetChannelCount() const = 0</p> <p>Get the current channels count.</p> Return The current channels count."},{"location":"api/SparkyStudios/ResamplerInstance/#getexpectedoutputframes","title":"GetExpectedOutputFrames","text":"<p>[[nodiscard]] virtual AmUInt64 GetExpectedOutputFrames(AmUInt64 inputFrameCount) const = 0</p> <p>Returns the expected number of frames to have as output for the          * given amount of input frames.</p> Parameter <code>inputFrameCount</code> The number of input frames. Return The expected number of output frames for the given input frame count."},{"location":"api/SparkyStudios/ResamplerInstance/#getinputlatency","title":"GetInputLatency","text":"<p>[[nodiscard]] virtual AmUInt64 GetInputLatency() const = 0</p> <p>Returns the current input latency in frames.</p> Return The resampler's current input latency in frames."},{"location":"api/SparkyStudios/ResamplerInstance/#getoutputlatency","title":"GetOutputLatency","text":"<p>[[nodiscard]] virtual AmUInt64 GetOutputLatency() const = 0</p> <p>Returns the current output latency in frames.</p> Return The resampler's current output latency in frames."},{"location":"api/SparkyStudios/ResamplerInstance/#getrequiredinputframes","title":"GetRequiredInputFrames","text":"<p>[[nodiscard]] virtual AmUInt64 GetRequiredInputFrames(AmUInt64 outputFrameCount) const = 0</p> <p>Returns the required number of frames to have as input for the          * given amount of output frames.</p> Parameter <code>outputFrameCount</code> The number of output frames. Return The input frame count needed to produce the given output frame count."},{"location":"api/SparkyStudios/ResamplerInstance/#getsampleratein","title":"GetSampleRateIn","text":"<p>[[nodiscard]] virtual AmUInt32 GetSampleRateIn() const = 0</p> <p>Get the current input sample rate.</p> Return The current input sample rate."},{"location":"api/SparkyStudios/ResamplerInstance/#getsamplerateout","title":"GetSampleRateOut","text":"<p>[[nodiscard]] virtual AmUInt32 GetSampleRateOut() const = 0</p> <p>Get the current output sample rate.</p> Return The current output sample rate."},{"location":"api/SparkyStudios/ResamplerInstance/#initialize","title":"Initialize","text":"<p>virtual void Initialize(AmUInt16 channelCount, AmUInt32 sampleRateIn, AmUInt32 sampleRateOut) = 0</p> <p>Initialize a new instance of the resampler.</p> Parameter <code>channelCount</code> The number of channels in the audio data. Parameter <code>sampleRateIn</code> The input sample rate. Parameter <code>sampleRateOut</code> The output sample rate."},{"location":"api/SparkyStudios/ResamplerInstance/#process","title":"Process","text":"<p>virtual bool Process(const AudioBuffer&amp; input, AmUInt64&amp; inputFrames, AudioBuffer&amp; output, AmUInt64&amp; outputFrames) = 0</p> <p>Processes the audio data.</p> Parameter <code>input</code> The input audio data. Parameter <code>inputFrames</code> The number of frames in the input buffer. Parameter <code>output</code> The output audio data. Parameter <code>outputFrames</code> The number of frames in the output buffer. Return <code>true</code> if the resampling was successful, otherwise <code>false.</code>"},{"location":"api/SparkyStudios/ResamplerInstance/#resamplerinstance_1","title":"ResamplerInstance","text":"<p>ResamplerInstance() = default</p> <p>Construct a new ResamplerInstance object.</p> <p>This will initialize the resampler instance state to default values.</p>"},{"location":"api/SparkyStudios/ResamplerInstance/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the internal resampler state.</p>"},{"location":"api/SparkyStudios/ResamplerInstance/#setsamplerate","title":"SetSampleRate","text":"<p>virtual void SetSampleRate(AmUInt32 sampleRateIn, AmUInt32 sampleRateOut) = 0</p> <p>Changes the input and output sample rate.</p> Parameter <code>sampleRateIn</code> The new input sample rate. Parameter <code>sampleRateOut</code> The new output sample rate."},{"location":"api/SparkyStudios/Resource/","title":"Resource","text":"<p>class  Resource</p> <p>An Amplitude resource in a FileSystem.</p> <p>This base class represents a resource (sound files, assets, etc.) in a FileSystem.</p>"},{"location":"api/SparkyStudios/Resource/#functions","title":"Functions","text":"Name Description GetPath Gets the path to the resource. Load Loads the resource from the given FileSystem."},{"location":"api/SparkyStudios/Resource/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Resource/#getpath","title":"GetPath","text":"<p>[[nodiscard]] virtual const AmOsString&amp; GetPath() const = 0</p> <p>Gets the path to the resource.</p>"},{"location":"api/SparkyStudios/Resource/#load","title":"Load","text":"<p>virtual void Load(const FileSystem* loader) = 0</p> <p>Loads the resource from the given FileSystem.</p>"},{"location":"api/SparkyStudios/Room/","title":"Room","text":"<p>class  Room</p> <p>The absorption coefficients of the material.</p> <p>Represents a physical space where sound waves can propagate. Any sound source within the room will be affected      * by the room's properties, and got applied early reflections and reverberation effects.</p> <p>Note</p> <p>This class is a lightweight wrapper around the internal <code>RoomInternalState</code> class.</p>"},{"location":"api/SparkyStudios/Room/#functions","title":"Functions","text":"Name Description Room Creates an uninitialized @c Room. Room Creates a wrapper instance over the provided state. Clear Uninitializes this @c Room. Valid Checks whether this @c Room has been initialized. GetId Returns the unique ID of this @c Room. SetLocation Sets the location @c Room. GetLocation Gets the current location of this @c Room. SetOrientation Sets the orientation of this @c Room. GetOrientation Gets the current orientation of this @c Room. GetDirection Gets the direction vector of this @c Room. GetUp Gets the up vector of this @c Room. SetDimensions Sets the shape's dimensions of this @c Room. SetShape Sets the shape representing this @c Room. GetShape Gets the shape representing this @c Room. SetWallMaterial Sets the material of a specific wall of this @c Room. SetAllWallMaterials Sets the material of all walls of this @c Room. SetWallMaterials Sets the material of each wall of this @c Room. GetWallMaterial Gets the material of a specific wall of this @c Room. SetGain Sets the gain of the early reflections of sound sources * of this room. GetGain Gets the early reflections gain. GetVolume Gets the volume of the @c Room in m3. GetSurfaceArea Gets the surface area of a specific wall of this @c Room. Update Update the state of this @c Room. GetState Gets the internal state of the @c Room."},{"location":"api/SparkyStudios/Room/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Room/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this @c Room.</p> <p>Note</p> <p>This doesn't destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/SparkyStudios/Room/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Gets the direction vector of this @c Room.</p> Return The direction (forward) vector."},{"location":"api/SparkyStudios/Room/#getgain","title":"GetGain","text":"<p>[[nodiscard]] AmReal32 GetGain() const</p> <p>Gets the early reflections gain.</p> Return The early reflections gain."},{"location":"api/SparkyStudios/Room/#getid","title":"GetId","text":"<p>[[nodiscard]] AmRoomID GetId() const</p> <p>Returns the unique ID of this @c Room.</p> Return The <code>Room</code> unique ID."},{"location":"api/SparkyStudios/Room/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this @c Room.</p> Return The current location of this <code>Room.</code>"},{"location":"api/SparkyStudios/Room/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the current orientation of this @c Room.</p> Return The current orientation of this <code>Room.</code>"},{"location":"api/SparkyStudios/Room/#getshape","title":"GetShape","text":"<p>[[nodiscard]] const BoxShape&amp; GetShape() const</p> <p>Gets the shape representing this @c Room.</p> Return The <code>Room</code> shape."},{"location":"api/SparkyStudios/Room/#getstate","title":"GetState","text":"<p>[[nodiscard]] RoomInternalState* GetState() const</p> <p>Gets the internal state of the @c Room.</p> <p>Note</p> <p>This method is intended for internal usage only.</p>"},{"location":"api/SparkyStudios/Room/#getsurfacearea","title":"GetSurfaceArea","text":"<p>[[nodiscard]] AmReal32 GetSurfaceArea(RoomWall wall) const</p> <p>Gets the surface area of a specific wall of this @c Room.</p> Parameter <code>wall</code> The wall to get the surface area for. Return The surface area of the specified wall."},{"location":"api/SparkyStudios/Room/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Gets the up vector of this @c Room.</p> Return The up vector."},{"location":"api/SparkyStudios/Room/#getvolume","title":"GetVolume","text":"<p>[[nodiscard]] AmReal32 GetVolume() const</p> <p>Gets the volume of the @c Room in m3.</p> Return The volume of the room."},{"location":"api/SparkyStudios/Room/#getwallmaterial","title":"GetWallMaterial","text":"<p>[[nodiscard]] const RoomMaterial&amp; GetWallMaterial(RoomWall wall) const</p> <p>Gets the material of a specific wall of this @c Room.</p> Parameter <code>wall</code> The wall to get the material for. Return The material of the specified wall."},{"location":"api/SparkyStudios/Room/#room_1","title":"Room","text":"<p>Room()</p> <p>Creates an uninitialized @c Room.</p> <p>Note</p> <p>An uninitialized <code>Room</code> doesn't affect sound sources.</p> <p>explicit Room(RoomInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p>"},{"location":"api/SparkyStudios/Room/#setallwallmaterials","title":"SetAllWallMaterials","text":"<p>void SetAllWallMaterials(const RoomMaterial&amp; material) const</p> <p>Sets the material of all walls of this @c Room.</p> Parameter <code>material</code> The new material."},{"location":"api/SparkyStudios/Room/#setdimensions","title":"SetDimensions","text":"<p>void SetDimensions(AmVec3 dimensions) const</p> <p>Sets the shape's dimensions of this @c Room.</p>"},{"location":"api/SparkyStudios/Room/#setgain","title":"SetGain","text":"<p>void SetGain(AmReal32 gain) const</p> <p>Sets the gain of the early reflections of sound sources          * of this room.</p> Parameter <code>gain</code> The gain applied to early reflections of sound sources."},{"location":"api/SparkyStudios/Room/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location @c Room.</p> Parameter <code>location</code> The new location."},{"location":"api/SparkyStudios/Room/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation) const</p> <p>Sets the orientation of this @c Room.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/SparkyStudios/Room/#setshape","title":"SetShape","text":"<p>void SetShape(const BoxShape&amp; shape) const</p> <p>Sets the shape representing this @c Room.</p>"},{"location":"api/SparkyStudios/Room/#setwallmaterial","title":"SetWallMaterial","text":"<p>void SetWallMaterial(RoomWall wall, const RoomMaterial&amp; material) const</p> <p>Sets the material of a specific wall of this @c Room.</p> Parameter <code>wall</code> The wall to set the material for. Parameter <code>material</code> The new material."},{"location":"api/SparkyStudios/Room/#setwallmaterials","title":"SetWallMaterials","text":"<p>void SetWallMaterials( const RoomMaterial&amp; leftWallMaterial, const RoomMaterial&amp; rightWallMaterial, const RoomMaterial&amp; floorMaterial, const RoomMaterial&amp; ceilingMaterial, const RoomMaterial&amp; frontWallMaterial, const RoomMaterial&amp; backWallMaterial) const</p> <p>Sets the material of each wall of this @c Room.</p> Parameter <code>leftWallMaterial</code> The material for the left wall. Parameter <code>rightWallMaterial</code> The material for the right wall. Parameter <code>floorMaterial</code> The material for the floor. Parameter <code>ceilingMaterial</code> The material for the ceiling. Parameter <code>frontWallMaterial</code> The material for the front wall. Parameter <code>backWallMaterial</code> The material for the back wall."},{"location":"api/SparkyStudios/Room/#update","title":"Update","text":"<p>void Update() const</p> <p>Update the state of this @c Room.</p> <p>This method is called automatically by the Engine on each frames.</p>"},{"location":"api/SparkyStudios/Room/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this @c Room has been initialized.</p> Return <code>true</code> if this <code>Room</code> has been initialized with a valid state."},{"location":"api/SparkyStudios/RoomMaterial/","title":"RoomMaterial","text":"<p>struct  RoomMaterial</p> <p>Represents the material of a @c Room wall.</p>"},{"location":"api/SparkyStudios/RoomMaterial/#variables","title":"Variables","text":"Name Description m_type The type of the material."},{"location":"api/SparkyStudios/RoomMaterial/#functions","title":"Functions","text":"Name Description RoomMaterial Constructs a new @c RoomMaterial. RoomMaterial Constructs a new predefined @c RoomMaterial."},{"location":"api/SparkyStudios/RoomMaterial/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/RoomMaterial/#m_type","title":"m_type","text":"<p>RoomMaterialType m_type</p> <p>The type of the material.</p>"},{"location":"api/SparkyStudios/RoomMaterial/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/RoomMaterial/#roommaterial_1","title":"RoomMaterial","text":"<p>RoomMaterial()</p> <p>Constructs a new @c RoomMaterial.</p> <p>Note</p> <p>This constructor initializes a <code>RoomMaterialType::Custom</code> material.</p> <p>explicit RoomMaterial(RoomMaterialType type)</p> <p>Constructs a new predefined @c RoomMaterial.</p> Parameter <code>type</code> The type of the material."},{"location":"api/SparkyStudios/RoomMaterialType/","title":"RoomMaterialType","text":"<p>enum class RoomMaterialType : AmUInt8</p> <p>Defines the material type of a @c Room wall.</p> <p>Use this enum when you want use predefined absorption coefficients for a wall. Note that the predefined coefficients are only for reference, and may not be accurate for your specific use case.</p> <p>You can use the <code>RoomMaterialType::Custom</code> to define a custom material. This will need you to provide the absorption coefficients yourself.</p>"},{"location":"api/SparkyStudios/RoomWall/","title":"RoomWall","text":"<p>enum class RoomWall : AmUInt8</p> <p>Enumerates the walls of a @c Room.</p> Left = 0 The left wall. Right The right wall. Floor The bottom wall. Ceiling The top wall. Front The front wall. Back The back wall. Invalid An Invalid wall. Also used to mark the maximum value of the enum."},{"location":"api/SparkyStudios/Rtpc/","title":"Rtpc","text":"<p>class  Rtpc : public Asset&lt;AmRtpcID&gt;</p> <p>Amplitude Real-Time Parameter Control.</p> <p>A RTPC is a value that is updated by the game. Any update to the RTPC is listened by the engine to propagate the changes to other parameters linked to it.</p> <p>A Rtpc object is shared between any objects and values linked to it.</p>"},{"location":"api/SparkyStudios/Rtpc/#functions","title":"Functions","text":"Name Description Update Updates the value of the RTPC. GetMinValue Get the minimum value of this RTPC. GetMaxValue Get the maximum value of this RTPC. GetValue Get the current value of this RTPC. SetValue Set the current value of this RTPC. GetDefaultValue Get the default value of this RTPC. Reset Resets the current RTPC value to the default value."},{"location":"api/SparkyStudios/Rtpc/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Rtpc/#getdefaultvalue","title":"GetDefaultValue","text":"<p>[[nodiscard]] virtual AmReal64 GetDefaultValue() const = 0</p> <p>Get the default value of this RTPC.</p> Return The default RTPC value."},{"location":"api/SparkyStudios/Rtpc/#getmaxvalue","title":"GetMaxValue","text":"<p>[[nodiscard]] virtual AmReal64 GetMaxValue() const = 0</p> <p>Get the maximum value of this RTPC.</p> Return The RTPC maximum value."},{"location":"api/SparkyStudios/Rtpc/#getminvalue","title":"GetMinValue","text":"<p>[[nodiscard]] virtual AmReal64 GetMinValue() const = 0</p> <p>Get the minimum value of this RTPC.</p> Return The RTPC minimum value."},{"location":"api/SparkyStudios/Rtpc/#getvalue","title":"GetValue","text":"<p>[[nodiscard]] virtual AmReal64 GetValue() const = 0</p> <p>Get the current value of this RTPC.</p> Return The current RTPC value."},{"location":"api/SparkyStudios/Rtpc/#reset","title":"Reset","text":"<p>virtual void Reset() = 0</p> <p>Resets the current RTPC value to the default value.</p>"},{"location":"api/SparkyStudios/Rtpc/#setvalue","title":"SetValue","text":"<p>virtual void SetValue(AmReal64 value) = 0</p> <p>Set the current value of this RTPC.</p> Parameter <code>value</code> The value to set."},{"location":"api/SparkyStudios/Rtpc/#update","title":"Update","text":"<p>virtual void Update(AmTime deltaTime) = 0</p> <p>Updates the value of the RTPC.</p> <p>This method is useful only for RTPCs that are using a curve to update their value.</p> Parameter <code>deltaTime</code> The time elapsed since the last update."},{"location":"api/SparkyStudios/RtpcValue/","title":"RtpcValue","text":"<p>struct  RtpcValue</p> <p>A RTPC compatible value is used as a wrapper to hold propertiy values      * that can be linked to RTPCs.</p> <p>A property value that can be linked to a RTPC can be either a single static value that never updates, or a curve and an RTPC value that is updated by the game. The curve is used here as a function that takes the current RTPC value and returns the parameter value.</p>"},{"location":"api/SparkyStudios/RtpcValue/#functions","title":"Functions","text":"Name Description RtpcValue Creates an unitialized RtpcValue object. ~RtpcValue Destroys the RtpcValue object. Init Creates a RtpcValue object with a static value. Init Creates a RtpcValue object with a curve and an RTPC object. Init Creates a RtpcValue object from an asset definition. GetValue Gets the current RTPC value. For static values, this will always * return the value passed to the constructor or set from an asset definition. IsStatic Checks if the RTPC value is static. * @return @c true if the RTPC value is static, @c false otherwise."},{"location":"api/SparkyStudios/RtpcValue/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/RtpcValue/#getvalue","title":"GetValue","text":"<p>[[nodiscard]] AmReal32 GetValue() const</p> <p>Gets the current RTPC value. For static values, this will always          * return the value passed to the constructor or set from an asset definition.</p> Return The current RTPC value."},{"location":"api/SparkyStudios/RtpcValue/#init","title":"Init","text":"<p>void Init(AmReal32 value)</p> <p>Creates a RtpcValue object with a static value.</p> Parameter <code>value</code> The static value to set. <p>void Init(const Rtpc* rtpc, Curve* curve)</p> <p>Creates a RtpcValue object with a curve and an RTPC object.</p> Parameter <code>rtpc</code> The RTPC to link to. Parameter <code>curve</code> The curve to use. <p>void Init(const RtpcCompatibleValue* definition)</p> <p>Creates a RtpcValue object from an asset definition.</p> Parameter <code>definition</code> The RTPC-compatible value asset definition."},{"location":"api/SparkyStudios/RtpcValue/#isstatic","title":"IsStatic","text":"<p>[[nodiscard]] bool IsStatic() const</p> <p>Checks if the RTPC value is static.          * @return @c true if the RTPC value is static, @c false otherwise.</p>"},{"location":"api/SparkyStudios/RtpcValue/#rtpcvalue_1","title":"RtpcValue","text":"<p>RtpcValue()</p> <p>Creates an unitialized RtpcValue object.</p> <p>An unitialized RtpcValue object cannot be used to update values.</p>"},{"location":"api/SparkyStudios/RtpcValue/#rtpcvalue_2","title":"~RtpcValue","text":"<p>~RtpcValue()</p> <p>Destroys the RtpcValue object.</p>"},{"location":"api/SparkyStudios/ScopedMemoryAllocation/","title":"ScopedMemoryAllocation","text":"<p>class  ScopedMemoryAllocation</p> <p>Allocates a block of memory with the given size in the given pool.</p> <p>That allocation will be restricted to the current scope, and will be freed automatically when the scope ends.</p>"},{"location":"api/SparkyStudios/Shape/","title":"Shape","text":"<p>class  Shape</p> <p>A Shape.</p> <p>A Shape defines a zone in the world where listeners and sound sources can be localized. This is used by the engine to detect the position on these objects and apply a specific effect (environmental effect or attenuation effect) to them.</p>"},{"location":"api/SparkyStudios/Shape/#functions","title":"Functions","text":"Name Description Create Creates a new Shape from a definition. Shape Construct a new Shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. Contains Checks if the given entity is contained in this shape. Contains Checks if the given listener is contained in this shape. Contains Checks if the given position is contained in this shape. SetLocation Set the location of this shape in the 3D environment. SetOrientation Set the orientation of this shape. GetOrientation Gets the orientation of this shape. GetLookAt Get the LookAt transformation matrix for this shape. GetLocation Get the position of this shape in the 3D environment. GetDirection Get the position of this shape in the 3D environment. GetUp Get the up vector of the zone."},{"location":"api/SparkyStudios/Shape/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Shape/#contains","title":"Contains","text":"<p>[[nodiscard]] virtual bool Contains(const Entity&amp; entity)</p> <p>Checks if the given entity is contained in this shape.</p> Parameter <code>entity</code> The entity to check. Return true if the shape contains the entity, false otherwise. <p>[[nodiscard]] virtual bool Contains(const Listener&amp; listener)</p> <p>Checks if the given listener is contained in this shape.</p> Parameter <code>listener</code> The listener to check. Return true if the shape contains the listener, false otherwise. <p>[[nodiscard]] virtual bool Contains(const AmVec3&amp; location) = 0</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/SparkyStudios/Shape/#create","title":"Create","text":"<p>static Shape* Create(const ShapeDefinition* definition)</p> <p>Creates a new Shape from a definition.</p> Parameter <code>definition</code> The definition of the shape generated                   from a flatbuffer binary."},{"location":"api/SparkyStudios/Shape/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Get the position of this shape in the 3D environment.</p> Return The shape's position."},{"location":"api/SparkyStudios/Shape/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Get the position of this shape in the 3D environment.</p> Return The shape's position."},{"location":"api/SparkyStudios/Shape/#getlookat","title":"GetLookAt","text":"<p>[[nodiscard]] const AmMat4&amp; GetLookAt() const</p> <p>Get the LookAt transformation matrix for this shape.</p> Return The lookAt transformation matrix."},{"location":"api/SparkyStudios/Shape/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the orientation of this shape.</p> Return The orientation of this shape."},{"location":"api/SparkyStudios/Shape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] virtual AmReal32 GetShortestDistanceToEdge(const Entity&amp; entity)</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>entity</code> The entity from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape. <p>[[nodiscard]] virtual AmReal32 GetShortestDistanceToEdge(const Listener&amp; listener)</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>listener</code> The listener from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape. <p>[[nodiscard]] virtual AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) = 0</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/SparkyStudios/Shape/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Get the up vector of the zone.</p> Return The up vector."},{"location":"api/SparkyStudios/Shape/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location)</p> <p>Set the location of this shape in the 3D environment.</p> Parameter <code>location</code> The shape location."},{"location":"api/SparkyStudios/Shape/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation)</p> <p>Set the orientation of this shape.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/SparkyStudios/Shape/#shape_1","title":"Shape","text":"<p>Shape()</p> <p>Construct a new Shape.</p>"},{"location":"api/SparkyStudios/Sound/","title":"Sound","text":"<p>class  Sound : public SoundObject , public Resource , public Asset&lt;AmSoundID&gt;</p> <p>Amplitude Sound.</p> <p>A Sound is the most basic sound object in Amplitude. It can be used to directly play an audio file, or can be contained in a SwitchContainer or a Collection for a fine-grained control.</p> <p>Effects can be attached to a Sound, which will be applied to all instances of the sound in the EffectProcessor of the Amplimix pipeline.</p>"},{"location":"api/SparkyStudios/Sound/#functions","title":"Functions","text":"Name Description IsStream Checks streaming is enabled for this Sound. IsLoop Checks if looping is enabled for this Sound. GetNearFieldGain Gets the near field effect gain of the sound object."},{"location":"api/SparkyStudios/Sound/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Sound/#getnearfieldgain","title":"GetNearFieldGain","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetNearFieldGain() const = 0</p> <p>Gets the near field effect gain of the sound object.</p> Return The sound object near field effect gain."},{"location":"api/SparkyStudios/Sound/#isloop","title":"IsLoop","text":"<p>[[nodiscard]] virtual bool IsLoop() const = 0</p> <p>Checks if looping is enabled for this Sound.</p> Return true if looping is enabled, false otherwise."},{"location":"api/SparkyStudios/Sound/#isstream","title":"IsStream","text":"<p>[[nodiscard]] virtual bool IsStream() const = 0</p> <p>Checks streaming is enabled for this Sound.</p> Return true if streaming is enabled, false otherwise."},{"location":"api/SparkyStudios/SoundBank/","title":"SoundBank","text":"<p>class  SoundBank</p> <p>Amplitude Sound Bank</p> <p>A Sound Bank is a group of Amplitude assets, packed in a single binary. This way allows you to pack the needed data for your game as you want (ie. sound banks per levels). A sound bank need to be loaded by the Engine using  <code>Engine::LoadSoundBank()</code> before to play sounds and trigger events inside it. When the sound bank data should be released (ie. changing the level, closing the game, etc.), you need to unload the sound bank using  <code>Engine::UnloadSoundBank()</code>.</p>"},{"location":"api/SparkyStudios/SoundBank/#functions","title":"Functions","text":"Name Description Initialize Initializes the sound bank by loading all the packed data. InitializeFromMemory Initializes the sound bank by loading all the packed data. Deinitialize Unloads the sound bank from the Engine. GetId Returns the unique ID of this SoundBank. GetName Returns the name of this SoundBank. GetSoundBankDefinition Returns the definition data used to initialize this SoundBank. GetRefCounter Get the references counter of this instance. LoadSoundFiles Load the sound files referenced in the sound bank."},{"location":"api/SparkyStudios/SoundBank/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SoundBank/#deinitialize","title":"Deinitialize","text":"<p>void Deinitialize(Engine* engine)</p> <p>Unloads the sound bank from the Engine.</p> Parameter <code>engine</code> The engine instance from which unload the sound bank."},{"location":"api/SparkyStudios/SoundBank/#getid","title":"GetId","text":"<p>[[nodiscard]] AmBankID GetId() const</p> <p>Returns the unique ID of this SoundBank.</p> Return The SoundBank unique ID."},{"location":"api/SparkyStudios/SoundBank/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Returns the name of this SoundBank.</p> Return The SoundBank name."},{"location":"api/SparkyStudios/SoundBank/#getrefcounter","title":"GetRefCounter","text":"<p>RefCounter* GetRefCounter()</p> <p>Get the references counter of this instance.</p> Return The references counter."},{"location":"api/SparkyStudios/SoundBank/#getsoundbankdefinition","title":"GetSoundBankDefinition","text":"<p>[[nodiscard]] const SoundBankDefinition* GetSoundBankDefinition() const</p> <p>Returns the definition data used to initialize this SoundBank.</p> Return The sound bank definition data."},{"location":"api/SparkyStudios/SoundBank/#initialize","title":"Initialize","text":"<p>bool Initialize(const AmOsString&amp; filename, Engine* engine)</p> <p>Initializes the sound bank by loading all the packed data.</p> Parameter <code>filename</code> The path to the sound bank file. Parameter <code>engine</code> The engine instance in which load the sound bank. Return true when the operation succeeds, false otherwise."},{"location":"api/SparkyStudios/SoundBank/#initializefrommemory","title":"InitializeFromMemory","text":"<p>bool InitializeFromMemory(const char* fileData, Engine* engine)</p> <p>Initializes the sound bank by loading all the packed data.</p> Parameter <code>fileData</code> The sound bank file content. Parameter <code>engine</code> The engine instance in which load the sound bank. Return true when the operation succeeds, false otherwise."},{"location":"api/SparkyStudios/SoundBank/#loadsoundfiles","title":"LoadSoundFiles","text":"<p>void LoadSoundFiles(const Engine* engine)</p> <p>Load the sound files referenced in the sound bank.</p> <p>This method should usually not be called directly. It is called automatically by the Engine with the  <code>Engine::StartLoadSoundFiles()</code> method.</p>"},{"location":"api/SparkyStudios/SoundObject/","title":"SoundObject","text":"<p>class  SoundObject</p> <p>The SoundObject class is the base class for all sound objects.</p>"},{"location":"api/SparkyStudios/SoundObject/#functions","title":"Functions","text":"Name Description GetGain Gets the linear gain of the sound object. GetPitch Gets the actual pitch of the sound object. GetPriority Gets the actual priority of the sound object. GetEffect Get the Effect object associated with this sound object. GetAttenuation Get the Attenuation object associated with this sound object. GetBus Return the bus this sound object will play on."},{"location":"api/SparkyStudios/SoundObject/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SoundObject/#getattenuation","title":"GetAttenuation","text":"<p>* GetAttenuation() const</p> <p>Get the Attenuation object associated with this sound object.</p> Return The Attenuation object."},{"location":"api/SparkyStudios/SoundObject/#getbus","title":"GetBus","text":"<p>[[nodiscard]] virtual Bus GetBus() const = 0</p> <p>Return the bus this sound object will play on.</p> Return The bus this sound object will play on."},{"location":"api/SparkyStudios/SoundObject/#geteffect","title":"GetEffect","text":"<p>* GetEffect() const</p> <p>Get the Effect object associated with this sound object.</p> Return The Effect object."},{"location":"api/SparkyStudios/SoundObject/#getgain","title":"GetGain","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetGain() const = 0</p> <p>Gets the linear gain of the sound object.</p> Return The sound object linear gain."},{"location":"api/SparkyStudios/SoundObject/#getpitch","title":"GetPitch","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetPitch() const = 0</p> <p>Gets the actual pitch of the sound object.</p> Return The sound object pitch."},{"location":"api/SparkyStudios/SoundObject/#getpriority","title":"GetPriority","text":"<p>[[nodiscard]] virtual const RtpcValue&amp; GetPriority() const = 0</p> <p>Gets the actual priority of the sound object.</p> Return The sound object priority."},{"location":"api/SparkyStudios/SphereShape/","title":"SphereShape","text":"<p>class  SphereShape : public Shape</p> <p>A sphere shape, defined by a radius.</p>"},{"location":"api/SparkyStudios/SphereShape/#functions","title":"Functions","text":"Name Description Create Creates a new SphereShape from a definition. SphereShape Construct a new Sphere Shape. GetRadius Get the radius of the sphere shape. GetDiameter Get the diameter of the sphere shape. SetRadius Set the radius of the sphere shape. GetShortestDistanceToEdge Get the shortest distance to the edge of this shape. Contains Checks if the given position is contained in this shape."},{"location":"api/SparkyStudios/SphereShape/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SphereShape/#contains","title":"Contains","text":"<p>[[nodiscard]] bool Contains(const AmVec3&amp; location) final</p> <p>Checks if the given position is contained in this shape.</p> Parameter <code>location</code> The 3D position to check. Return true if the shape contains the given position, false otherwise."},{"location":"api/SparkyStudios/SphereShape/#create","title":"Create","text":"<p>static SphereShape* Create(const SphereShapeDefinition* definition)</p> <p>Creates a new SphereShape from a definition.</p> Parameter <code>definition</code> The definition of the sphere shape generated                   from a flatbuffer binary."},{"location":"api/SparkyStudios/SphereShape/#getdiameter","title":"GetDiameter","text":"<p>[[nodiscard]] AmReal32 GetDiameter() const</p> <p>Get the diameter of the sphere shape.</p> Return The sphere's diameter."},{"location":"api/SparkyStudios/SphereShape/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] AmReal32 GetRadius() const</p> <p>Get the radius of the sphere shape.</p> Return The sphere's radius."},{"location":"api/SparkyStudios/SphereShape/#getshortestdistancetoedge","title":"GetShortestDistanceToEdge","text":"<p>[[nodiscard]] AmReal32 GetShortestDistanceToEdge(const AmVec3&amp; location) final</p> <p>Get the shortest distance to the edge of this shape.</p> Parameter <code>location</code> The location from which calculate the distance. Return The shortest distance from the location to the edge of this shape. If negative, the given location in outside the shape."},{"location":"api/SparkyStudios/SphereShape/#setradius","title":"SetRadius","text":"<p>void SetRadius(AmReal32 radius)</p> <p>Set the radius of the sphere shape.</p> Parameter <code>radius</code> The sphere's radius."},{"location":"api/SparkyStudios/SphereShape/#sphereshape_1","title":"SphereShape","text":"<p>explicit SphereShape(AmReal32 radius)</p> <p>Construct a new Sphere Shape.</p> Parameter <code>radius</code> The sphere's radius."},{"location":"api/SparkyStudios/SphericalPosition/","title":"SphericalPosition","text":"<p>struct  SphericalPosition</p> <p>Describes the coordinates of a point on a sphere's surface, relative      * to the center of that sphere.</p>"},{"location":"api/SparkyStudios/SphericalPosition/#operators","title":"Operators","text":"Name Description operator== Compares two spherical positions for equality. operator!= Compares two spherical positions for inequality."},{"location":"api/SparkyStudios/SphericalPosition/#functions","title":"Functions","text":"Name Description FromWorldSpace Create a spherical position from a 3D position in world space. ForHRTF Create a spherical position from a 3D position in world space. This * method is optimized for use in HRTF (Head-Related Transfer Function) space, * where the azimuth is rotated 90 degrees around the z-axis FromDegrees Create a spherical position from given azimuth and elevation in degrees. SphericalPosition Create a spherical position with default values (azimuth = 0, elevation = 0, radius = 1). SphericalPosition Create a spherical position with given azimuth, elevation, and radius. FlipAzimuth Flip the azimuth of the spherical position and returns a new instance. Rotate Rotates the spherical position with the given rotation and returns a new instance. ToCartesian Converts the spherical position to a 3D position in world space. GetAzimuth Gets the azimuth in radians of the spherical position. GetElevation Gets the elevation in radians of the spherical position. GetRadius Gets the distance from the center of the sphere to the point. SetAzimuth Sets the azimuth in radians of the spherical position. SetElevation Sets the elevation in radians of the spherical position. SetRadius Sets the distance from the center of the sphere to the point."},{"location":"api/SparkyStudios/SphericalPosition/#operator-details","title":"Operator Details","text":""},{"location":"api/SparkyStudios/SphericalPosition/#operator","title":"operator!=","text":"<p>bool operator!=(const SphericalPosition&amp; other) const</p> <p>Compares two spherical positions for inequality.</p> Parameter <code>other</code> The other spherical position to compare with. Return <code>true</code> if the spherical positions are not equal, <code>false</code> otherwise."},{"location":"api/SparkyStudios/SphericalPosition/#operator_1","title":"operator==","text":"<p>bool operator==(const SphericalPosition&amp; other) const</p> <p>Compares two spherical positions for equality.</p> Parameter <code>other</code> The other spherical position to compare with. Return <code>true</code> if the spherical positions are equal, <code>false</code> otherwise."},{"location":"api/SparkyStudios/SphericalPosition/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SphericalPosition/#flipazimuth","title":"FlipAzimuth","text":"<p>[[nodiscard]] SphericalPosition FlipAzimuth() const</p> <p>Flip the azimuth of the spherical position and returns a new instance.</p> Return A new spherical position with the azimuth flipped."},{"location":"api/SparkyStudios/SphericalPosition/#forhrtf","title":"ForHRTF","text":"<p>static SphericalPosition ForHRTF(const AmVec3&amp; position)</p> <p>Create a spherical position from a 3D position in world space. This          * method is optimized for use in HRTF (Head-Related Transfer Function) space,          * where the azimuth is rotated 90 degrees around the z-axis</p> Parameter <code>position</code> The position in world space."},{"location":"api/SparkyStudios/SphericalPosition/#fromdegrees","title":"FromDegrees","text":"<p>static SphericalPosition FromDegrees(AmReal32 azimuthDegrees, AmReal32 elevationDegrees, AmReal32 radius = 1.0f)</p> <p>Create a spherical position from given azimuth and elevation in degrees.</p> Parameter <code>azimuthDegrees</code> The azimuth in degrees. Parameter <code>elevationDegrees</code> The elevation in degrees. Parameter <code>radius</code> The distance from the center of the sphere to the point. Return A spherical position representing the given azimuth and elevation in degrees."},{"location":"api/SparkyStudios/SphericalPosition/#fromworldspace","title":"FromWorldSpace","text":"<p>static SphericalPosition FromWorldSpace(const AmVec3&amp; position)</p> <p>Create a spherical position from a 3D position in world space.</p> Parameter <code>position</code> The position in world space."},{"location":"api/SparkyStudios/SphericalPosition/#getazimuth","title":"GetAzimuth","text":"<p>[[nodiscard]] inline AmReal32 GetAzimuth() const</p> <p>Gets the azimuth in radians of the spherical position.</p> Return The azimuth in radians of the spherical position."},{"location":"api/SparkyStudios/SphericalPosition/#getelevation","title":"GetElevation","text":"<p>[[nodiscard]] inline AmReal32 GetElevation() const</p> <p>Gets the elevation in radians of the spherical position.</p> Return The elevation in radians of the spherical position."},{"location":"api/SparkyStudios/SphericalPosition/#getradius","title":"GetRadius","text":"<p>[[nodiscard]] inline AmReal32 GetRadius() const</p> <p>Gets the distance from the center of the sphere to the point.</p> Return The distance from the center of the sphere to the point."},{"location":"api/SparkyStudios/SphericalPosition/#rotate","title":"Rotate","text":"<p>[[nodiscard]] SphericalPosition Rotate(AmQuat rotation) const</p> <p>Rotates the spherical position with the given rotation and returns a new instance.</p> Parameter <code>rotation</code> The rotation to apply to the spherical position. Return A rotated spherical position."},{"location":"api/SparkyStudios/SphericalPosition/#setazimuth","title":"SetAzimuth","text":"<p>inline void SetAzimuth(AmReal32 azimuth)</p> <p>Sets the azimuth in radians of the spherical position.</p> Parameter <code>azimuth</code> The new azimuth in radians."},{"location":"api/SparkyStudios/SphericalPosition/#setelevation","title":"SetElevation","text":"<p>inline void SetElevation(AmReal32 elevation)</p> <p>Sets the elevation in radians of the spherical position.</p> Parameter <code>elevation</code> The new elevation in radians."},{"location":"api/SparkyStudios/SphericalPosition/#setradius","title":"SetRadius","text":"<p>inline void SetRadius(AmReal32 radius)</p> <p>Sets the distance from the center of the sphere to the point.</p> Parameter <code>radius</code> The new distance from the center of the sphere to the point."},{"location":"api/SparkyStudios/SphericalPosition/#sphericalposition_1","title":"SphericalPosition","text":"<p>SphericalPosition() = default</p> <p>Create a spherical position with default values (azimuth = 0, elevation = 0, radius = 1).</p> <p>SphericalPosition(AmReal32 azimuth, AmReal32 elevation, AmReal32 radius = 1.0f)</p> <p>Create a spherical position with given azimuth, elevation, and radius.</p> Parameter <code>azimuth</code> The rotation around the z-axis in radians. Parameter <code>elevation</code> The rotation around the x-axis in radians. Parameter <code>radius</code> The distance from the center of the sphere to the point."},{"location":"api/SparkyStudios/SphericalPosition/#tocartesian","title":"ToCartesian","text":"<p>[[nodiscard]] AmVec3 ToCartesian() const</p> <p>Converts the spherical position to a 3D position in world space.</p> Return A 3D position in world space corresponding to the spherical position."},{"location":"api/SparkyStudios/SplitComplex/","title":"SplitComplex","text":"<p>class  SplitComplex</p> <p>Buffer for split-complex representation of FFT results.</p> <p>The split-complex representation stores the real and imaginary parts of FFT results in two different memory buffers which is useful e.g. for SIMD optimizations.</p>"},{"location":"api/SparkyStudios/SplitComplex/#functions","title":"Functions","text":"Name Description SplitComplex Creates a new split-complex buffer with the given initial size. ~SplitComplex Destroy the split-complex buffer and release all allocated memory. Release Releases all allocated memory. Resize Resizes the split-complex buffer to the given size. Clear Clears the split-complex buffer. CopyFrom Copies the given split-complex buffer to this one. GetSize Gets the current size of the split-complex buffer. re Gets the real part of the split-complex buffer. re Gets the real part of the split-complex buffer. im Gets the imaginary part of the split-complex buffer. im Gets the imaginary part of the split-complex buffer."},{"location":"api/SparkyStudios/SplitComplex/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SplitComplex/#clear","title":"Clear","text":"<p>void Clear() const</p> <p>Clears the split-complex buffer.</p>"},{"location":"api/SparkyStudios/SplitComplex/#copyfrom","title":"CopyFrom","text":"<p>void CopyFrom(const SplitComplex&amp; other) const</p> <p>Copies the given split-complex buffer to this one.</p> Parameter <code>other</code> The split-complex buffer to copy."},{"location":"api/SparkyStudios/SplitComplex/#getsize","title":"GetSize","text":"<p>[[nodiscard]] inline AmSize GetSize() const</p> <p>Gets the current size of the split-complex buffer.</p> Return The size of the split-complex buffer."},{"location":"api/SparkyStudios/SplitComplex/#release","title":"Release","text":"<p>void Release()</p> <p>Releases all allocated memory.</p>"},{"location":"api/SparkyStudios/SplitComplex/#resize","title":"Resize","text":"<p>void Resize(AmSize newSize, bool clear = false)</p> <p>Resizes the split-complex buffer to the given size.</p> Parameter <code>newSize</code> The new size of the split-complex buffer. Parameter <code>clear</code> Parameter <code>clear</code>"},{"location":"api/SparkyStudios/SplitComplex/#splitcomplex_1","title":"SplitComplex","text":"<p>explicit SplitComplex(AmSize initialSize = 0)</p> <p>Creates a new split-complex buffer with the given initial size.</p> Parameter <code>initialSize</code> The initial size of the split-complex buffer."},{"location":"api/SparkyStudios/SplitComplex/#im","title":"im","text":"<p>AmAudioSample* im()</p> <p>Gets the imaginary part of the split-complex buffer.</p> Return The imaginary part of the split-complex buffer. <p>[[nodiscard]] const AmAudioSample* im() const</p> <p>Gets the imaginary part of the split-complex buffer.</p> Return The imaginary part of the split-complex buffer."},{"location":"api/SparkyStudios/SplitComplex/#re","title":"re","text":"<p>AmAudioSample* re()</p> <p>Gets the real part of the split-complex buffer.</p> Return The real part of the split-complex buffer. <p>[[nodiscard]] const AmAudioSample* re() const</p> <p>Gets the real part of the split-complex buffer.</p> Return The real part of the split-complex buffer."},{"location":"api/SparkyStudios/SplitComplex/#splitcomplex_2","title":"~SplitComplex","text":"<p>~SplitComplex()</p> <p>Destroy the split-complex buffer and release all allocated memory.</p>"},{"location":"api/SparkyStudios/Switch/","title":"Switch","text":"<p>class  Switch : public Asset&lt;AmSwitchID&gt;</p> <p>Amplitude Switch.</p> <p>A switch is a collection of states which can change the sound played from a SwitchContainer.</p> <p>For example, you can have a switch named \"SurfaceType\" which have \"wood\", \"grass\", \"metal\" and \"water\" as states. A SwitchContainer using this switch can group sounds per switch states, so when a state is active, all the sounds of that state are played.</p> <p>The Switch is a shared object between sound sources. They are used only by SwitchContainer objects.</p>"},{"location":"api/SparkyStudios/Switch/#functions","title":"Functions","text":"Name Description GetState Get the current state of the switch. SetState Set the current state of the switch. SetState Set the current state of the switch using the state ID. SetState Set the current state of the switch using the state name. GetSwitchStates Get the list of available SwitchStates in this Switch."},{"location":"api/SparkyStudios/Switch/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Switch/#getstate","title":"GetState","text":"<p>[[nodiscard]] virtual const SwitchState&amp; GetState() const = 0</p> <p>Get the current state of the switch.</p> Return The current state of the switch."},{"location":"api/SparkyStudios/Switch/#getswitchstates","title":"GetSwitchStates","text":"<p>[[nodiscard]] virtual const std::vector&lt;SwitchState&gt;&amp; GetSwitchStates() const = 0</p> <p>Get the list of available SwitchStates in this Switch.</p> Return The list of available SwitchStates."},{"location":"api/SparkyStudios/Switch/#setstate","title":"SetState","text":"<p>virtual void SetState(const SwitchState&amp; state) = 0</p> <p>Set the current state of the switch.</p> Parameter <code>state</code> The state to apply to the switch. <p>virtual void SetState(AmObjectID id) = 0</p> <p>Set the current state of the switch using the state ID.</p> Parameter <code>id</code> The ID of the state to apply. This ID should exist in the list of switch states. <p>virtual void SetState(const AmString&amp; name) = 0</p> <p>Set the current state of the switch using the state name.</p> Parameter <code>name</code> The name of the state to apply. This name should exist in the list of switch states."},{"location":"api/SparkyStudios/SwitchContainer/","title":"SwitchContainer","text":"<p>class  SwitchContainer : public SoundObject , public Asset&lt;AmSwitchContainerID&gt;</p> <p>Amplitude Switch Container.</p> <p>A switch container is a container sound object where sounds and collections can be registered on one or multiple switches. Only one switch can be active at a time in a switch container. When a switch is active, all the sounds and collections that are registered on it will be played.</p>"},{"location":"api/SparkyStudios/SwitchContainer/#functions","title":"Functions","text":"Name Description GetSwitch Returns the switch attached to this SwitchContainer. GetFaderIn Get the fade in Fader for the given sound object ID. GetFaderOut Get the fade out Fader for the given sound object ID. GetSoundObjects Returns the list of sound objects referenced in this SwitchContainer for the given state."},{"location":"api/SparkyStudios/SwitchContainer/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SwitchContainer/#getfaderin","title":"GetFaderIn","text":"<p>* GetFaderIn(AmObjectID id) const</p> <p>Get the fade in Fader for the given sound object ID.</p> Parameter <code>id</code> The ID of the sound object. Return The fade in Fader."},{"location":"api/SparkyStudios/SwitchContainer/#getfaderout","title":"GetFaderOut","text":"<p>* GetFaderOut(AmObjectID id) const</p> <p>Get the fade out Fader for the given sound object ID.</p> Parameter <code>id</code> The ID of the sound object. Return The fade out Fader."},{"location":"api/SparkyStudios/SwitchContainer/#getsoundobjects","title":"GetSoundObjects","text":"<p>[[nodiscard]] virtual const std::vector&lt;SwitchContainerItem&gt;&amp; GetSoundObjects(AmObjectID stateId) const = 0</p> <p>Returns the list of sound objects referenced in this SwitchContainer for the given state.</p> Parameter <code>stateId</code> The switch state to get the objects for. Return The list of sound object IDs registered to the given state."},{"location":"api/SparkyStudios/SwitchContainer/#getswitch","title":"GetSwitch","text":"<p>* GetSwitch() const</p> <p>Returns the switch attached to this SwitchContainer.</p> Return The switch of this SwitchContainer if available or nullptr."},{"location":"api/SparkyStudios/SwitchContainerItem/","title":"SwitchContainerItem","text":"<p>struct SwitchContainerItem</p> <p>Describes a single item within a SwitchContainer.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#variables","title":"Variables","text":"Name Description m_id The object ID of the item. m_continueBetweenStates Whether to continue playing this item when the SwitchContainer * changes its state between one of the values where this item is registered. m_fadeInDuration The fade duration in milliseconds when this item starts playing. m_fadeInAlgorithm The name of the fading algorithm to use when this item starts playing. m_fadeOutDuration The fade duration in milliseconds when this item stops playing. m_fadeOutAlgorithm The name of the fading algorithm to use when this item stops playing. m_gain The custom linear gain applied on this item. m_pitch The custom pitch applied on this item."},{"location":"api/SparkyStudios/SwitchContainerItem/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/SwitchContainerItem/#m_continuebetweenstates","title":"m_continueBetweenStates","text":"<p>bool m_continueBetweenStates</p> <p>Whether to continue playing this item when the SwitchContainer          * changes its state between one of the values where this item is registered.</p> <p>If this value is set to <code>false,</code> each the sound will be stopped and played again from the beginning.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_fadeinalgorithm","title":"m_fadeInAlgorithm","text":"<p>AmString m_fadeInAlgorithm</p> <p>The name of the fading algorithm to use when this item starts playing.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_fadeinduration","title":"m_fadeInDuration","text":"<p>AmTime m_fadeInDuration</p> <p>The fade duration in milliseconds when this item starts playing.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_fadeoutalgorithm","title":"m_fadeOutAlgorithm","text":"<p>AmString m_fadeOutAlgorithm</p> <p>The name of the fading algorithm to use when this item stops playing.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_fadeoutduration","title":"m_fadeOutDuration","text":"<p>AmTime m_fadeOutDuration</p> <p>The fade duration in milliseconds when this item stops playing.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_gain","title":"m_gain","text":"<p>RtpcValue m_gain</p> <p>The custom linear gain applied on this item.</p> <p>The final gain will be computed with this value multiplied with the gain of the attenuation model, if any.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_id","title":"m_id","text":"<p>AmObjectID m_id</p> <p>The object ID of the item.</p> <p>May be a AmSoundID or a AmCollectionID.</p>"},{"location":"api/SparkyStudios/SwitchContainerItem/#m_pitch","title":"m_pitch","text":"<p>RtpcValue m_pitch</p> <p>The custom pitch applied on this item.</p> <p>The final pitch will be computed with this value multiplied with the pitch of the doppler effect, if this switch container's spatialization mode is set to position.</p>"},{"location":"api/SparkyStudios/SwitchState/","title":"SwitchState","text":"<p>struct  SwitchState</p> <p>A switch state.</p>"},{"location":"api/SparkyStudios/SwitchState/#variables","title":"Variables","text":"Name Description m_id The ID of this switch state. m_name The name of this switch state."},{"location":"api/SparkyStudios/SwitchState/#functions","title":"Functions","text":"Name Description Valid Checks whether this switch state is valid."},{"location":"api/SparkyStudios/SwitchState/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/SwitchState/#m_id","title":"m_id","text":"<p>AmObjectID m_id</p> <p>The ID of this switch state.</p> <p>This ID is unique only in the parent switch.</p>"},{"location":"api/SparkyStudios/SwitchState/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this switch state.</p>"},{"location":"api/SparkyStudios/SwitchState/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/SwitchState/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this switch state is valid.</p> Return <code>true</code> if the switch state is valid, <code>false</code> otherwise."},{"location":"api/SparkyStudios/Thread/","title":"Thread","text":""},{"location":"api/SparkyStudios/Thread/#types","title":"Types","text":"Name Description AwaitablePoolTask A pool task that allows a thread to wait until it finishes. Pool Pool tasks scheduler class. PoolTask Base class for pool tasks."},{"location":"api/SparkyStudios/Thread/#functions","title":"Functions","text":"Name Description CreateMutex Creates a mutex object. CreateThread Creates a new thread. DestroyMutex Destroys a mutex object. GetCurrentThreadId Gets the handle of the calling thread. GetTimeMillis Gets the total execution time in milliseconds for the calling thread. LockMutex Takes ownership of a mutex. Release Manually stops a thread execution. Sleep Makes the calling thread sleep for the given amount of milliseconds. UnlockMutex Releases ownership of a mutex. Wait Waits for the given thread to stop."},{"location":"api/SparkyStudios/Thread/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Thread/#createmutex","title":"CreateMutex","text":"<p>AmMutexHandle CreateMutex(AmUInt64 spinCount = 100)</p> <p>Creates a mutex object.</p> <p>A mutex is an object that a thread can acquire, preventing other threads from acquiring it.</p> <p>To acquire the mutex ownership, you should use LockMutex() with the mutex handle as parameter. To release the ownership, use UnlockMutex() with the mutex handle as parameter.</p>"},{"location":"api/SparkyStudios/Thread/#createthread","title":"CreateThread","text":"<p>AmThreadHandle CreateThread(AmThreadFunction threadFunction, AmVoidPtr parameter = nullptr)</p> <p>Creates a new thread.</p> Parameter <code>threadFunction</code> The function to run in the thread. Parameter <code>parameter</code> An optional shared data to pass to the thread"},{"location":"api/SparkyStudios/Thread/#destroymutex","title":"DestroyMutex","text":"<p>void DestroyMutex(AmMutexHandle handle)</p> <p>Destroys a mutex object.</p> Parameter <code>handle</code> The mutex object handle."},{"location":"api/SparkyStudios/Thread/#getcurrentthreadid","title":"GetCurrentThreadId","text":"<p>AmThreadID GetCurrentThreadId()</p> <p>Gets the handle of the calling thread.</p>"},{"location":"api/SparkyStudios/Thread/#gettimemillis","title":"GetTimeMillis","text":"<p>AmUInt64 GetTimeMillis()</p> <p>Gets the total execution time in milliseconds for the calling thread.</p>"},{"location":"api/SparkyStudios/Thread/#lockmutex","title":"LockMutex","text":"<p>void LockMutex(AmMutexHandle handle)</p> <p>Takes ownership of a mutex.</p> Parameter <code>handle</code> The mutex object handle."},{"location":"api/SparkyStudios/Thread/#release","title":"Release","text":"<p>void Release(AmThreadHandle&amp; thread)</p> <p>Manually stops a thread execution.</p> Parameter <code>thread</code> The handle of the thread to stop."},{"location":"api/SparkyStudios/Thread/#sleep","title":"Sleep","text":"<p>void Sleep(AmInt32 milliseconds)</p> <p>Makes the calling thread sleep for the given amount of milliseconds.</p> Parameter <code>milliseconds</code> The amount of time the calling thread should sleep."},{"location":"api/SparkyStudios/Thread/#unlockmutex","title":"UnlockMutex","text":"<p>void UnlockMutex(AmMutexHandle handle)</p> <p>Releases ownership of a mutex.</p> Parameter <code>handle</code> The mutex object handle."},{"location":"api/SparkyStudios/Thread/#wait","title":"Wait","text":"<p>void Wait(AmThreadHandle thread)</p> <p>Waits for the given thread to stop.</p> Parameter <code>thread</code> The handle of the thread to wait."},{"location":"api/SparkyStudios/Thread/AwaitablePoolTask/","title":"AwaitablePoolTask","text":"<p>class  AwaitablePoolTask : public PoolTask</p> <p>A pool task that allows a thread to wait until it finishes.</p>"},{"location":"api/SparkyStudios/Thread/AwaitablePoolTask/#functions","title":"Functions","text":"Name Description Work @copydoc PoolTask::Work AwaitableWork Pool task execution function. Await Makes the calling thread wait for this task to finish. Await Makes the calling thread wait for this task to finish. * @param duration The maximum amount of time to wait in milliseconds."},{"location":"api/SparkyStudios/Thread/AwaitablePoolTask/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Thread/AwaitablePoolTask/#await","title":"Await","text":"<p>void Await()</p> <p>Makes the calling thread wait for this task to finish.</p> <p>bool Await(AmUInt64 duration)</p> <p>Makes the calling thread wait for this task to finish.              * @param duration The maximum amount of time to wait in milliseconds.</p>"},{"location":"api/SparkyStudios/Thread/AwaitablePoolTask/#awaitablework","title":"AwaitableWork","text":"<p>virtual void AwaitableWork() = 0</p> <p>Pool task execution function.</p>"},{"location":"api/SparkyStudios/Thread/AwaitablePoolTask/#work","title":"Work","text":"<p>void Work() final</p> <p>@copydoc PoolTask::Work</p>"},{"location":"api/SparkyStudios/Thread/Pool/","title":"Pool","text":"<p>class  Pool</p> <p>Pool tasks scheduler class.</p> <p>The Pool tasks scheduler can pick and run pool tasks on several multiple threads. The number of threads is defined at initialization.</p> <p>The maximum number of tasks the pool can manage is defined by the <code>AM_MAX_THREAD_POOL_TASKS</code> macro. The default value is <code>1024</code></p>"},{"location":"api/SparkyStudios/Thread/Pool/#functions","title":"Functions","text":"Name Description Pool Creates a new pool tasks scheduler instance. Init Initialize and run thread pool. AddTask Add a task to the tasks list. GetWork Called from worker thread to get a new task. GetThreadCount Gets the number of threads this pool is using. IsRunning Indicates that the pool is running. HasTasks Indicates that has tasks pending."},{"location":"api/SparkyStudios/Thread/Pool/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Thread/Pool/#addtask","title":"AddTask","text":"<p>void AddTask(const std::shared_ptr&lt;PoolTask&gt;&amp; task)</p> <p>Add a task to the tasks list.</p> Parameter <code>task</code> The PoolTask to add. The task is not automatically deleted when the work is done."},{"location":"api/SparkyStudios/Thread/Pool/#getthreadcount","title":"GetThreadCount","text":"<p>[[nodiscard]] AmUInt32 GetThreadCount() const</p> <p>Gets the number of threads this pool is using.</p>"},{"location":"api/SparkyStudios/Thread/Pool/#getwork","title":"GetWork","text":"<p>std::shared_ptr&lt;PoolTask&gt; GetWork()</p> <p>Called from worker thread to get a new task.</p> <p>Note</p> <p>This method is called internally, and should not be called in user code.</p> Return The next PoolTask to execute, or nullptr if no task is available."},{"location":"api/SparkyStudios/Thread/Pool/#hastasks","title":"HasTasks","text":"<p>[[nodiscard]] bool HasTasks() const</p> <p>Indicates that has tasks pending.</p>"},{"location":"api/SparkyStudios/Thread/Pool/#init","title":"Init","text":"<p>void Init(AmUInt32 threadCount)</p> <p>Initialize and run thread pool.</p> Parameter <code>threadCount</code> The number of thread in the pool. For thread count 0, work is done at <code>AddTask</code> call in the calling thread."},{"location":"api/SparkyStudios/Thread/Pool/#isrunning","title":"IsRunning","text":"<p>[[nodiscard]] bool IsRunning() const</p> <p>Indicates that the pool is running.</p>"},{"location":"api/SparkyStudios/Thread/Pool/#pool_1","title":"Pool","text":"<p>Pool()</p> <p>Creates a new pool tasks scheduler instance.</p>"},{"location":"api/SparkyStudios/Thread/PoolTask/","title":"PoolTask","text":"<p>class  PoolTask</p> <p>Base class for pool tasks.</p>"},{"location":"api/SparkyStudios/Thread/PoolTask/#functions","title":"Functions","text":"Name Description Work Main pool task execution function. Ready Checks if the task is ready to be picked by the pool scheduler. * @return @c true if the task is ready @c false otherwise."},{"location":"api/SparkyStudios/Thread/PoolTask/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Thread/PoolTask/#ready","title":"Ready","text":"<p>virtual bool Ready()</p> <p>Checks if the task is ready to be picked by the pool scheduler.              * @return @c true if the task is ready @c false otherwise.</p>"},{"location":"api/SparkyStudios/Thread/PoolTask/#work","title":"Work","text":"<p>virtual void Work() = 0</p> <p>Main pool task execution function.</p> <p>When this task will be picked by the pool scheduler, this method will be called to execute the task.</p>"},{"location":"api/SparkyStudios/Zone/","title":"Zone","text":"<p>class  Zone</p> <p>A shape that represents a zone in the world.</p> <p>This shape is mainly used by attenuations and environments. It's composed of an inner shape and an outer shape. The inner shape is the zone where the factor is equal to one all the time. The outer shape is the zone where the factor increase or decrease according to the shortest distance of the game object from the outer edge.</p> <p>If the game object is outside the outer shape (thus, outside the zone), the factor is zero.</p>"},{"location":"api/SparkyStudios/Zone/#variables","title":"Variables","text":"Name Description m_innerShape The inner shape of the zone. m_outerShape The outer shape of the zone."},{"location":"api/SparkyStudios/Zone/#functions","title":"Functions","text":"Name Description GetFactor Gets the factor (a value in the range [0, 1]) according to the position * of the given entity in the zone. GetFactor Gets the factor (a value in the range [0, 1]) according to the position * of the given listener in the zone. GetFactor Gets the factor (a value in the range [0, 1]) according to the given * position in the zone. SetLocation Sets the location of this zone in the 3D environment. GetLocation Gets the current location of this zone. SetOrientation Sets the orientation of this zone. GetOrientation Gets the orientation of this zone. GetDirection Get the direction vector of the zone. GetUp Get the up vector of the zone."},{"location":"api/SparkyStudios/Zone/#variable-details","title":"Variable Details","text":""},{"location":"api/SparkyStudios/Zone/#m_innershape","title":"m_innerShape","text":"<p>Shape* m_innerShape</p> <p>The inner shape of the zone.</p>"},{"location":"api/SparkyStudios/Zone/#m_outershape","title":"m_outerShape","text":"<p>Shape* m_outerShape</p> <p>The outer shape of the zone.</p>"},{"location":"api/SparkyStudios/Zone/#function-details","title":"Function Details","text":""},{"location":"api/SparkyStudios/Zone/#getdirection","title":"GetDirection","text":"<p>[[nodiscard]] AmVec3 GetDirection() const</p> <p>Get the direction vector of the zone.</p> Return The direction vector."},{"location":"api/SparkyStudios/Zone/#getfactor","title":"GetFactor","text":"<p>[[nodiscard]] virtual AmReal32 GetFactor(const Entity&amp; entity)</p> <p>Gets the factor (a value in the range [0, 1]) according to the position          * of the given entity in the zone.</p> Parameter <code>entity</code> The entity to get the factor for. Return The factor. <p>[[nodiscard]] virtual AmReal32 GetFactor(const Listener&amp; listener)</p> <p>Gets the factor (a value in the range [0, 1]) according to the position          * of the given listener in the zone.</p> Parameter <code>listener</code> The listener to get the factor for. Return The factor. <p>[[nodiscard]] virtual AmReal32 GetFactor(const AmVec3&amp; position) = 0</p> <p>Gets the factor (a value in the range [0, 1]) according to the given          * position in the zone.</p> Parameter <code>position</code> The position in the zone to get the factor for. Return The factor."},{"location":"api/SparkyStudios/Zone/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the current location of this zone.</p> Return The current location of this zone."},{"location":"api/SparkyStudios/Zone/#getorientation","title":"GetOrientation","text":"<p>[[nodiscard]] const Orientation&amp; GetOrientation() const</p> <p>Gets the orientation of this zone.</p> Return The orientation of this zone."},{"location":"api/SparkyStudios/Zone/#getup","title":"GetUp","text":"<p>[[nodiscard]] AmVec3 GetUp() const</p> <p>Get the up vector of the zone.</p> Return The up vector."},{"location":"api/SparkyStudios/Zone/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location)</p> <p>Sets the location of this zone in the 3D environment.</p> Parameter <code>location</code> The zone location."},{"location":"api/SparkyStudios/Zone/#setorientation","title":"SetOrientation","text":"<p>void SetOrientation(const Orientation&amp; orientation)</p> <p>Sets the orientation of this zone.</p> Parameter <code>orientation</code> The new orientation."},{"location":"api/assets/","title":"Assets","text":"<p>Assets API</p>"},{"location":"api/assets/#types","title":"Types","text":"Name Description Asset Amplitude Asset."},{"location":"api/assets/Asset/","title":"Asset","text":"<p>template&lt;typename Id&gt; class  Asset</p> <p>Amplitude Asset.</p> <p>This is the base class for all Amplitude assets. An Amplitude asset is a <code>.json</code> file with a specific format (definition) specified by the corresponding asset's flatbuffer schema.</p> Template parameter <code>Id</code> The type of the asset id."},{"location":"api/assets/Asset/#functions","title":"Functions","text":"Name Description ~Asset Destroys the asset and all related resources. GetId Returns the unique ID of this asset. GetName Gets the name of this asset."},{"location":"api/assets/Asset/#function-details","title":"Function Details","text":""},{"location":"api/assets/Asset/#getid","title":"GetId","text":"<p>[[nodiscard]] virtual Id GetId() const = 0</p> <p>Returns the unique ID of this asset.</p> Return The asset unique ID."},{"location":"api/assets/Asset/#getname","title":"GetName","text":"<p>[[nodiscard]] virtual const AmString&amp; GetName() const = 0</p> <p>Gets the name of this asset.</p> Return The asset name."},{"location":"api/assets/Asset/#asset_1","title":"~Asset","text":"<p>virtual ~Asset() = default</p> <p>Destroys the asset and all related resources.</p>"},{"location":"api/core/","title":"Core","text":"<p>Core functionalities of the SDK</p>"},{"location":"api/core/#types","title":"Types","text":"Name Description AmAlignedReal32Buffer Class that handles aligned allocations to support vectorized operations. AudioBuffer Represents an audio buffer containing multiple channels. AudioBufferChannel Represents a view to a single channel in an <code>AudioBuffer</code>. HRIRSphere A 3D sphere of HRIR data. HRIRSphereDatasetModel The model of the HRIR sphere dataset. HRIRSphereFileHeaderDescription Provides metadata about an HRIR sphere file. HRIRSphereVertex A vertex of the HRIR sphere. SoundFormat Describe the format of an audio sample. Version A structure containing the version number of the library. Version Returns the version. eAudioSampleFormat Enumerates the list of possible sample formats handled by Amplitude. eErrorCode Enumerates the list of possible errors encountered by the library. eHRIRSphereSamplingMode Defines how the HRIR sphere is sampled when doing Ambisonics binauralization. ePanningMode Enumerates the list of available panning modes. eSpatialization Enumerates the list of available spatialization modes."},{"location":"api/core/#macros","title":"Macros","text":"Name Description AM_CALLBACK Declare a callback function type AM_UNUSED Helps to avoid compiler warnings about unused values."},{"location":"api/core/#variables","title":"Variables","text":"Name Description kAm51SurroundChannelCount The number of channels in a 5.1 surround audio source. kAm71SurroundChannelCount The number of channels in a 7.1 surround audio source. kAmAirAbsorptionBandCount The number of air absorption bands for attenuation models. kAmFirstOrderAmbisonicChannelCount The number of channels in first-order ambisonic source. kAmFixedPointBits The number of bits to shift when processing audio data with floating point values. kAmFixedPointMask Used to mask the bits when processing audio data with fixed-point values. kAmFixedPointUnit The unit value for a 32-bit fixed-point audio sample.. kAmInvalidObjectId Invalid Amplitude object ID. kAmMasterBusId Specifies the value of the \"master\" bus ID. kAmMaxSupportedAmbisonicOrder The maximum supported ambisonic order. kAmMaxSupportedChannelCount The maximum supported channel count for an ambisonic source. kAmMaxSupportedFrameCount The maximum number of frames that can be processed at once. kAmMonoChannelCount The number of channels in a mono audio source. kAmRoomSurfaceCount The number of surfaces in a room. kAmSecond The number of milliseconds in one second. kAmSecondOrderAmbisonicChannelCount The number of channels in second-order ambisonic source. kAmStereoChannelCount The number of channels in a stereo audio source. kAmThirdOrderAmbisonicChannelCount The number of channels in third-order ambisonic source. kEpsilon Minimum value where values lower than this are considered to be 0. kMinFadeDuration The minimum fade duration in milliseconds."},{"location":"api/core/#macro-details","title":"Macro Details","text":""},{"location":"api/core/#am_callback","title":"AM_CALLBACK","text":"<p>#define AM_CALLBACK(type, name)</p> <p>Declare a callback function type</p> Parameter <code>_type_</code> Return type of the function Parameter <code>_name_</code> Name of the function <p>Note</p> <p>This must be followed by the parentheses containing the function arguments declaration</p>"},{"location":"api/core/#am_unused","title":"AM_UNUSED","text":"<p>#define AM_UNUSED(x)</p> <p>Helps to avoid compiler warnings about unused values.</p> Parameter <code>x</code> The statement where the return value is not used."},{"location":"api/core/#variable-details","title":"Variable Details","text":""},{"location":"api/core/#kam51surroundchannelcount","title":"kAm51SurroundChannelCount","text":"<p>constexpr AmSize kAm51SurroundChannelCount</p> <p>The number of channels in a 5.1 surround audio source.</p>"},{"location":"api/core/#kam71surroundchannelcount","title":"kAm71SurroundChannelCount","text":"<p>constexpr AmSize kAm71SurroundChannelCount</p> <p>The number of channels in a 7.1 surround audio source.</p>"},{"location":"api/core/#kamairabsorptionbandcount","title":"kAmAirAbsorptionBandCount","text":"<p>constexpr AmUInt32 kAmAirAbsorptionBandCount</p> <p>The number of air absorption bands for attenuation models.</p>"},{"location":"api/core/#kamfirstorderambisonicchannelcount","title":"kAmFirstOrderAmbisonicChannelCount","text":"<p>constexpr AmSize kAmFirstOrderAmbisonicChannelCount</p> <p>The number of channels in first-order ambisonic source.</p>"},{"location":"api/core/#kamfixedpointbits","title":"kAmFixedPointBits","text":"<p>constexpr AmInt32 kAmFixedPointBits</p> <p>The number of bits to shift when processing audio data with floating point values.</p>"},{"location":"api/core/#kamfixedpointmask","title":"kAmFixedPointMask","text":"<p>constexpr AmInt32 kAmFixedPointMask</p> <p>Used to mask the bits when processing audio data with fixed-point values.</p>"},{"location":"api/core/#kamfixedpointunit","title":"kAmFixedPointUnit","text":"<p>constexpr AmInt32 kAmFixedPointUnit</p> <p>The unit value for a 32-bit fixed-point audio sample..</p>"},{"location":"api/core/#kaminvalidobjectid","title":"kAmInvalidObjectId","text":"<p>constexpr AmObjectID kAmInvalidObjectId</p> <p>Invalid Amplitude object ID.</p>"},{"location":"api/core/#kammasterbusid","title":"kAmMasterBusId","text":"<p>constexpr AmBusID kAmMasterBusId</p> <p>Specifies the value of the \"master\" bus ID.</p>"},{"location":"api/core/#kammaxsupportedambisonicorder","title":"kAmMaxSupportedAmbisonicOrder","text":"<p>constexpr AmUInt32 kAmMaxSupportedAmbisonicOrder</p> <p>The maximum supported ambisonic order.</p>"},{"location":"api/core/#kammaxsupportedchannelcount","title":"kAmMaxSupportedChannelCount","text":"<p>constexpr AmUInt32 kAmMaxSupportedChannelCount</p> <p>The maximum supported channel count for an ambisonic source.</p>"},{"location":"api/core/#kammaxsupportedframecount","title":"kAmMaxSupportedFrameCount","text":"<p>constexpr AmUInt64 kAmMaxSupportedFrameCount</p> <p>The maximum number of frames that can be processed at once.</p>"},{"location":"api/core/#kammonochannelcount","title":"kAmMonoChannelCount","text":"<p>constexpr AmSize kAmMonoChannelCount</p> <p>The number of channels in a mono audio source.</p>"},{"location":"api/core/#kamroomsurfacecount","title":"kAmRoomSurfaceCount","text":"<p>constexpr AmSize kAmRoomSurfaceCount</p> <p>The number of surfaces in a room.</p> <p>Warning</p> <p>Only cube-shaped rooms are supported.</p>"},{"location":"api/core/#kamsecond","title":"kAmSecond","text":"<p>constexpr AmTime kAmSecond</p> <p>The number of milliseconds in one second.</p>"},{"location":"api/core/#kamsecondorderambisonicchannelcount","title":"kAmSecondOrderAmbisonicChannelCount","text":"<p>constexpr AmSize kAmSecondOrderAmbisonicChannelCount</p> <p>The number of channels in second-order ambisonic source.</p>"},{"location":"api/core/#kamstereochannelcount","title":"kAmStereoChannelCount","text":"<p>constexpr AmSize kAmStereoChannelCount</p> <p>The number of channels in a stereo audio source.</p>"},{"location":"api/core/#kamthirdorderambisonicchannelcount","title":"kAmThirdOrderAmbisonicChannelCount","text":"<p>constexpr AmSize kAmThirdOrderAmbisonicChannelCount</p> <p>The number of channels in third-order ambisonic source.</p>"},{"location":"api/core/#kepsilon","title":"kEpsilon","text":"<p>constexpr AmReal32 kEpsilon</p> <p>Minimum value where values lower than this are considered to be 0.</p>"},{"location":"api/core/#kminfadeduration","title":"kMinFadeDuration","text":"<p>constexpr AmTime kMinFadeDuration</p> <p>The minimum fade duration in milliseconds.</p>"},{"location":"api/core/AmAlignedReal32Buffer/","title":"AmAlignedReal32Buffer","text":"<p>class  AmAlignedReal32Buffer</p> <p>Class that handles aligned allocations to support vectorized operations.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#operators","title":"Operators","text":"Name Description operator[] Returns a reference to the float at the specified index. operator[] Returns a const reference to the float at the specified index."},{"location":"api/core/AmAlignedReal32Buffer/#functions","title":"Functions","text":"Name Description Init Allocates and align buffer. Clear Clears all data. Release Releases the allocated buffer. GetSize Gets the size of the buffer. GetBuffer Gets the current aligned pointer. GetPointer Gets the raw allocated pointer. CopyFrom Copies data from another buffer. Resize Resizes the buffer to the specified size. Swap Swaps two buffers."},{"location":"api/core/AmAlignedReal32Buffer/#operator-details","title":"Operator Details","text":""},{"location":"api/core/AmAlignedReal32Buffer/#operator","title":"operator[]","text":"<p>AmReal32&amp; operator</p> <p>Returns a reference to the float at the specified index.</p> Parameter <code>index</code> The index of the float to retrieve. Return The reference to the float at the specified index. <p>const AmReal32&amp; operator const</p> <p>Returns a const reference to the float at the specified index.</p> Parameter <code>index</code> The index of the float to retrieve. Return The const reference to the float at the specified index."},{"location":"api/core/AmAlignedReal32Buffer/#function-details","title":"Function Details","text":""},{"location":"api/core/AmAlignedReal32Buffer/#clear","title":"Clear","text":"<p>void Clear() const</p> <p>Clears all data.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#copyfrom","title":"CopyFrom","text":"<p>void CopyFrom(const AmAlignedReal32Buffer&amp; other) const</p> <p>Copies data from another buffer.</p> Parameter <code>other</code> The other buffer to copy data from."},{"location":"api/core/AmAlignedReal32Buffer/#getbuffer","title":"GetBuffer","text":"<p>[[nodiscard]] inline AmReal32* GetBuffer() const</p> <p>Gets the current aligned pointer.</p> Return The pointer the float buffer"},{"location":"api/core/AmAlignedReal32Buffer/#getpointer","title":"GetPointer","text":"<p>[[nodiscard]] inline AmUInt8Buffer GetPointer() const</p> <p>Gets the raw allocated pointer.</p> Return The pointer to the raw allocated memory."},{"location":"api/core/AmAlignedReal32Buffer/#getsize","title":"GetSize","text":"<p>[[nodiscard]] inline AmUInt32 GetSize() const</p> <p>Gets the size of the buffer.</p> Return The number of float values stored in the buffer."},{"location":"api/core/AmAlignedReal32Buffer/#init","title":"Init","text":"<p>AmResult Init(AmUInt32 size, bool clear = true)</p> <p>Allocates and align buffer.</p> Parameter <code>size</code> The buffer size. Parameter <code>clear</code> Whether to clear the buffer. Return An <code>AM_ERROR</code> value indicating if the allocation was successful or not."},{"location":"api/core/AmAlignedReal32Buffer/#release","title":"Release","text":"<p>void Release()</p> <p>Releases the allocated buffer.</p>"},{"location":"api/core/AmAlignedReal32Buffer/#resize","title":"Resize","text":"<p>void Resize(AmUInt32 size, bool clear = true)</p> <p>Resizes the buffer to the specified size.</p> Parameter <code>size</code> The new size of the buffer. Parameter <code>clear</code> Whether to clear the buffer after resize. If <code>true</code>, the buffer will be cleared even if the new size equals the old size."},{"location":"api/core/AmAlignedReal32Buffer/#swap","title":"Swap","text":"<p>static void Swap(AmAlignedReal32Buffer&amp; a, AmAlignedReal32Buffer&amp; b)</p> <p>Swaps two buffers.</p> Parameter <code>a</code> The first buffer. Parameter <code>b</code> The second buffer."},{"location":"api/core/AudioBuffer/","title":"AudioBuffer","text":"<p>class  AudioBuffer</p> <p>Represents an audio buffer containing multiple channels.</p> <p>An <code>AudioBuffer</code> is a de-interleaved memory storage used to store and manipulate audio data, such as audio samples or Ambisonics sound fields, in a flexible and efficient manner. Accessing a channel data will return an <code>AudioBufferChannel</code> object, which is a view to the memory range storing that channel.</p> See AudioBufferChannel"},{"location":"api/core/AudioBuffer/#operators","title":"Operators","text":"Name Description operator[] Gets the <code>AudioBufferChannel</code> at the specified index. operator[] Gets the <code>AudioBufferChannel</code> at the specified index. operator= Copies the audio buffer data from the provided <code>AudioBuffer</code>. operator+= Accumulates the audio buffer data from the provided <code>AudioBuffer</code>. operator-= Subtracts the audio buffer data from the provided <code>AudioBuffer</code>. operator*= Point-wise multiplies the audio buffer data with the provided <code>AudioBuffer</code>. operator*= Point-wise multiplies this channel with the provided scalar."},{"location":"api/core/AudioBuffer/#functions","title":"Functions","text":"Name Description Copy Copies the given number of frames from the source buffer to the destination buffer. AudioBuffer Creates an empty audio buffer. AudioBuffer Creates an audio buffer with the specified number of frames and channels. AudioBuffer Explicitly deletes the audio buffer copy to avoid unintended usage. AudioBuffer Moves the given audio buffer data in this one. ~AudioBuffer Destroys the audio buffer data and release allocated memory. IsEmpty Check if the audio buffer is empty. GetFrameCount Gets the number of frames in the buffer. GetChannelCount Gets the number of channels in the buffer. Clear Sets the entire audio buffer data to zero. GetData Gets the wrapped audio buffer data. GetChannel Gets the <code>AudioBufferChannel</code> at the specified index. GetChannel Gets the <code>AudioBufferChannel</code> at the specified index. Clone Clones the audio buffer and returns a new instance."},{"location":"api/core/AudioBuffer/#operator-details","title":"Operator Details","text":""},{"location":"api/core/AudioBuffer/#operator","title":"operator*=","text":"<p>AudioBuffer&amp; operator*=(const AudioBuffer&amp; buffer)</p> <p>Point-wise multiplies the audio buffer data with the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The buffer to multiply with this one. Return This instance with the multiplied audio buffer data. <p>AudioBuffer&amp; operator*=(AmReal32 scalar)</p> <p>Point-wise multiplies this channel with the provided scalar.</p> Parameter <code>scalar</code> The scalar to multiply with. Return A reference to the modified channel."},{"location":"api/core/AudioBuffer/#operator_1","title":"operator+=","text":"<p>AudioBuffer&amp; operator+=(const AudioBuffer&amp; buffer)</p> <p>Accumulates the audio buffer data from the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The buffer to add in this one. Return This instance with the added audio buffer data."},{"location":"api/core/AudioBuffer/#operator-","title":"operator-=","text":"<p>AudioBuffer&amp; operator-=(const AudioBuffer&amp; buffer)</p> <p>Subtracts the audio buffer data from the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The buffer to subtract from this one. Return This instance with the subtracted audio buffer data."},{"location":"api/core/AudioBuffer/#operator_2","title":"operator=","text":"<p>AudioBuffer&amp; operator=(const AudioBuffer&amp; buffer)</p> <p>Copies the audio buffer data from the provided <code>AudioBuffer</code>.</p> Parameter <code>buffer</code> The other audio buffer to copy. Return This instance with the copied audio buffer data."},{"location":"api/core/AudioBuffer/#operator_3","title":"operator[]","text":"<p>AudioBufferChannel&amp; operator</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index. <p>[[nodiscard]] const AudioBufferChannel&amp; operator const</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index."},{"location":"api/core/AudioBuffer/#function-details","title":"Function Details","text":""},{"location":"api/core/AudioBuffer/#audiobuffer_1","title":"AudioBuffer","text":"<p>AudioBuffer()</p> <p>Creates an empty audio buffer.</p> <p>AudioBuffer(AmSize numFrames, AmSize numChannels)</p> <p>Creates an audio buffer with the specified number of frames and channels.</p> Parameter <code>numFrames</code> The number of frames in the buffer. Parameter <code>numChannels</code> The number of channels in the buffer. <p>AudioBuffer(const AudioBuffer&amp; buffer) = delete</p> <p>Explicitly deletes the audio buffer copy to avoid unintended usage.</p> Parameter <code>buffer</code> The other audio buffer to copy. <p>Note</p> <p>Use the assignment operator to copy the audio buffer.</p> <p>AudioBuffer(AudioBuffer&amp;&amp; buffer) noexcept</p> <p>Moves the given audio buffer data in this one.</p> Parameter <code>buffer</code> The other audio buffer to move."},{"location":"api/core/AudioBuffer/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Sets the entire audio buffer data to zero.</p>"},{"location":"api/core/AudioBuffer/#clone","title":"Clone","text":"<p>AudioBuffer Clone() const</p> <p>Clones the audio buffer and returns a new instance.</p> Return A new instance with a cloned copy of the audio buffer data."},{"location":"api/core/AudioBuffer/#copy","title":"Copy","text":"<p>static void Copy( const AudioBuffer&amp; source, AmSize sourceOffset, AudioBuffer&amp; destination, AmSize destinationOffset, AmSize numFrames)</p> <p>Copies the given number of frames from the source buffer to the destination buffer.</p> Parameter <code>source</code> The source buffer to copy. Parameter <code>sourceOffset</code> The offset in the source buffer. Parameter <code>destination</code> The destination buffer to copy to. Parameter <code>destinationOffset</code> The offset in the destination buffer. Parameter <code>numFrames</code> The number of frames to copy."},{"location":"api/core/AudioBuffer/#getchannel","title":"GetChannel","text":"<p>AudioBufferChannel&amp; GetChannel(AmSize index)</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index. <p>[[nodiscard]] const AudioBufferChannel&amp; GetChannel(AmSize index) const</p> <p>Gets the <code>AudioBufferChannel</code> at the specified index.</p> Parameter <code>index</code> The channel index. Return The <code>AudioBufferChannel</code> at the specified index."},{"location":"api/core/AudioBuffer/#getchannelcount","title":"GetChannelCount","text":"<p>[[nodiscard]] AmSize GetChannelCount() const</p> <p>Gets the number of channels in the buffer.</p> Return The number of channels in the buffer."},{"location":"api/core/AudioBuffer/#getdata","title":"GetData","text":"<p>[[nodiscard]] const AmAlignedReal32Buffer&amp; GetData() const</p> <p>Gets the wrapped audio buffer data.</p> Return The wrapped audio buffer data."},{"location":"api/core/AudioBuffer/#getframecount","title":"GetFrameCount","text":"<p>[[nodiscard]] AmSize GetFrameCount() const</p> <p>Gets the number of frames in the buffer.</p> Return The number of frames in the buffer."},{"location":"api/core/AudioBuffer/#isempty","title":"IsEmpty","text":"<p>[[nodiscard]] bool IsEmpty() const</p> <p>Check if the audio buffer is empty.</p> Return <code>true</code> if the audio buffer is empty, <code>false</code> otherwise."},{"location":"api/core/AudioBuffer/#audiobuffer_2","title":"~AudioBuffer","text":"<p>~AudioBuffer()</p> <p>Destroys the audio buffer data and release allocated memory.</p>"},{"location":"api/core/AudioBufferChannel/","title":"AudioBufferChannel","text":"<p>class  AudioBufferChannel</p> <p>Represents a view to a single channel in an <code>AudioBuffer</code>.</p> See AudioBuffer"},{"location":"api/core/AudioBufferChannel/#operators","title":"Operators","text":"Name Description operator[] Gets the audio sample at the specified index. operator[] Gets the audio sample at the specified index. operator= Sets the entire channel data from the provided vector. operator= Sets the entire channel data from the provided <code>AudioBufferChannel</code>. operator+= Performs point-wise addition of this channel with the provided <code>AudioBufferChannel</code>. operator-= Performs point-wise subtraction of this channel with the provided <code>AudioBufferChannel</code>. operator*= Point-wise multiplies this channel with the provided <code>AudioBufferChannel</code>. operator*= Point-wise multiplies this channel with the provided scalar."},{"location":"api/core/AudioBufferChannel/#functions","title":"Functions","text":"Name Description size Gets the size of the buffer. begin Returns a float pointer to the begin of the channel data. begin Returns a const float pointer to the begin of the channel data. end Returns a float pointer to the end of the channel data. end Returns a const float pointer to the end of the channel data. clear Clears the channel data with zero. enabled Checks if the channel is enabled."},{"location":"api/core/AudioBufferChannel/#operator-details","title":"Operator Details","text":""},{"location":"api/core/AudioBufferChannel/#operator","title":"operator*=","text":"<p>AudioBufferChannel&amp; operator*=(const AudioBufferChannel&amp; channel)</p> <p>Point-wise multiplies this channel with the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to multiply with. Return A reference to the modified channel. <p>AudioBufferChannel&amp; operator*=(AmReal32 scalar)</p> <p>Point-wise multiplies this channel with the provided scalar.</p> Parameter <code>scalar</code> The scalar to multiply with. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator_1","title":"operator+=","text":"<p>AudioBufferChannel&amp; operator+=(const AudioBufferChannel&amp; channel)</p> <p>Performs point-wise addition of this channel with the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to add. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator-","title":"operator-=","text":"<p>AudioBufferChannel&amp; operator-=(const AudioBufferChannel&amp; channel)</p> <p>Performs point-wise subtraction of this channel with the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to subtract. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator_2","title":"operator=","text":"<p>AudioBufferChannel&amp; operator=(const std::vector&lt;AmReal32&gt;&amp; data)</p> <p>Sets the entire channel data from the provided vector.</p> Parameter <code>data</code> The vector containing the new channel data. Return A reference to the modified channel. <p>AudioBufferChannel&amp; operator=(const AudioBufferChannel&amp; channel)</p> <p>Sets the entire channel data from the provided <code>AudioBufferChannel</code>.</p> Parameter <code>channel</code> The <code>AudioBufferChannel</code> to copy the data from. Return A reference to the modified channel."},{"location":"api/core/AudioBufferChannel/#operator_3","title":"operator[]","text":"<p>AmReal32&amp; operator</p> <p>Gets the audio sample at the specified index.</p> Parameter <code>index</code> The audio sample index. Return The audio sample at the specified index. <p>[[nodiscard]] const AmReal32&amp; operator const</p> <p>Gets the audio sample at the specified index.</p> Parameter <code>index</code> The audio sample index. Return The audio sample at the specified index."},{"location":"api/core/AudioBufferChannel/#function-details","title":"Function Details","text":""},{"location":"api/core/AudioBufferChannel/#begin","title":"begin","text":"<p>AmReal32* begin()</p> <p>Returns a float pointer to the begin of the channel data.</p> Return A float pointer to the begin of the channel data. <p>[[nodiscard]] const AmReal32* begin() const</p> <p>Returns a const float pointer to the begin of the channel data.</p> Return A const float pointer to the begin of the channel data."},{"location":"api/core/AudioBufferChannel/#clear","title":"clear","text":"<p>void clear()</p> <p>Clears the channel data with zero.</p>"},{"location":"api/core/AudioBufferChannel/#enabled","title":"enabled","text":"<p>[[nodiscard]] bool enabled() const</p> <p>Checks if the channel is enabled.</p> Return <code>true</code> if the channel is enabled, <code>false</code> otherwise."},{"location":"api/core/AudioBufferChannel/#end","title":"end","text":"<p>AmReal32* end()</p> <p>Returns a float pointer to the end of the channel data.</p> Return A float pointer to the end of the channel data. <p>[[nodiscard]] const AmReal32* end() const</p> <p>Returns a const float pointer to the end of the channel data.</p> Return A const float pointer to the end of the channel data."},{"location":"api/core/AudioBufferChannel/#size","title":"size","text":"<p>[[nodiscard]] AmSize size() const</p> <p>Gets the size of the buffer.</p> Return The size of the buffer."},{"location":"api/core/HRIRSphere/","title":"HRIRSphere","text":"<p>class  HRIRSphere : public Resource</p> <p>A 3D sphere of HRIR data.</p>"},{"location":"api/core/HRIRSphere/#functions","title":"Functions","text":"Name Description SetSamplingMode Sets the sampling mode for the HRIR sphere. GetSamplingMode Gets the sampling mode for the HRIR sphere. Sample Samples the HRIR sphere for the given direction."},{"location":"api/core/HRIRSphere/#function-details","title":"Function Details","text":""},{"location":"api/core/HRIRSphere/#getsamplingmode","title":"GetSamplingMode","text":"<p>[[nodiscard]] virtual eHRIRSphereSamplingMode GetSamplingMode() const = 0</p> <p>Gets the sampling mode for the HRIR sphere.</p>"},{"location":"api/core/HRIRSphere/#sample","title":"Sample","text":"<p>virtual void Sample(const AmVec3&amp; direction, AmReal32* leftHRIR, AmReal32* rightHRIR) const = 0</p> <p>Samples the HRIR sphere for the given direction.</p> Parameter <code>direction</code> The sound to listener direction. Parameter <code>leftHRIR</code> The left HRIR data. Parameter <code>rightHRIR</code> The right HRIR data."},{"location":"api/core/HRIRSphere/#setsamplingmode","title":"SetSamplingMode","text":"<p>virtual void SetSamplingMode(eHRIRSphereSamplingMode mode) = 0</p> <p>Sets the sampling mode for the HRIR sphere.</p> Parameter <code>mode</code> The sampling mode to use."},{"location":"api/core/HRIRSphereDatasetModel/","title":"HRIRSphereDatasetModel","text":"<p>enum HRIRSphereDatasetModel : AmUInt8</p> <p>The model of the HRIR sphere dataset.</p> eHRIRSphereDatasetModel_IRCAM = 0 The HRIR sphere uses data from the IRCAM (LISTEN) dataset. (http://recherche.ircam.fr/equipes/salles/listen/download.html) eHRIRSphereDatasetModel_MIT = 1 The HRIR sphere uses data from the MIT (KEMAR) dataset. (http://sound.media.mit.edu/resources/KEMAR.html). eHRIRSphereDatasetModel_SADIE = 2 The HRIR sphere uses data from the SADIE II dataset. (https://www.york.ac.uk/sadie-project/database.html). eHRIRSphereDatasetModel_SOFA = 3 The HRIR sphere uses data from a SOFA (Spatially Oriented Format for Acoustics) file. (https://www.sofaconventions.org/). eHRIRSphereDatasetModel_Invalid Invalid HRIR sphere dataset model."},{"location":"api/core/HRIRSphereFileHeaderDescription/","title":"HRIRSphereFileHeaderDescription","text":"<p>struct HRIRSphereFileHeaderDescription</p> <p>Provides metadata about an HRIR sphere file.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#variables","title":"Variables","text":"Name Description m_Version HRIR sphere file header tag. Should be always equal to \"AMIR\". HRIR sphere file version. Allows backward compatibility. m_SampleRate Sample rate used to encode HRIR data. m_IRLength The length of the HRIR data in number of samples. m_VertexCount The number of vertices in the HRIR sphere. m_IndexCount The number of indices in the HRIR sphere."},{"location":"api/core/HRIRSphereFileHeaderDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_irlength","title":"m_IRLength","text":"<p>AmUInt32 m_IRLength</p> <p>The length of the HRIR data in number of samples.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_indexcount","title":"m_IndexCount","text":"<p>AmUInt32 m_IndexCount</p> <p>The number of indices in the HRIR sphere.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_samplerate","title":"m_SampleRate","text":"<p>AmUInt32 m_SampleRate</p> <p>Sample rate used to encode HRIR data.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_version","title":"m_Version","text":"<p>AmUInt16 m_Version</p> <p>HRIR sphere file header tag. Should be always equal to \"AMIR\".</p> <p>HRIR sphere file version. Allows backward compatibility.</p>"},{"location":"api/core/HRIRSphereFileHeaderDescription/#m_vertexcount","title":"m_VertexCount","text":"<p>AmUInt32 m_VertexCount</p> <p>The number of vertices in the HRIR sphere.</p>"},{"location":"api/core/HRIRSphereVertex/","title":"HRIRSphereVertex","text":"<p>struct HRIRSphereVertex</p> <p>A vertex of the HRIR sphere.</p>"},{"location":"api/core/HRIRSphereVertex/#variables","title":"Variables","text":"Name Description m_Position The cartesian position of the vertex. m_LeftIR The left HRIR data. m_RightIR The right HRIR data. m_LeftDelay The delay for the left ear. m_RightDelay The delay for the right ear."},{"location":"api/core/HRIRSphereVertex/#variable-details","title":"Variable Details","text":""},{"location":"api/core/HRIRSphereVertex/#m_leftdelay","title":"m_LeftDelay","text":"<p>AmReal32 m_LeftDelay</p> <p>The delay for the left ear.</p>"},{"location":"api/core/HRIRSphereVertex/#m_leftir","title":"m_LeftIR","text":"<p>std::vector&lt;AmReal32&gt; m_LeftIR</p> <p>The left HRIR data.</p>"},{"location":"api/core/HRIRSphereVertex/#m_position","title":"m_Position","text":"<p>AmVec3 m_Position</p> <p>The cartesian position of the vertex.</p>"},{"location":"api/core/HRIRSphereVertex/#m_rightdelay","title":"m_RightDelay","text":"<p>AmReal32 m_RightDelay</p> <p>The delay for the right ear.</p>"},{"location":"api/core/HRIRSphereVertex/#m_rightir","title":"m_RightIR","text":"<p>std::vector&lt;AmReal32&gt; m_RightIR</p> <p>The right HRIR data.</p>"},{"location":"api/core/SoundFormat/","title":"SoundFormat","text":"<p>struct  SoundFormat</p> <p>Describe the format of an audio sample.</p> <p>This data structure is mainly filled by a <code>Codec</code> during the initialization time.</p>"},{"location":"api/core/SoundFormat/#functions","title":"Functions","text":"Name Description SetAll Sets all the properties of the sound format. GetSampleRate Get the sample rate. GetNumChannels Get the number of channels. GetBitsPerSample Get the bits per sample. GetFramesCount Get the number of frames. GetFrameSize Get the frame size. GetSampleType Get the sample type."},{"location":"api/core/SoundFormat/#function-details","title":"Function Details","text":""},{"location":"api/core/SoundFormat/#getbitspersample","title":"GetBitsPerSample","text":"<p>[[nodiscard]] inline AmUInt32 GetBitsPerSample() const</p> <p>Get the bits per sample.</p> Return The number of bits per sample."},{"location":"api/core/SoundFormat/#getframesize","title":"GetFrameSize","text":"<p>[[nodiscard]] inline AmUInt32 GetFrameSize() const</p> <p>Get the frame size.</p> Return The size of each audio frame in bytes."},{"location":"api/core/SoundFormat/#getframescount","title":"GetFramesCount","text":"<p>[[nodiscard]] inline AmUInt64 GetFramesCount() const</p> <p>Get the number of frames.</p> Return The total number of audio frames."},{"location":"api/core/SoundFormat/#getnumchannels","title":"GetNumChannels","text":"<p>[[nodiscard]] inline AmUInt16 GetNumChannels() const</p> <p>Get the number of channels.</p> Return The number of audio channels."},{"location":"api/core/SoundFormat/#getsamplerate","title":"GetSampleRate","text":"<p>[[nodiscard]] inline AmUInt32 GetSampleRate() const</p> <p>Get the sample rate.</p> Return The sample rate of the audio."},{"location":"api/core/SoundFormat/#getsampletype","title":"GetSampleType","text":"<p>[[nodiscard]] inline eAudioSampleFormat GetSampleType() const</p> <p>Get the sample type.</p> Return The type of audio sample."},{"location":"api/core/SoundFormat/#setall","title":"SetAll","text":"<p>void SetAll( AmUInt32 sampleRate, AmUInt16 numChannels, AmUInt32 bitsPerSample, AmUInt64 framesCount, AmUInt32 frameSize, eAudioSampleFormat sampleType)</p> <p>Sets all the properties of the sound format.</p> Parameter <code>sampleRate</code> The sample rate of the audio. Parameter <code>numChannels</code> The number of audio channels. Parameter <code>bitsPerSample</code> The number of bits per sample. Parameter <code>framesCount</code> The total number of audio frames. Parameter <code>frameSize</code> The size of each audio frame in bytes. Parameter <code>sampleType</code> The type of audio sample."},{"location":"api/core/Version/","title":"Version","text":"<p>struct Version</p> <p>A structure containing the version number of the library.</p>"},{"location":"api/core/Version/#variables","title":"Variables","text":"Name Description major Version number, updated only on major releases. minor Version number, updated only on point releases. revision Version number, updated for tiny releases (ex: Bug fixes). text Text string containing the name and version of the library."},{"location":"api/core/Version/#variable-details","title":"Variable Details","text":""},{"location":"api/core/Version/#major","title":"major","text":"<p>AmUInt8 major</p> <p>Version number, updated only on major releases.</p>"},{"location":"api/core/Version/#minor","title":"minor","text":"<p>AmUInt8 minor</p> <p>Version number, updated only on point releases.</p>"},{"location":"api/core/Version/#revision","title":"revision","text":"<p>AmUInt8 revision</p> <p>Version number, updated for tiny releases (ex: Bug fixes).</p>"},{"location":"api/core/Version/#text","title":"text","text":"<p>AmString text</p> <p>Text string containing the name and version of the library.</p>"},{"location":"api/core/eAudioSampleFormat/","title":"eAudioSampleFormat","text":"<p>enum eAudioSampleFormat : AmUInt8</p> <p>Enumerates the list of possible sample formats handled by Amplitude.</p> eAudioSampleFormat_Float32 32-bit floating-point sample eAudioSampleFormat_Unknown An unknown or unsupported format"},{"location":"api/core/eErrorCode/","title":"eErrorCode","text":"<p>enum eErrorCode : AmUInt8</p> <p>Enumerates the list of possible errors encountered by the library.</p> eErrorCode_Success = 0 No error eErrorCode_InvalidParameter = 1 Some parameter is invalid eErrorCode_FileNotFound = 2 File not found eErrorCode_FileLoadFailed = 3 File found, but could not be loaded eErrorCode_DllNotFound = 4 DLL not found, or wrong DLL eErrorCode_OutOfMemory = 5 Out of memory eErrorCode_NotImplemented = 6 Feature not implemented eErrorCode_Unknown = 7 Unknown error"},{"location":"api/core/eHRIRSphereSamplingMode/","title":"eHRIRSphereSamplingMode","text":"<p>enum eHRIRSphereSamplingMode : AmUInt8</p> <p>Defines how the HRIR sphere is sampled when doing Ambisonics binauralization.</p> eHRIRSphereSamplingMode_Bilinear = 0 Provides the most accurate binauralization, as the HRIR data are smoothly transitioned between sphere points. <p>See more info about bilinear sampling here.</p> eHRIRSphereSamplingMode_NearestNeighbor = 1 Provides a more efficient binauralization, as the HRIR data are interpolated using only the nearest neighbors."},{"location":"api/core/ePanningMode/","title":"ePanningMode","text":"<p>enum ePanningMode : AmUInt8</p> <p>Enumerates the list of available panning modes.</p> ePanningMode_Stereo = 0 2D stereo panning. This panning mode won't provide HRTF-related features. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 2 loudspeakers evenly arranged in front of the listener.</p> ePanningMode_BinauralLowQuality = 1 3D binaural panning using first-order HRTF. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 8 loudspeakers arranged in a cube configuration around the listener.</p> ePanningMode_BinauralMediumQuality = 2 3D binaural panning using second-order HRTF. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 12 loudspeakers arranged in a dodecahedral configuration (using faces of the dodecahedron).</p> ePanningMode_BinauralHighQuality = 3 3D binaural panning using third-order HRTF. <p>Note</p> <p>The Ambisonic decoder will use a virtual array of 26 loudspeakers arranged in a Lebedev grid. See: https://people.sc.fsu.edu/~jburkardt/m_src/sphere_lebedev_rule/sphere_lebedev_rule.html</p>"},{"location":"api/core/eSpatialization/","title":"eSpatialization","text":"<p>enum eSpatialization : AmUInt8</p> <p>Enumerates the list of available spatialization modes.</p> eSpatialization_None Disables spatialization. eSpatialization_Position Enables 2D (left-right) spatialization based on sound position. <p>Note</p> <p>This mode is available for every panning mode.</p> eSpatialization_PositionOrientation Enables 2D (left-right) spatialization based on sound position and orientation. <p>Note</p> <p>The sound instance using this spatialization mode needs to be attached to an <code>Entity</code>.</p> <p>Note</p> <p>This mode is available for every panning mode.</p> eSpatialization_HRTF Enables 3D spatialization using Head Related Transfer Functions. <p>Note</p> <p>This mode is only available for binaural panning modes.</p>"},{"location":"api/engine/","title":"Engine","text":"<p>Engine-specific functionalities</p>"},{"location":"api/engine/#types","title":"Types","text":"Name Description Bus An object representing one node in the tree of buses. Buses are used to adjust a set of channel gains in tandem. Channel An object that represents a single channel of audio. ChannelEvent Enumerates the events triggered by a <code>Channel</code> during playback. ChannelEventCallback A callback function for handling channel events. ChannelEventInfo The event info passed to the channel event listener. ChannelEventListener Channel Event listener. ChannelPlaybackState Enumerates the playback states for a <code>Channel</code>. Codec Audio file reader and writer. DeviceDescription The device description. DeviceNotification The possible device notification types. DeviceState The device state. Driver Base class for audio device driver implementations. Engine The Amplitude Engine. PlaybackOutputChannels The playback output channel layout of the device. PlaybackOutputFormat The playback output format of the device."},{"location":"api/engine/#macros","title":"Macros","text":"Name Description AM_AUDIO_SAMPLE_MAX The maximum value for an audio sample. AM_AUDIO_SAMPLE_MIN The minimum value for an audio sample. AM_INVALID_HANDLE Define an invalid object handle. AM_IS_VALID_HANDLE Checks if a handle is valid"},{"location":"api/engine/#functions","title":"Functions","text":"Name Description CallDeviceNotificationCallback Calls the registered device notification callback. RegisterDeviceNotificationCallback The device notification callback.Registers a callback to listen to device state changes."},{"location":"api/engine/#macro-details","title":"Macro Details","text":""},{"location":"api/engine/#am_audio_sample_max","title":"AM_AUDIO_SAMPLE_MAX","text":"<p>#define AM_AUDIO_SAMPLE_MAX</p> <p>The maximum value for an audio sample.</p>"},{"location":"api/engine/#am_audio_sample_min","title":"AM_AUDIO_SAMPLE_MIN","text":"<p>#define AM_AUDIO_SAMPLE_MIN</p> <p>The minimum value for an audio sample.</p>"},{"location":"api/engine/#am_invalid_handle","title":"AM_INVALID_HANDLE","text":"<p>#define AM_INVALID_HANDLE</p> <p>Define an invalid object handle.</p>"},{"location":"api/engine/#am_is_valid_handle","title":"AM_IS_VALID_HANDLE","text":"<p>#define AM_IS_VALID_HANDLE(handle)</p> <p>Checks if a handle is valid</p> Parameter <code>handle</code> The handle to check Return <code>true</code> if the handle is valid, <code>false</code> otherwise."},{"location":"api/engine/#function-details","title":"Function Details","text":""},{"location":"api/engine/#calldevicenotificationcallback","title":"CallDeviceNotificationCallback","text":"<p>void CallDeviceNotificationCallback(DeviceNotification notification, const DeviceDescription&amp; device, Driver* driver)</p> <p>Calls the registered device notification callback.</p> Parameter <code>notification</code> The notification type. Parameter <code>device</code> The device description. Parameter <code>driver</code> The driver which triggered the device notification."},{"location":"api/engine/#registerdevicenotificationcallback","title":"RegisterDeviceNotificationCallback","text":"<p>void RegisterDeviceNotificationCallback(DeviceNotificationCallback callback)</p> <p>The device notification callback.</p> Parameter <code>notification</code> The notification type. Parameter <code>device</code> The device description. Parameter <code>driver</code> The driver which triggered the device notification. <p>Registers a callback to listen to device state changes.</p> Parameter <code>callback</code> The callback to register."},{"location":"api/engine/Bus/","title":"Bus","text":"<p>class  Bus</p> <p>An object representing one node in the tree of buses. Buses are used to adjust a set of channel gains in tandem.</p> <p>The <code>Bus</code> class is a lightweight reference to a <code>BusInternalState</code> object which is managed by the Engine. There is always at least one bus, the master bus, and any number of additional buses may be defined as well. Each bus can be thought as a node in the tree. The gain on a <code>Bus</code> is applied to all child buses as well.</p>"},{"location":"api/engine/Bus/#functions","title":"Functions","text":"Name Description Bus Creates an uninitialized <code>Bus</code>. Bus Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Bus</code>. Valid Checks whether this <code>Bus</code> has been initialized. GetId Gets the unique ID of this <code>Bus</code>. GetName Gets the name of this <code>Bus</code>. SetGain Sets the gain of this <code>Bus</code>. GetGain Returns the user specified gain on this <code>Bus</code>. FadeTo Fades to <code>gain</code> over <code>duration</code> milliseconds. GetFinalGain Returns the final calculated gain on this <code>Bus</code>. SetMute Sets the muted state of this <code>Bus</code>. IsMuted Returns whether this <code>Bus</code> is muted. GetState Returns the internal state of this <code>Bus</code>."},{"location":"api/engine/Bus/#function-details","title":"Function Details","text":""},{"location":"api/engine/Bus/#bus_1","title":"Bus","text":"<p>Bus()</p> <p>Creates an uninitialized <code>Bus</code>.</p> <p>An uninitialized Bus cannot set or get any of it's fields.</p> <p>explicit Bus(BusInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Bus/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Bus</code>.</p> <p>Note that this does not destroy the internal state it references, it just removes this reference to it.</p>"},{"location":"api/engine/Bus/#fadeto","title":"FadeTo","text":"<p>void FadeTo(AmReal32 gain, AmTime duration) const</p> <p>Fades to <code>gain</code> over <code>duration</code> milliseconds.</p> Parameter <code>gain</code> The gain value to fade to. Parameter <code>duration</code> The amount of time in milliseconds to take to reach the desired gain."},{"location":"api/engine/Bus/#getfinalgain","title":"GetFinalGain","text":"<p>[[nodiscard]] AmReal32 GetFinalGain() const</p> <p>Returns the final calculated gain on this <code>Bus</code>.</p> <p>Note</p> <p>The final gain of a bus is the product of the gain specified in the bus definition file, with the gain specified by the user, and with the final gain of the parent bus.</p> Return The final calculated gain."},{"location":"api/engine/Bus/#getgain","title":"GetGain","text":"<p>[[nodiscard]] AmReal32 GetGain() const</p> <p>Returns the user specified gain on this <code>Bus</code>.</p> Return The user specified gain."},{"location":"api/engine/Bus/#getid","title":"GetId","text":"<p>[[nodiscard]] AmBusID GetId() const</p> <p>Gets the unique ID of this <code>Bus</code>.</p> Return The bus unique ID."},{"location":"api/engine/Bus/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this <code>Bus</code>.</p> Return The bus name."},{"location":"api/engine/Bus/#getstate","title":"GetState","text":"<p>[[nodiscard]] BusInternalState* GetState() const</p> <p>Returns the internal state of this <code>Bus</code>.</p> <p>Warning</p> <p>This method is only for internal usage.</p> Return The bus internal state."},{"location":"api/engine/Bus/#ismuted","title":"IsMuted","text":"<p>[[nodiscard]] bool IsMuted() const</p> <p>Returns whether this <code>Bus</code> is muted.</p> Return <code>true</code> if this Bus is muted, <code>false</code> otherwise."},{"location":"api/engine/Bus/#setgain","title":"SetGain","text":"<p>void SetGain(AmReal32 gain) const</p> <p>Sets the gain of this <code>Bus</code>.</p> Parameter <code>gain</code> The new gain value."},{"location":"api/engine/Bus/#setmute","title":"SetMute","text":"<p>void SetMute(bool mute) const</p> <p>Sets the muted state of this <code>Bus</code>.</p> Parameter <code>mute</code> The muted state."},{"location":"api/engine/Bus/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Bus</code> has been initialized.</p> Return <code>true</code> if this <code>Bus</code> has been initialized."},{"location":"api/engine/Channel/","title":"Channel","text":"<p>class  Channel</p> <p>An object that represents a single channel of audio.</p> <p>The <code>Channel</code> class is a lightweight reference to a <code>ChannelInternalState</code> object which is managed by the Engine. Multiple channels may point to the same underlying data.</p>"},{"location":"api/engine/Channel/#functions","title":"Functions","text":"Name Description Channel Construct an uninitialized <code>Channel</code>. Channel Creates a wrapper instance over the provided state. Clear Uninitializes this <code>Channel</code>. Valid Checks whether this <code>Channel</code> has been initialized. GetId Gets the ID of this <code>Channel</code>. Playing Checks if the sound associated to this <code>Channel</code> is playing. Stop Stops the <code>Channel</code>. Pause Pauses the <code>Channel</code>. Resume Resumes the <code>Channel</code>. GetLocation Gets the location of this <code>Channel</code>. SetLocation Sets the location of this <code>Channel</code>. SetGain Sets the gain on this <code>Channel</code>. GetGain Returns the gain on this <code>Channel</code>. GetPlaybackState Returns the playback state of this <code>Channel</code>. GetEntity Returns the <code>Entity</code> associated with this <code>Channel</code>. GetListener Returns the <code>Listener</code> associated with this <code>Channel</code>. GetRoom Returns the <code>Room</code> associated with this <code>Channel</code>. GetState Returns the internal state of this Channel. On Registers a callback for a channel event."},{"location":"api/engine/Channel/#function-details","title":"Function Details","text":""},{"location":"api/engine/Channel/#channel_1","title":"Channel","text":"<p>Channel()</p> <p>Construct an uninitialized <code>Channel</code>.</p> <p>An uninitialized <code>Channel</code> cannot have its data set or queried.</p> <p>explicit Channel(ChannelInternalState* state)</p> <p>Creates a wrapper instance over the provided state.</p> Parameter <code>state</code> The internal state to wrap. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/Channel/#clear","title":"Clear","text":"<p>void Clear()</p> <p>Uninitializes this <code>Channel</code>.</p> <p>Note that this does not stop the audio or destroy the internal state it references, it just removes this reference to it. To stop the Channel, use <code>Channel::Stop()</code>.</p>"},{"location":"api/engine/Channel/#getentity","title":"GetEntity","text":"<p>[[nodiscard]] Entity GetEntity() const</p> <p>Returns the <code>Entity</code> associated with this <code>Channel</code>.</p> <p>Note</p> <p>If no <code>Entity</code> is associated with this <code>Channel</code>, this method will return an uninitialized <code>Entity</code> object. You should check if the entity is valid before using it.</p> Return The entity associated with this <code>Channel</code>. See Entity"},{"location":"api/engine/Channel/#getgain","title":"GetGain","text":"<p>[[nodiscard]] AmReal32 GetGain() const</p> <p>Returns the gain on this <code>Channel</code>.</p> Return The channel's gain."},{"location":"api/engine/Channel/#getid","title":"GetId","text":"<p>[[nodiscard]] AmUInt64 GetId() const</p> <p>Gets the ID of this <code>Channel</code>.</p> Return The ID of this <code>Channel</code>."},{"location":"api/engine/Channel/#getlistener","title":"GetListener","text":"<p>[[nodiscard]] Listener GetListener() const</p> <p>Returns the <code>Listener</code> associated with this <code>Channel</code>.</p> <p>Note</p> <p>If no <code>Listener</code> is associated with this <code>Channel</code>, this method will return an uninitialized <code>Listener</code> object. You should check if the listener is valid before using it.</p> Return The listener associated with this <code>Channel</code>. See Listener"},{"location":"api/engine/Channel/#getlocation","title":"GetLocation","text":"<p>[[nodiscard]] const AmVec3&amp; GetLocation() const</p> <p>Gets the location of this <code>Channel</code>.</p> <p>If the audio on this channel is not set to be Positional, this method will return an invalid location.</p> Return The location of this <code>Channel</code>."},{"location":"api/engine/Channel/#getplaybackstate","title":"GetPlaybackState","text":"<p>[[nodiscard]] ChannelPlaybackState GetPlaybackState() const</p> <p>Returns the playback state of this <code>Channel</code>.</p> Return A <code>ChannelPlaybackState</code> enumeration value representing the current state of the <code>Channel</code>."},{"location":"api/engine/Channel/#getroom","title":"GetRoom","text":"<p>[[nodiscard]] Room GetRoom() const</p> <p>Returns the <code>Room</code> associated with this <code>Channel</code>.</p> <p>Note</p> <p>If no <code>Room</code> is associated with this <code>Channel</code>, this method will return an uninitialized <code>Room</code> object. You should check if the room is valid before using it.</p> Return The room associated with this Channel."},{"location":"api/engine/Channel/#getstate","title":"GetState","text":"<p>[[nodiscard]] ChannelInternalState* GetState() const</p> <p>Returns the internal state of this Channel.</p> Return The internal state of this Channel."},{"location":"api/engine/Channel/#on","title":"On","text":"<p>void On(ChannelEvent event, ChannelEventCallback callback, void* userData = nullptr) const</p> <p>Registers a callback for a channel event.</p> Parameter <code>event</code> The channel event. Parameter <code>callback</code> The callback function. Parameter <code>userData</code> The user data to pass to the callback. See ChannelEvent See ChannelEventCallback"},{"location":"api/engine/Channel/#pause","title":"Pause","text":"<p>void Pause(AmTime duration = kMinFadeDuration) const</p> <p>Pauses the <code>Channel</code>.</p> <p>A paused channel may be resumed where it left off.</p> Parameter <code>duration</code> The fade out duration before to pause the channel."},{"location":"api/engine/Channel/#playing","title":"Playing","text":"<p>[[nodiscard]] bool Playing() const</p> <p>Checks if the sound associated to this <code>Channel</code> is playing.</p> Return Whether the channel is currently playing."},{"location":"api/engine/Channel/#resume","title":"Resume","text":"<p>void Resume(AmTime duration = kMinFadeDuration) const</p> <p>Resumes the <code>Channel</code>.</p> <p>If this channel was paused it will continue where it left off.</p> Parameter <code>duration</code> The fade in duration after resuming the channel."},{"location":"api/engine/Channel/#setgain","title":"SetGain","text":"<p>void SetGain(AmReal32 gain) const</p> <p>Sets the gain on this <code>Channel</code>.</p> Parameter <code>gain</code> The new gain value."},{"location":"api/engine/Channel/#setlocation","title":"SetLocation","text":"<p>void SetLocation(const AmVec3&amp; location) const</p> <p>Sets the location of this <code>Channel</code>.</p> <p>If the audio on this channel is not set to be Positional, this method does nothing.</p> Parameter <code>location</code> The new location of the <code>Channel</code>."},{"location":"api/engine/Channel/#stop","title":"Stop","text":"<p>void Stop(AmTime duration = kMinFadeDuration) const</p> <p>Stops the <code>Channel</code>.</p> <p>A sound will stop on its own if its not set to loop. Looped audio must be explicitly stopped.</p> Parameter <code>duration</code> The fade out duration before to stop the channel."},{"location":"api/engine/Channel/#valid","title":"Valid","text":"<p>[[nodiscard]] bool Valid() const</p> <p>Checks whether this <code>Channel</code> has been initialized.</p> Return <code>true</code> if this <code>Channel</code> has been initialized."},{"location":"api/engine/ChannelEvent/","title":"ChannelEvent","text":"<p>enum class ChannelEvent : AmUInt8</p> <p>Enumerates the events triggered by a <code>Channel</code> during playback.</p> Begin = 0 The playback of the channel has started. End = 1 The playback of the channel has ended. Resume = 2 The playback of the channel has resumed after being paused. Pause = 3 The playback of the channel has been paused. Stop = 4 The playback of the channel has been stopped. Loop = 5 The playback of the channel has looped."},{"location":"api/engine/ChannelEventCallback/","title":"ChannelEventCallback","text":"<p>typedef std::function&lt;void(ChannelEventInfo)&gt; ChannelEventCallback</p> <p>A callback function for handling channel events.</p>"},{"location":"api/engine/ChannelEventInfo/","title":"ChannelEventInfo","text":"<p>struct ChannelEventInfo</p> <p>The event info passed to the channel event listener.</p>"},{"location":"api/engine/ChannelEventInfo/#variables","title":"Variables","text":"Name Description m_source The event source. m_userData Additional user data passed to the event listener."},{"location":"api/engine/ChannelEventInfo/#functions","title":"Functions","text":"Name Description ChannelEventInfo Constructor."},{"location":"api/engine/ChannelEventInfo/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/ChannelEventInfo/#m_source","title":"m_source","text":"<p>ChannelInternalState* m_source</p> <p>The event source.</p>"},{"location":"api/engine/ChannelEventInfo/#m_userdata","title":"m_userData","text":"<p>void* m_userData</p> <p>Additional user data passed to the event listener.</p>"},{"location":"api/engine/ChannelEventInfo/#function-details","title":"Function Details","text":""},{"location":"api/engine/ChannelEventInfo/#channeleventinfo_1","title":"ChannelEventInfo","text":"<p>explicit ChannelEventInfo(ChannelInternalState* source)</p> <p>Constructor.</p> Parameter <code>source</code> The source of the event. <p>Warning</p> <p>This constructor is for internal usage only.</p>"},{"location":"api/engine/ChannelEventListener/","title":"ChannelEventListener","text":"<p>class  ChannelEventListener</p> <p>Channel Event listener.</p> <p>Event handlers are registered to the event listener through a callback to receive event notifications.</p>"},{"location":"api/engine/ChannelEventListener/#functions","title":"Functions","text":"Name Description ChannelEventListener Initializes a new channel event listener. ~ChannelEventListener Destroys the channel event listener. Add Registers a custom callback to this event listener. Call Executes the event by calling all the registered event handlers."},{"location":"api/engine/ChannelEventListener/#function-details","title":"Function Details","text":""},{"location":"api/engine/ChannelEventListener/#add","title":"Add","text":"<p>void Add(const ChannelEventCallback&amp; callback, void* userData = nullptr)</p> <p>Registers a custom callback to this event listener.</p> Parameter <code>callback</code> The event callback. Parameter <code>userData</code> The additional data to pass to the handler when this listener receive the event."},{"location":"api/engine/ChannelEventListener/#call","title":"Call","text":"<p>void Call(ChannelInternalState* channel)</p> <p>Executes the event by calling all the registered event handlers.</p> Parameter <code>channel</code> The channel which have triggered the event. <p>Warning</p> <p>This method is for internal usage only.</p>"},{"location":"api/engine/ChannelEventListener/#channeleventlistener_1","title":"ChannelEventListener","text":"<p>ChannelEventListener()</p> <p>Initializes a new channel event listener.</p>"},{"location":"api/engine/ChannelEventListener/#channeleventlistener_2","title":"~ChannelEventListener","text":"<p>~ChannelEventListener()</p> <p>Destroys the channel event listener.</p>"},{"location":"api/engine/ChannelPlaybackState/","title":"ChannelPlaybackState","text":"<p>enum class ChannelPlaybackState : AmUInt8</p> <p>Enumerates the playback states for a <code>Channel</code>.</p> Stopped = 0 The channel is stopped and not rendering audio. Playing = 1 The channel is playing audio. FadingIn = 2 The channel has just been played or resumed and is fading in to the <code>Playing</code> state. FadingOut = 3 The channel has just been stopped or paused and is fading out to the <code>Stopped</code> or <code>Paused</code> state. SwitchingState = 4 The channel is updating the value of his linked switch state. Paused = 5 The channel is paused."},{"location":"api/engine/Codec/","title":"Codec","text":"<p>class  Codec</p> <p>Audio file reader and writer.</p> <p>The <code>Codec</code> class is used to implement an audio file reader and writer. This is the base class for all audio codecs, each implementation should allow to build decoders and encoders.</p>"},{"location":"api/engine/Codec/#types","title":"Types","text":"Name Description Decoder Audio file reader. Encoder Audio file writer."},{"location":"api/engine/Codec/#variables","title":"Variables","text":"Name Description m_name The name of this codec."},{"location":"api/engine/Codec/#functions","title":"Functions","text":"Name Description Codec Create a new Codec instance. ~Codec Default destructor. CreateDecoder Creates a new instance of the decoder associated to this codec. DestroyDecoder Destroys the decoder associated to this codec. CreateEncoder Creates a new instance of the encoder associated to this codec. DestroyEncoder Destroys the encoder associated to this codec. CanHandleFile Checks whether this <code>Codec</code> can handle the file at the given path. GetName Gets the name of this codec. Register Registers a new audio codec. Unregister Unregisters a audio codec. Find Look up a codec by name. FindCodecForFile Finds the codec which can handle the given file. LockRegistry Locks the codecs registry. UnlockRegistry Unlocks the codecs registry."},{"location":"api/engine/Codec/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Codec/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The name of this codec.</p>"},{"location":"api/engine/Codec/#function-details","title":"Function Details","text":""},{"location":"api/engine/Codec/#canhandlefile","title":"CanHandleFile","text":"<p>[[nodiscard]] virtual bool CanHandleFile(std::shared_ptr&lt;File&gt; file) const = 0</p> <p>Checks whether this <code>Codec</code> can handle the file at the given path.</p> Parameter <code>file</code> The file to check. Return <code>true</code> if the <code>Codec</code> can handle the file, <code>false</code> otherwise."},{"location":"api/engine/Codec/#codec_1","title":"Codec","text":"<p>explicit Codec(AmString name)</p> <p>Create a new Codec instance.</p> Parameter <code>name</code> The codec name. Recommended names are \"FILE_EXTENSION\". eg. \"WAV\" or \"OGG\"."},{"location":"api/engine/Codec/#createdecoder","title":"CreateDecoder","text":"<p>* CreateDecoder()</p> <p>Creates a new instance of the decoder associated to this codec.</p> Return A <code>Decoder</code> instance."},{"location":"api/engine/Codec/#createencoder","title":"CreateEncoder","text":"<p>* CreateEncoder()</p> <p>Creates a new instance of the encoder associated to this codec.</p> Return An <code>Encoder</code> instance."},{"location":"api/engine/Codec/#destroydecoder","title":"DestroyDecoder","text":"<p>virtual void DestroyDecoder(Decoder* decoder) = 0</p> <p>Destroys the decoder associated to this codec.</p> Parameter <code>decoder</code> The decoder instance to destroy."},{"location":"api/engine/Codec/#destroyencoder","title":"DestroyEncoder","text":"<p>virtual void DestroyEncoder(Encoder* encoder) = 0</p> <p>Destroys the encoder associated to this codec.</p> Parameter <code>encoder</code> The encoder instance to destroy."},{"location":"api/engine/Codec/#find","title":"Find","text":"<p>static Codec* Find(const AmString&amp; name)</p> <p>Look up a codec by name.</p> Parameter <code>name</code> The name of the codec to find. Return The codec with the given name, or <code>nullptr</code> if none."},{"location":"api/engine/Codec/#findcodecforfile","title":"FindCodecForFile","text":"<p>static Codec* FindCodecForFile(std::shared_ptr&lt;File&gt; file)</p> <p>Finds the codec which can handle the given file.</p> Parameter <code>file</code> The file to find the codec for. Return The codec which can handle the given file, or <code>nullptr</code> if none."},{"location":"api/engine/Codec/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this codec.</p> Return The name of this codec."},{"location":"api/engine/Codec/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the codecs registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new codecs after the engine is fully loaded.</p>"},{"location":"api/engine/Codec/#register","title":"Register","text":"<p>static void Register(Codec* codec)</p> <p>Registers a new audio codec.</p> Parameter <code>codec</code> The audio codec to add in the registry."},{"location":"api/engine/Codec/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the codecs registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new codecs after the engine is fully unloaded.</p>"},{"location":"api/engine/Codec/#unregister","title":"Unregister","text":"<p>static void Unregister(const Codec* codec)</p> <p>Unregisters a audio codec.</p> Parameter <code>codec</code> The audio codec to remove from the registry."},{"location":"api/engine/Codec/#codec_2","title":"~Codec","text":"<p>virtual ~Codec()</p> <p>Default destructor.</p>"},{"location":"api/engine/Codec/Decoder/","title":"Decoder","text":"<p>class  Decoder</p> <p>Audio file reader.</p> <p>The <code>Decoder</code> is built by a <code>Codec</code> instance. It's used to read an audio file and process its data. Each implementation should allow to load the entire file into memory or stream it from the file system.</p> <p>The <code>Stream()</code> method of a decoder implementation must be thread-safe.</p>"},{"location":"api/engine/Codec/Decoder/#variables","title":"Variables","text":"Name Description m_format The audio sample format of the file currently loaded by this decoder. m_codec The codec instance which built this decoder."},{"location":"api/engine/Codec/Decoder/#functions","title":"Functions","text":"Name Description Decoder Creates a new instance of the decoder for the given codec. ~Decoder Default destructor. Open Opens the given file to start decoding. Close Closes the previously opened file. GetFormat Gets the audio sample format. Load Loads the entire audio file into the output buffer. Stream Streams a part of the file from disk into the output buffer. Seek Moves the cursor to the given frame."},{"location":"api/engine/Codec/Decoder/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Codec/Decoder/#m_codec","title":"m_codec","text":"<p>const Codec* m_codec</p> <p>The codec instance which built this decoder.</p>"},{"location":"api/engine/Codec/Decoder/#m_format","title":"m_format","text":"<p>SoundFormat m_format</p> <p>The audio sample format of the file currently loaded by this decoder.</p> <p>The sound format must be filled during the initialization of this decoder.</p>"},{"location":"api/engine/Codec/Decoder/#function-details","title":"Function Details","text":""},{"location":"api/engine/Codec/Decoder/#close","title":"Close","text":"<p>virtual bool Close() = 0</p> <p>Closes the previously opened file.</p> Return <code>true</code> if the file was closed successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Decoder/#decoder_1","title":"Decoder","text":"<p>explicit Decoder(const Codec* codec)</p> <p>Creates a new instance of the decoder for the given codec.</p> Parameter <code>codec</code> The codec wrapper for the decoder."},{"location":"api/engine/Codec/Decoder/#getformat","title":"GetFormat","text":"<p>[[nodiscard]] const SoundFormat&amp; GetFormat() const</p> <p>Gets the audio sample format.</p> Return The audio sample format. See SoundFormat"},{"location":"api/engine/Codec/Decoder/#load","title":"Load","text":"<p>virtual AmUInt64 Load(AudioBuffer* out) = 0</p> <p>Loads the entire audio file into the output buffer.</p> <p>The output buffer must allocate enough size for this operation to be successful.</p> Parameter <code>out</code> The buffer to load audio data data into. Return The number of audio frames loaded into the buffer."},{"location":"api/engine/Codec/Decoder/#open","title":"Open","text":"<p>virtual bool Open(std::shared_ptr&lt;File&gt; file) = 0</p> <p>Opens the given file to start decoding.</p> Parameter <code>file</code> The file to read. Return <code>true</code> if the file was opened successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Decoder/#seek","title":"Seek","text":"<p>virtual bool Seek(AmUInt64 offset) = 0</p> <p>Moves the cursor to the given frame.</p> Parameter <code>offset</code> The offset in frames to move the cursor to. Return <code>true</code> if the cursor was moved successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Decoder/#stream","title":"Stream","text":"<p>virtual AmUInt64 Stream(AudioBuffer* out, AmUInt64 bufferOffset, AmUInt64 seekOffset, AmUInt64 length) = 0</p> <p>Streams a part of the file from disk into the output buffer.</p> Parameter <code>out</code> The buffer to stream the file data into. Parameter <code>bufferOffset</code> The offset in frames from which start to write in the <code>out</code> buffer. Parameter <code>seekOffset</code> The offset in frames from which start to read the file. Parameter <code>length</code> The length in frames to read from the file. Return The number of frames read."},{"location":"api/engine/Codec/Decoder/#decoder_2","title":"~Decoder","text":"<p>virtual ~Decoder() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/Codec/Encoder/","title":"Encoder","text":"<p>class  Encoder</p> <p>Audio file writer.</p> <p>The <code>Encoder</code> is built by a <code>Codec</code> instance. It's used to write data to an audio file.</p> <p>The <code>Write()</code> methods of an encoder implementation must be thread safe.</p>"},{"location":"api/engine/Codec/Encoder/#variables","title":"Variables","text":"Name Description m_format The audio sample format of the file to write using this encoder. m_codec The codec instance which built this decoder."},{"location":"api/engine/Codec/Encoder/#functions","title":"Functions","text":"Name Description Encoder Creates a new instance of the encoder for the given codec. ~Encoder Default destructor. Open Opens or create a file at the given path to start encoding. Close Closes a previously opened file. SetFormat Sets the audio sample format. Write Writes the given buffer into the file."},{"location":"api/engine/Codec/Encoder/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Codec/Encoder/#m_codec","title":"m_codec","text":"<p>const Codec* m_codec</p> <p>The codec instance which built this decoder.</p>"},{"location":"api/engine/Codec/Encoder/#m_format","title":"m_format","text":"<p>SoundFormat m_format</p> <p>The audio sample format of the file to write using this encoder.</p> <p>The sound format must be set before the initialization of this encoder. Otherwise, the encoder initialization should fail.</p> <p>Note</p> <p>The final behavior depend on the specific codec implementation.</p>"},{"location":"api/engine/Codec/Encoder/#function-details","title":"Function Details","text":""},{"location":"api/engine/Codec/Encoder/#close","title":"Close","text":"<p>virtual bool Close() = 0</p> <p>Closes a previously opened file.</p> Return <code>true</code> if the file was closed successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Encoder/#encoder_1","title":"Encoder","text":"<p>explicit Encoder(const Codec* codec)</p> <p>Creates a new instance of the encoder for the given codec.</p> Parameter <code>codec</code> The codec wrapper for the encoder."},{"location":"api/engine/Codec/Encoder/#open","title":"Open","text":"<p>virtual bool Open(std::shared_ptr&lt;File&gt; file) = 0</p> <p>Opens or create a file at the given path to start encoding.</p> Parameter <code>file</code> The file to write. Return <code>true</code> if the file was opened successfully, <code>false</code> otherwise."},{"location":"api/engine/Codec/Encoder/#setformat","title":"SetFormat","text":"<p>virtual void SetFormat(const SoundFormat&amp; format)</p> <p>Sets the audio sample format.</p> Parameter <code>format</code> The audio sample format."},{"location":"api/engine/Codec/Encoder/#write","title":"Write","text":"<p>virtual AmUInt64 Write(AudioBuffer* in, AmUInt64 offset, AmUInt64 length) = 0</p> <p>Writes the given buffer into the file.</p> Parameter <code>in</code> The buffer to write into the the file. Parameter <code>offset</code> The offset in frames from which write the input buffer. Parameter <code>length</code> The length in frames to write from the input buffer. Return The number of frames written."},{"location":"api/engine/Codec/Encoder/#encoder_2","title":"~Encoder","text":"<p>virtual ~Encoder() = default</p> <p>Default destructor.</p>"},{"location":"api/engine/DeviceDescription/","title":"DeviceDescription","text":"<p>struct DeviceDescription</p> <p>The device description.</p> <p>This stores the settings requested from the engine configuration and the actual settings provided by the device.</p> <p>The device settings are filled after the Amplimix initialization, and are provided by the selected Driver.</p>"},{"location":"api/engine/DeviceDescription/#variables","title":"Variables","text":"Name Description mDeviceName The device name. mDeviceID The device ID. mRequestedOutputFormat The requested device output format. mDeviceOutputFormat The actual device format. mRequestedOutputChannels The requested device output channel layout. mDeviceOutputChannels The actual device channel layout. mRequestedOutputSampleRate The requested device sample rate. mDeviceOutputSampleRate The actual device sample rate. mOutputBufferSize The device output buffer size. mDeviceState The device state."},{"location":"api/engine/DeviceDescription/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/DeviceDescription/#mdeviceid","title":"mDeviceID","text":"<p>AmObjectID mDeviceID</p> <p>The device ID.</p>"},{"location":"api/engine/DeviceDescription/#mdevicename","title":"mDeviceName","text":"<p>AmString mDeviceName</p> <p>The device name.</p>"},{"location":"api/engine/DeviceDescription/#mdeviceoutputchannels","title":"mDeviceOutputChannels","text":"<p>PlaybackOutputChannels mDeviceOutputChannels</p> <p>The actual device channel layout.</p>"},{"location":"api/engine/DeviceDescription/#mdeviceoutputformat","title":"mDeviceOutputFormat","text":"<p>PlaybackOutputFormat mDeviceOutputFormat</p> <p>The actual device format.</p>"},{"location":"api/engine/DeviceDescription/#mdeviceoutputsamplerate","title":"mDeviceOutputSampleRate","text":"<p>AmUInt32 mDeviceOutputSampleRate</p> <p>The actual device sample rate.</p>"},{"location":"api/engine/DeviceDescription/#mdevicestate","title":"mDeviceState","text":"<p>DeviceState mDeviceState</p> <p>The device state.</p>"},{"location":"api/engine/DeviceDescription/#moutputbuffersize","title":"mOutputBufferSize","text":"<p>AmUInt32 mOutputBufferSize</p> <p>The device output buffer size.</p>"},{"location":"api/engine/DeviceDescription/#mrequestedoutputchannels","title":"mRequestedOutputChannels","text":"<p>PlaybackOutputChannels mRequestedOutputChannels</p> <p>The requested device output channel layout.</p>"},{"location":"api/engine/DeviceDescription/#mrequestedoutputformat","title":"mRequestedOutputFormat","text":"<p>PlaybackOutputFormat mRequestedOutputFormat</p> <p>The requested device output format.</p>"},{"location":"api/engine/DeviceDescription/#mrequestedoutputsamplerate","title":"mRequestedOutputSampleRate","text":"<p>AmUInt32 mRequestedOutputSampleRate</p> <p>The requested device sample rate.</p>"},{"location":"api/engine/DeviceNotification/","title":"DeviceNotification","text":"<p>enum class DeviceNotification : AmUInt8</p> <p>The possible device notification types.</p> Opened The device is opened, but not yet started. Started The device is started. Rerouted The device has changed. Stopped The device is stopped. Closed The device is closed."},{"location":"api/engine/DeviceState/","title":"DeviceState","text":"<p>enum class DeviceState : AmUInt8</p> <p>The device state.</p> Opened The device is opened, but not yet started. Started The device is started and running. Paused The device is paused. Stopped The device is stopped. Closed The device is closed."},{"location":"api/engine/Driver/","title":"Driver","text":"<p>class  Driver</p> <p>Base class for audio device driver implementations.</p> <p>A driver allows to use an audio device to output sounds and receive data from the microphone.</p>"},{"location":"api/engine/Driver/#variables","title":"Variables","text":"Name Description m_name The driver name. m_deviceDescription The device description."},{"location":"api/engine/Driver/#functions","title":"Functions","text":"Name Description Driver Creates a new AudioDriver with an unique name. ~Driver Default destructor. Open Open and start using the audio device. Close Closes the audio device. EnumerateDevices Enumerates all the available audio devices. GetName Gets the name of this driver. GetDeviceDescription Gets the description of the device currently managed by this driver. Register Registers a new audio driver. Unregister Unregisters an audio driver. Default Choose the most preferred audio driver. Find Look up a driver by name. SetDefault Set the default diver to use in the engine. LockRegistry Locks the drivers registry. UnlockRegistry Unlocks the drivers registry."},{"location":"api/engine/Driver/#variable-details","title":"Variable Details","text":""},{"location":"api/engine/Driver/#m_devicedescription","title":"m_deviceDescription","text":"<p>DeviceDescription m_deviceDescription</p> <p>The device description.</p>"},{"location":"api/engine/Driver/#m_name","title":"m_name","text":"<p>AmString m_name</p> <p>The driver name.</p>"},{"location":"api/engine/Driver/#function-details","title":"Function Details","text":""},{"location":"api/engine/Driver/#close","title":"Close","text":"<p>virtual bool Close() = 0</p> <p>Closes the audio device.</p> Return <code>true</code> if successful, <code>false</code> otherwise."},{"location":"api/engine/Driver/#default","title":"Default","text":"<p>static Driver* Default()</p> <p>Choose the most preferred audio driver.</p> Return The default audio driver."},{"location":"api/engine/Driver/#driver_1","title":"Driver","text":"<p>explicit Driver(AmString name)</p> <p>Creates a new AudioDriver with an unique name.</p> Parameter <code>name</code> The driver name. Recommended names are \"APIName\". eg. \"MiniAudio\" or \"PortAudio\" or \"SDL\", etc..."},{"location":"api/engine/Driver/#enumeratedevices","title":"EnumerateDevices","text":"<p>virtual bool EnumerateDevices(std::vector&lt;DeviceDescription&gt;&amp; devices) = 0</p> <p>Enumerates all the available audio devices.</p> Parameter <code>devices</code> The vector in which to store the device descriptions. Return <code>true</code> if successful, <code>false</code> otherwise."},{"location":"api/engine/Driver/#find","title":"Find","text":"<p>static Driver* Find(const AmString&amp; name)</p> <p>Look up a driver by name.</p> Parameter <code>name</code> The name of the audio driver. Must be registered before. Return The audio driver with the given name, or <code>nullptr</code> if none."},{"location":"api/engine/Driver/#getdevicedescription","title":"GetDeviceDescription","text":"<p>[[nodiscard]] const DeviceDescription&amp; GetDeviceDescription() const</p> <p>Gets the description of the device currently managed by this driver.</p> Return The device description."},{"location":"api/engine/Driver/#getname","title":"GetName","text":"<p>[[nodiscard]] const AmString&amp; GetName() const</p> <p>Gets the name of this driver.</p> Return The name of this driver."},{"location":"api/engine/Driver/#lockregistry","title":"LockRegistry","text":"<p>static void LockRegistry()</p> <p>Locks the drivers registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called before the <code>Engine</code> initialization, to discard the registration of new divers after the engine is fully loaded.</p>"},{"location":"api/engine/Driver/#open","title":"Open","text":"<p>virtual bool Open(const DeviceDescription&amp; device) = 0</p> <p>Open and start using the audio device.</p> Parameter <code>device</code> The audio device to use description to use for initializing the physical device. Return <code>true</code> if successful, <code>false</code> otherwise."},{"location":"api/engine/Driver/#register","title":"Register","text":"<p>static void Register(Driver* driver)</p> <p>Registers a new audio driver.</p> Parameter <code>driver</code> The audio driver to add in the registry."},{"location":"api/engine/Driver/#setdefault","title":"SetDefault","text":"<p>static void SetDefault(const AmString&amp; name)</p> <p>Set the default diver to use in the engine.</p> Parameter <code>name</code> The name of the audio driver. Must be registered before."},{"location":"api/engine/Driver/#unlockregistry","title":"UnlockRegistry","text":"<p>static void UnlockRegistry()</p> <p>Unlocks the drivers registry.</p> <p>Warning</p> <p>This function is mainly used for internal purposes. It's called after the <code>Engine</code> deinitialization, to allow the registration of new divers after the engine is fully unloaded.</p>"},{"location":"api/engine/Driver/#unregister","title":"Unregister","text":"<p>static void Unregister(const Driver* driver)</p> <p>Unregisters an audio driver.</p> Parameter <code>driver</code> The audio driver to remove from the registry."},{"location":"api/engine/Driver/#driver_2","title":"~Driver","text":"<p>virtual ~Driver()</p> <p>Default destructor.</p>"},{"location":"api/engine/Engine/","title":"Engine","text":"<p>class  Engine</p> <p>The Amplitude Engine.</p> <p>This is the main class of the library that manages all the entities and provides methods to create, destroy, and manipulate them. You can also access to the internal state of the engine through the public API.</p> <p>The <code>Engine</code> is a singleton class and you can access it using the <code>amEngine</code> macro. Before using most of the methods of the engine, you need to initialize the engine first, for example: <pre><code>amEngine-&gt;Initialize(\"config.amconfig\");\n//...\namEngine-&gt;Deinitialize();\n</code></pre></p>"},{"location":"api/engine/Engine/#functions","title":"Functions","text":"Name Description Version Gets the version structure. Initialize Initializes the Amplitude engine. Deinitialize Deinitializes the Amplitude engine. IsInitialized Checks if the Amplitude engine has been successfully initialized. SetFileSystem Sets a file system implementation to be used by the engine. GetFileSystem Gets the file system implementation used by the engine. StartOpenFileSystem Opens the file system, usually in a separate thread. TryFinalizeOpenFileSystem Checks if the file system has been fully loaded. StartCloseFileSystem Closes the file system, usually in a separate thread. TryFinalizeCloseFileSystem Checks if the file system has been fully closed. AdvanceFrame Updates the engine state for the given number of milliseconds. OnNextFrame Executes the given callback on the next frame. GetTotalTime Gets the total elapsed time in milliseconds since the start of the engine. LoadSoundBank Loads a sound bank from a binary asset file (<code>.ambank</code>). LoadSoundBank Loads a sound bank from a binary asset file (<code>.ambank</code>). LoadSoundBankFromMemory Loads a sound bank from memory. LoadSoundBankFromMemory Loads a sound bank from memory. LoadSoundBankFromMemoryView Loads a sound bank from memory. LoadSoundBankFromMemoryView Loads a sound bank from memory. UnloadSoundBank Unloads a sound bank given its filename. UnloadSoundBank Unloads a sound bank given its ID. UnloadSoundBanks Unloads all the loaded sound banks. StartLoadSoundFiles Starts the loading of sound files referenced in loaded sound banks. TryFinalizeLoadSoundFiles Checks if the loading of sound files has been completed, and releases used resources. GetSwitchContainerHandle Gets a <code>SwitchContainerHandle</code> given its name as defined in its asset file (<code>.amswitchcontainer</code>). GetSwitchContainerHandle Gets a <code>SwitchContainerHandle</code> given its ID as defined in its asset file (<code>.amswitchcontainer</code>). GetSwitchContainerHandleFromFile Gets a <code>SwitchContainerHandle</code> given its asset's filename. GetCollectionHandle Gets a <code>CollectionHandle</code> given its name as defined in its asset file (<code>.amcollection</code>). GetCollectionHandle Gets a <code>CollectionHandle</code> given its ID as defined in its asset file (<code>.amcollection</code>). GetCollectionHandleFromFile Gets a <code>CollectionHandle</code> given its asset's filename. GetSoundHandle Gets a <code>SoundHandle</code> given its name as defined in its asset file (<code>.amsound</code>). GetSoundHandle Gets a <code>SoundHandle</code> given its ID as defined in its asset file (<code>.amsound</code>). GetSoundHandleFromFile Gets a <code>SoundHandle</code> given its asset's filename. GetSoundObjectHandle Gets a <code>SoundObjectHandle</code> given its name as defined in its asset file. GetSoundObjectHandle Gets a <code>SoundObjectHandle</code> given its ID as defined in its asset file. GetSoundObjectHandleFromFile Gets a <code>SoundObjectHandle</code> given its asset's filename. GetEventHandle Gets an <code>EventHandle</code> given its name as defined in its asset file (<code>.amevent</code>). GetEventHandle Gets an <code>EventHandle</code> given its ID as defined in its asset file (<code>.amevent</code>). GetEventHandleFromFile Gets an <code>EventHandle</code> given its asset's filename. GetAttenuationHandle Gets an <code>AttenuationHandle</code> given its name as defined in its asset file (<code>.amattenuation</code>). GetAttenuationHandle Gets an <code>AttenuationHandle</code> given its ID as defined in its asset file (<code>.amattenuation</code>). GetAttenuationHandleFromFile Gets an <code>AttenuationHandle</code> given its asset's filename. GetSwitchHandle Gets a <code>SwitchHandle</code> given its name as defined in its asset file (<code>.amswitch</code>). GetSwitchHandle Gets a <code>SwitchHandle</code> given its ID as defined in its asset file (<code>.amswitch</code>). GetSwitchHandleFromFile Gets a <code>SwitchHandle</code> given its asset's filename. GetRtpcHandle Gets a <code>RtpcHandle</code> given its name as defined in its asset file (<code>.amrtpc</code>). GetRtpcHandle Gets an <code>RtpcHandle</code> given its ID as defined in its asset file (<code>.amrtpc</code>). GetRtpcHandleFromFile Gets an <code>RtpcHandle</code> given its asset's filename. GetEffectHandle Gets an <code>EffectHandle</code> given its name as defined in its asset file (<code>.amfx</code>). GetEffectHandle Gets an <code>EffectHandle</code> given its ID as defined in its asset file (<code>.amfx</code>). GetEffectHandleFromFile Gets an <code>EffectHandle</code> given its asset's filename. GetPipelineHandle Gets a <code>PipelineHandle</code> from the loaded pipeline asset file (<code>.ampipeline</code>). SetMasterGain Adjusts the master gain of the mixer. GetMasterGain Gets the mixer master gain. SetMute Mutes the engine, but keep processing audio. IsMuted Checks whether the engine is currently muted. Pause Pauses or resumes all playing sounds and streams. IsPaused Checks whether the engine is currently paused. SetDefaultListener Sets the default sound listener. SetDefaultListener Sets the default sound listener. GetDefaultListener Gets the default audio <code>Listener</code>. AddListener Initializes and returns a new <code>Listener</code>. GetListener Returns the <code>Listener</code> with the given ID. RemoveListener Removes a <code>Listener</code> given its ID. RemoveListener Removes a <code>Listener</code> given its handle. AddEntity Initializes and returns a new <code>Entity</code>. GetEntity Returns the <code>Entity</code> with the given ID. RemoveEntity Removes an <code>Entity</code>. RemoveEntity Removes an <code>Entity</code> given its ID. AddEnvironment Initializes and return a new <code>Environment</code>. GetEnvironment Returns the <code>Environment</code> with the given ID. RemoveEnvironment Removes an <code>Environment</code>. RemoveEnvironment Removes an <code>Environment</code> given its ID. AddRoom Initializes and return a new <code>Room</code>. GetRoom Returns the <code>Room</code> with the given ID. RemoveRoom Removes a <code>Room</code>. RemoveRoom Removes a <code>Room</code> given its ID. FindBus Returns the <code>Bus</code> with the specified name. FindBus Returns the <code>Bus</code> with the given ID. Play Plays a switch container associated with the given handle in the World scope. Play Plays a switch container associated with the given handle in the World scope at the given location. Play Plays a switch container associated with the given handle in the World scope at the * given location with the given gain. Play Plays a switch container associated with the given handle in an Entity scope. Play Plays a switch container associated with the given handle in an Entity scope with the * given gain. Play Plays a collection associated with the given handle in the World scope. Play Plays a collection associated with the given handle in the World scope at * the given location. Play Plays a collection associated with the given handle in the location with * the given gain. Play Plays a collection associated with the given handle in the Entity scope. Play Plays a collection associated with the given handle in an Entity scope * with the given gain. Play Plays a sound associated with the given handle in the World scope. Play Plays a sound associated with the given handle in the World scope * at the given location. Play Plays a sound associated with the given handle in the World scope * at the given location with the given gain. Play Plays a sound associated with the given sound handle in an Entity scope. Play Plays a sound associated with the given sound handle in an Entity * scope with the given gain. Play Plays a sound object associated with the given name in the World scope. Play Plays a sound object associated with the given name in the World scope. Play Plays a sound object associated with the given name in the World scope. Play Plays a sound object associated with the given name in an Entity scope. Play Plays a sound object associated with the given name in an Entity scope. Play Plays a sound object associated with the given ID in the * World scope, at the origin of the world. Play Plays a sound object associated with the given ID in the * World scope, at the given location. Play Plays a sound object associated with the given ID in the * World scope, at the given location, and with the given gain. Play Plays a sound or a collection associated with the given ID in an Entity scope. Play Plays a sound object associated with the given ID in an Entity * scope with the given gain. StopAll Stops all playing sound objects. Trigger Triggers the event associated to the given handle. Trigger Triggers the event associated to the given handle. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetSwitchState Set the active state of the defined @c Switch. SetRtpcValue Set the value of a @c RTPC. SetRtpcValue Set the value of a @c RTPC. SetRtpcValue Set the value of a @c RTPC. GetDriver Gets the audio driver used by this Engine. GetMixer Gets the mixer instance. GetSoundSpeed Get the current speed of sound. GetDopplerFactor Get the engine Doppler factor. GetSamplesPerStream Get the number of samples to process in one stream. IsGameTrackingEnvironmentAmounts Checks whether the game is tracking environment amounts * himself. This is useful for engines like O3DE. GetMaxListenersCount Gets the maximum number of listeners handled by the engine. GetMaxEntitiesCount Gets the maximum number of game entities handled by the engine. This value * does not reflect the maximum number of simultaneous sound handled by the engine. GetOcclusionCoefficientCurve Gets the occlusion coefficient curve defined in the loaded engine configuration. GetOcclusionGainCurve Gets the occlusion gain curve defined in the loaded engine configuration. GetObstructionCoefficientCurve Gets the obstruction low pass curve defined in the loaded engine configuration. GetObstructionGainCurve Gets the obstruction gain curve defined in the loaded engine configuration. GetPanningMode Gets the panning mode defined in the loaded engine configuration. GetHRIRSphereSamplingMode Gets the HRIR sphere sampling mode defined in the loaded engine configuration. GetHRIRSphere Gets the HRIR sphere defined in the loaded engine configuration. LoadPlugin Loads a plugin library from the given path. AddPluginSearchPath Adds a path in the plugins search paths list. RemovePluginSearchPath Removes a path from the plugins search paths list. RegisterDefaultPlugins Register all default plugins. UnregisterDefaultPlugins Unregister all default plugins. GetInstance Returns an unique instance of the Amplitude Engine. DestroyInstance Destroys the unique instance of the Amplitude Engine."},{"location":"api/engine/Engine/#function-details","title":"Function Details","text":""},{"location":"api/engine/Engine/#addentity","title":"AddEntity","text":"<p>[[nodiscard]] virtual Entity AddEntity(AmEntityID id) const = 0</p> <p>Initializes and returns a new <code>Entity</code>.</p> Parameter <code>id</code> The game entity ID. Return An initialized <code>Entity</code>."},{"location":"api/engine/Engine/#addenvironment","title":"AddEnvironment","text":"<p>[[nodiscard]] virtual Environment AddEnvironment(AmEnvironmentID id) const = 0</p> <p>Initializes and return a new <code>Environment</code>.</p> Parameter <code>id</code> The game environment ID. Return An initialized <code>Environment</code>."},{"location":"api/engine/Engine/#addlistener","title":"AddListener","text":"<p>[[nodiscard]] virtual Listener AddListener(AmListenerID id) const = 0</p> <p>Initializes and returns a new <code>Listener</code>.</p> Parameter <code>id</code> The new listener ID. Return An initialized <code>Listener</code>."},{"location":"api/engine/Engine/#addpluginsearchpath","title":"AddPluginSearchPath","text":"<p>static void AddPluginSearchPath(const AmOsString&amp; path)</p> <p>Adds a path in the plugins search paths list.</p> Parameter <code>path</code> The path to add in the plugins search paths list."},{"location":"api/engine/Engine/#addroom","title":"AddRoom","text":"<p>[[nodiscard]] virtual Room AddRoom(AmRoomID id) const = 0</p> <p>Initializes and return a new <code>Room</code>.</p> Parameter <code>id</code> The room ID. Return An initialized <code>Room</code>."},{"location":"api/engine/Engine/#advanceframe","title":"AdvanceFrame","text":"<p>virtual void AdvanceFrame(AmTime delta) const = 0</p> <p>Updates the engine state for the given number of milliseconds.</p> Parameter <code>delta</code> The number of milliseconds since the last frame."},{"location":"api/engine/Engine/#deinitialize","title":"Deinitialize","text":"<p>virtual bool Deinitialize() = 0</p> <p>Deinitializes the Amplitude engine.</p> Return <code>true</code> when the engine has been successfully deinitialized, <code>false</code> otherwise."},{"location":"api/engine/Engine/#destroyinstance","title":"DestroyInstance","text":"<p>static void DestroyInstance()</p> <p>Destroys the unique instance of the Amplitude Engine.</p>"},{"location":"api/engine/Engine/#findbus","title":"FindBus","text":"<p>[[nodiscard]] virtual Bus FindBus(const AmString&amp; name) const = 0</p> <p>Returns the <code>Bus</code> with the specified name.</p> Parameter <code>name</code> The name of the bus. <p>Note</p> <p>The name should match one of the buses loaded from the asset file (<code>.ambus</code>).</p> Return A valid <code>Bus</code> if found, otherwise an invalid <code>Bus</code>. <p>[[nodiscard]] virtual Bus FindBus(AmBusID id) const = 0</p> <p>Returns the <code>Bus</code> with the given ID.</p> Parameter <code>id</code> The ID of the bus. <p>Note</p> <p>The ID should match one of the buses loaded from the asset file (<code>.ambus</code>).</p> Return A valid <code>Bus</code> if found, otherwise an invalid <code>Bus</code>."},{"location":"api/engine/Engine/#getattenuationhandle","title":"GetAttenuationHandle","text":"<p>[[nodiscard]] virtual AttenuationHandle GetAttenuationHandle(const AmString&amp; name) const = 0</p> <p>Gets an <code>AttenuationHandle</code> given its name as defined in its asset file (<code>.amattenuation</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>AttenuationHandle</code> for the given name, or an invalid handle if no attenuation with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual AttenuationHandle GetAttenuationHandle(AmAttenuationID id) const = 0</p> <p>Gets an <code>AttenuationHandle</code> given its ID as defined in its asset file (<code>.amattenuation</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>AttenuationHandle</code> for the given ID, or an invalid handle if no attenuation with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getattenuationhandlefromfile","title":"GetAttenuationHandleFromFile","text":"<p>[[nodiscard]] virtual AttenuationHandle GetAttenuationHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>AttenuationHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>attenuators</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"attenuators/impact.amattenuation\"\nAttenuationHandle handle = amEngine-&gt;GetAttenuationHandleFromFile(\"impact.amattenuation\");\n</code></pre> Return The <code>AttenuationHandle</code> for the given asset's filename, or an invalid handle if no attenuation with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getcollectionhandle","title":"GetCollectionHandle","text":"<p>[[nodiscard]] virtual CollectionHandle GetCollectionHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>CollectionHandle</code> given its name as defined in its asset file (<code>.amcollection</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>CollectionHandle</code> for the given name, or an invalid handle if no collection with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual CollectionHandle GetCollectionHandle(AmCollectionID id) const = 0</p> <p>Gets a <code>CollectionHandle</code> given its ID as defined in its asset file (<code>.amcollection</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>CollectionHandle</code> for the given ID, or an invalid handle if no collection with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getcollectionhandlefromfile","title":"GetCollectionHandleFromFile","text":"<p>[[nodiscard]] virtual CollectionHandle GetCollectionHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>CollectionHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>collections</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"collections/weapons/ak47_gunfires.amcollection\"\nCollectionHandle handle = amEngine-&gt;GetCollectionHandleFromFile(\"weapons/ak47_gunfires.amcollection\");\n</code></pre> Return The <code>CollectionHandle</code> for the given asset's filename, or an invalid handle if no collection with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getdefaultlistener","title":"GetDefaultListener","text":"<p>[[nodiscard]] virtual Listener GetDefaultListener() const = 0</p> <p>Gets the default audio <code>Listener</code>.</p> Return An initialized <code>Listener</code> object if a default listener was set, otherwise an uninitialized <code>Listener</code> object."},{"location":"api/engine/Engine/#getdopplerfactor","title":"GetDopplerFactor","text":"<p>[[nodiscard]] virtual AmReal32 GetDopplerFactor() const = 0</p> <p>Get the engine Doppler factor.</p> Return The Doppler factor."},{"location":"api/engine/Engine/#getdriver","title":"GetDriver","text":"<p>* GetDriver() const</p> <p>Gets the audio driver used by this Engine.</p> Return The audio driver."},{"location":"api/engine/Engine/#geteffecthandle","title":"GetEffectHandle","text":"<p>[[nodiscard]] virtual EffectHandle GetEffectHandle(const AmString&amp; name) const = 0</p> <p>Gets an <code>EffectHandle</code> given its name as defined in its asset file (<code>.amfx</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>EffectHandle</code> for the given name, or an invalid handle if no effect with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual EffectHandle GetEffectHandle(AmEffectID id) const = 0</p> <p>Gets an <code>EffectHandle</code> given its ID as defined in its asset file (<code>.amfx</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>EffectHandle</code> for the given ID, or an invalid handle if no effect with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#geteffecthandlefromfile","title":"GetEffectHandleFromFile","text":"<p>[[nodiscard]] virtual EffectHandle GetEffectHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>EffectHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>effects</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"effects/echo.amfx\"\nEffectHandle handle = amEngine-&gt;GetEffectHandleFromFile(\"echo.amfx\");\n</code></pre> Return The <code>EffectHandle</code> for the given asset's filename, or an invalid handle if no effect with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getentity","title":"GetEntity","text":"<p>[[nodiscard]] virtual Entity GetEntity(AmEntityID id) const = 0</p> <p>Returns the <code>Entity</code> with the given ID.</p> Parameter <code>id</code> The game entity ID. Return An initialized <code>Entity</code> if that one has been registered before, otherwise an uninitialized <code>Entity</code>."},{"location":"api/engine/Engine/#getenvironment","title":"GetEnvironment","text":"<p>[[nodiscard]] virtual Environment GetEnvironment(AmEnvironmentID id) const = 0</p> <p>Returns the <code>Environment</code> with the given ID.</p> Parameter <code>id</code> The game environment ID. Return An initialized <code>Environment</code> if that one has been registered before, otherwise an uninitialized <code>Environment</code>."},{"location":"api/engine/Engine/#geteventhandle","title":"GetEventHandle","text":"<p>[[nodiscard]] virtual EventHandle GetEventHandle(const AmString&amp; name) const = 0</p> <p>Gets an <code>EventHandle</code> given its name as defined in its asset file (<code>.amevent</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>EventHandle</code> for the given name, or an invalid handle if no event with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual EventHandle GetEventHandle(AmEventID id) const = 0</p> <p>Gets an <code>EventHandle</code> given its ID as defined in its asset file (<code>.amevent</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>EventHandle</code> for the given ID, or an invalid handle if no event with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#geteventhandlefromfile","title":"GetEventHandleFromFile","text":"<p>[[nodiscard]] virtual EventHandle GetEventHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>EventHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>events</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"events/gameplay/start_menu.amevent\"\nEventHandle handle = amEngine-&gt;GetEventHandleFromFile(\"gameplay/start_menu.amevent\");\n</code></pre> Return The <code>EventHandle</code> for the given asset's filename, or an invalid handle if no event with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getfilesystem","title":"GetFileSystem","text":"<p>* GetFileSystem() const</p> <p>Gets the file system implementation used by the engine.</p> Return The current file system implementation used by the engine, or <code>nullptr</code> if no file system has been set."},{"location":"api/engine/Engine/#gethrirsphere","title":"GetHRIRSphere","text":"<p>* GetHRIRSphere() const</p> <p>Gets the HRIR sphere defined in the loaded engine configuration.</p> Return The HRIR sphere. If no HRIR sphere is defined, returns nullptr. <p>Note</p> <p>The HRIR sphere is optional and can be null in some cases. If the engine does not have an HRIR sphere defined, this function will return <code>nullptr</code>.</p> See HRIRSphere"},{"location":"api/engine/Engine/#gethrirspheresamplingmode","title":"GetHRIRSphereSamplingMode","text":"<p>[[nodiscard]] virtual eHRIRSphereSamplingMode GetHRIRSphereSamplingMode() const = 0</p> <p>Gets the HRIR sphere sampling mode defined in the loaded engine configuration.</p> Return The HRIR sphere sampling mode."},{"location":"api/engine/Engine/#getinstance","title":"GetInstance","text":"<p>[[nodiscard]] static Engine* GetInstance()</p> <p>Returns an unique instance of the Amplitude Engine.</p>"},{"location":"api/engine/Engine/#getlistener","title":"GetListener","text":"<p>[[nodiscard]] virtual Listener GetListener(AmListenerID id) const = 0</p> <p>Returns the <code>Listener</code> with the given ID.</p> Parameter <code>id</code> The listener ID. Return An initialized <code>Listener</code> if a one with the given ID has been registered before, otherwise an uninitialized <code>Listener</code>."},{"location":"api/engine/Engine/#getmastergain","title":"GetMasterGain","text":"<p>[[nodiscard]] virtual AmReal32 GetMasterGain() const = 0</p> <p>Gets the mixer master gain.</p> Return The mixer master gain."},{"location":"api/engine/Engine/#getmaxentitiescount","title":"GetMaxEntitiesCount","text":"<p>[[nodiscard]] virtual AmUInt32 GetMaxEntitiesCount() const = 0</p> <p>Gets the maximum number of game entities handled by the engine. This value          * does not reflect the maximum number of simultaneous sound handled by the engine.</p> Return The maximum number of game entities."},{"location":"api/engine/Engine/#getmaxlistenerscount","title":"GetMaxListenersCount","text":"<p>[[nodiscard]] virtual AmUInt32 GetMaxListenersCount() const = 0</p> <p>Gets the maximum number of listeners handled by the engine.</p> Return The maximum number of listeners."},{"location":"api/engine/Engine/#getmixer","title":"GetMixer","text":"<p>* GetMixer() const</p> <p>Gets the mixer instance.</p> Return The Amplimix mixer instance."},{"location":"api/engine/Engine/#getobstructioncoefficientcurve","title":"GetObstructionCoefficientCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetObstructionCoefficientCurve() const = 0</p> <p>Gets the obstruction low pass curve defined in the loaded engine configuration.</p> Return The obstruction low pass curve."},{"location":"api/engine/Engine/#getobstructiongaincurve","title":"GetObstructionGainCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetObstructionGainCurve() const = 0</p> <p>Gets the obstruction gain curve defined in the loaded engine configuration.</p> Return The obstruction gain curve."},{"location":"api/engine/Engine/#getocclusioncoefficientcurve","title":"GetOcclusionCoefficientCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetOcclusionCoefficientCurve() const = 0</p> <p>Gets the occlusion coefficient curve defined in the loaded engine configuration.</p> Return The occlusion coefficient curve."},{"location":"api/engine/Engine/#getocclusiongaincurve","title":"GetOcclusionGainCurve","text":"<p>[[nodiscard]] virtual const Curve&amp; GetOcclusionGainCurve() const = 0</p> <p>Gets the occlusion gain curve defined in the loaded engine configuration.</p> Return The occlusion gain curve."},{"location":"api/engine/Engine/#getpanningmode","title":"GetPanningMode","text":"<p>[[nodiscard]] virtual ePanningMode GetPanningMode() const = 0</p> <p>Gets the panning mode defined in the loaded engine configuration.</p> Return The panning mode."},{"location":"api/engine/Engine/#getpipelinehandle","title":"GetPipelineHandle","text":"<p>[[nodiscard]] virtual PipelineHandle GetPipelineHandle() const = 0</p> <p>Gets a <code>PipelineHandle</code> from the loaded pipeline asset file (<code>.ampipeline</code>).</p> <p>Note</p> <p>Only one pipeline can be loaded at a time. The loaded pipeline asset is defined in the engine configuration file.</p> Return The <code>PipelineHandle</code> for the loaded pipeline. This method should always return a valid handle."},{"location":"api/engine/Engine/#getroom","title":"GetRoom","text":"<p>[[nodiscard]] virtual Room GetRoom(AmRoomID id) const = 0</p> <p>Returns the <code>Room</code> with the given ID.</p> Parameter <code>id</code> The room ID. Return An initialized <code>Room</code> if that one has been registered before, otherwise an uninitialized <code>Room</code>."},{"location":"api/engine/Engine/#getrtpchandle","title":"GetRtpcHandle","text":"<p>[[nodiscard]] virtual RtpcHandle GetRtpcHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>RtpcHandle</code> given its name as defined in its asset file (<code>.amrtpc</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>RtpcHandle</code> for the given name, or an invalid handle if no RTPC with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual RtpcHandle GetRtpcHandle(AmRtpcID id) const = 0</p> <p>Gets an <code>RtpcHandle</code> given its ID as defined in its asset file (<code>.amrtpc</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>RtpcHandle</code> for the given ID, or an invalid handle if no RTPC with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getrtpchandlefromfile","title":"GetRtpcHandleFromFile","text":"<p>[[nodiscard]] virtual RtpcHandle GetRtpcHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets an <code>RtpcHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>rtpc</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"rtpc/music_volume.amrtpc\"\nRtpcHandle handle = amEngine-&gt;GetRtpcHandleFromFile(\"music_volume.amrtpc\");\n</code></pre> Return The <code>RtpcHandle</code> for the given asset's filename, or an invalid handle if no RTPC with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getsamplesperstream","title":"GetSamplesPerStream","text":"<p>[[nodiscard]] virtual AmUInt32 GetSamplesPerStream() const = 0</p> <p>Get the number of samples to process in one stream.</p> Return The number of samples per stream."},{"location":"api/engine/Engine/#getsoundhandle","title":"GetSoundHandle","text":"<p>[[nodiscard]] virtual SoundHandle GetSoundHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SoundHandle</code> given its name as defined in its asset file (<code>.amsound</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SoundHandle</code> for the given name, or an invalid handle if no sound with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual SoundHandle GetSoundHandle(AmSoundID id) const = 0</p> <p>Gets a <code>SoundHandle</code> given its ID as defined in its asset file (<code>.amsound</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SoundHandle</code> for the given ID, or an invalid handle if no sound with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getsoundhandlefromfile","title":"GetSoundHandleFromFile","text":"<p>[[nodiscard]] virtual SoundHandle GetSoundHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SoundHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>sounds</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"sounds/env/forest/calm_lake_bg.amsound\"\nSoundHandle handle = amEngine-&gt;GetSoundHandleFromFile(\"env/forest/calm_lake_bg.amsound\");\n</code></pre> Return The <code>SoundHandle</code> for the given asset's filename, or an invalid handle if no sound with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getsoundobjecthandle","title":"GetSoundObjectHandle","text":"<p>[[nodiscard]] virtual SoundObjectHandle GetSoundObjectHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SoundObjectHandle</code> given its name as defined in its asset file.</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SoundObjectHandle</code> for the given name, or an invalid handle if no sound object with that name was found in any loaded sound bank. <p>Note</p> <p>The return value can be a <code>SwitchContainerHandle</code>, a <code>CollectionHandle</code>, or a <code>SoundHandle</code>.</p> <p>[[nodiscard]] virtual SoundObjectHandle GetSoundObjectHandle(AmSoundID id) const = 0</p> <p>Gets a <code>SoundObjectHandle</code> given its ID as defined in its asset file.</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SoundObjectHandle</code> for the given ID, or an invalid handle if no sound object with that ID was found in any loaded sound bank. <p>Note</p> <p>The return value can be a <code>SwitchContainerHandle</code>, a <code>CollectionHandle</code>, or a <code>SoundHandle</code>.</p>"},{"location":"api/engine/Engine/#getsoundobjecthandlefromfile","title":"GetSoundObjectHandleFromFile","text":"<p>[[nodiscard]] virtual SoundObjectHandle GetSoundObjectHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SoundObjectHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>sounds</code>, <code>collections</code>, or <code>switch_containers</code> directories of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"sounds/env/forest/calm_lake_bg.amsound\"\n// Note that the return value in this case is a indeed a `SoundHandle`\nSoundObjectHandle handle = amEngine-&gt;GetSoundObjectHandleFromFile(\"env/forest/calm_lake_bg.amsound\");\n</code></pre> Return The <code>SoundObjectHandle</code> for the given asset's filename, or an invalid handle if no sound object with that filename was found in any loaded sound bank. <p>Note</p> <p>The return value can be a <code>SwitchContainerHandle</code>, a <code>CollectionHandle</code>, or a <code>SoundHandle</code>.</p>"},{"location":"api/engine/Engine/#getsoundspeed","title":"GetSoundSpeed","text":"<p>[[nodiscard]] virtual AmReal32 GetSoundSpeed() const = 0</p> <p>Get the current speed of sound.</p> Return The speed of sound."},{"location":"api/engine/Engine/#getswitchcontainerhandle","title":"GetSwitchContainerHandle","text":"<p>[[nodiscard]] virtual SwitchContainerHandle GetSwitchContainerHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SwitchContainerHandle</code> given its name as defined in its asset file (<code>.amswitchcontainer</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SwitchContainerHandle</code> for the given name, or an invalid handle if no switch container with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual SwitchContainerHandle GetSwitchContainerHandle(AmSwitchContainerID id) const = 0</p> <p>Gets a <code>SwitchContainerHandle</code> given its ID as defined in its asset file (<code>.amswitchcontainer</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SwitchContainerHandle</code> for the given ID, or an invalid handle if no switch container with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getswitchcontainerhandlefromfile","title":"GetSwitchContainerHandleFromFile","text":"<p>[[nodiscard]] virtual SwitchContainerHandle GetSwitchContainerHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SwitchContainerHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>switch_containers</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"switch_containers/footsteps.amswitchcontainer\"\nSwitchContainerHandle handle = amEngine-&gt;GetSwitchContainerHandleFromFile(\"footsteps.amswitchcontainer\");\n</code></pre> Return The <code>SwitchContainerHandle</code> for the given asset's filename, or an invalid handle if no switch container with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#getswitchhandle","title":"GetSwitchHandle","text":"<p>[[nodiscard]] virtual SwitchHandle GetSwitchHandle(const AmString&amp; name) const = 0</p> <p>Gets a <code>SwitchHandle</code> given its name as defined in its asset file (<code>.amswitch</code>).</p> Parameter <code>name</code> The unique name as defined in the asset file. Return The <code>SwitchHandle</code> for the given name, or an invalid handle if no switch with that name was found in any loaded sound bank. <p>[[nodiscard]] virtual SwitchHandle GetSwitchHandle(AmSwitchID id) const = 0</p> <p>Gets a <code>SwitchHandle</code> given its ID as defined in its asset file (<code>.amswitch</code>).</p> Parameter <code>id</code> The unique ID as defined in the asset file. Return The <code>SwitchHandle</code> for the given ID, or an invalid handle if no switch with that ID was found in any loaded sound bank."},{"location":"api/engine/Engine/#getswitchhandlefromfile","title":"GetSwitchHandleFromFile","text":"<p>[[nodiscard]] virtual SwitchHandle GetSwitchHandleFromFile(const AmOsString&amp; filename) const = 0</p> <p>Gets a <code>SwitchHandle</code> given its asset's filename.</p> Parameter <code>filename</code> The asset's filename. <p>Note</p> <p>The asset's filename should be relative path from the <code>switches</code> directory of your Amplitude project, not an absolute path from the filesystem base path.</p> <p>Example</p> <pre><code>// Assuming the asset file is located in \"switches/env/surfaces.amswitch\"\nSwitchHandle handle = amEngine-&gt;GetSwitchHandleFromFile(\"env/surfaces.amswitch\");\n</code></pre> Return The <code>SwitchHandle</code> for the given asset's filename, or an invalid handle if no switch with that filename was found in any loaded sound bank."},{"location":"api/engine/Engine/#gettotaltime","title":"GetTotalTime","text":"<p>[[nodiscard]] virtual AmTime GetTotalTime() const = 0</p> <p>Gets the total elapsed time in milliseconds since the start of the engine.</p> Return The total elapsed time in milliseconds since the start of the engine."},{"location":"api/engine/Engine/#initialize","title":"Initialize","text":"<p>virtual bool Initialize(const AmOsString&amp; configFile) = 0</p> <p>Initializes the Amplitude engine.</p> Parameter <code>configFile</code> The path to the configuration file. Return <code>true</code> when the engine has been successfully initialized, <code>false</code> otherwise."},{"location":"api/engine/Engine/#isgametrackingenvironmentamounts","title":"IsGameTrackingEnvironmentAmounts","text":"<p>[[nodiscard]] virtual bool IsGameTrackingEnvironmentAmounts() const = 0</p> <p>Checks whether the game is tracking environment amounts          * himself. This is useful for engines like O3DE.</p> Return Whether the game is tracking environment amounts."},{"location":"api/engine/Engine/#isinitialized","title":"IsInitialized","text":"<p>[[nodiscard]] virtual bool IsInitialized() const = 0</p> <p>Checks if the Amplitude engine has been successfully initialized.</p> Return <code>true</code> if the engine has been successfully initialized, <code>false</code> otherwise."},{"location":"api/engine/Engine/#ismuted","title":"IsMuted","text":"<p>[[nodiscard]] virtual bool IsMuted() const = 0</p> <p>Checks whether the engine is currently muted.</p> Return <code>true</code> if the engine is muted, <code>false</code> otherwise."},{"location":"api/engine/Engine/#ispaused","title":"IsPaused","text":"<p>[[nodiscard]] virtual bool IsPaused() const = 0</p> <p>Checks whether the engine is currently paused.</p> Return <code>true</code> if the engine is currently paused, <code>false</code> otherwise."},{"location":"api/engine/Engine/#loadplugin","title":"LoadPlugin","text":"<p>static AmVoidPtr LoadPlugin(const AmOsString&amp; pluginLibraryName)</p> <p>Loads a plugin library from the given path.</p> Parameter <code>pluginLibraryName</code> The name of the plugin library to load. Return A handle to the loaded plugin library."},{"location":"api/engine/Engine/#loadsoundbank","title":"LoadSoundBank","text":"<p>virtual bool LoadSoundBank(const AmOsString&amp; filename) = 0</p> <p>Loads a sound bank from a binary asset file (<code>.ambank</code>).</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>filename</code> The path to the sound bank asset file. Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise. <p>virtual bool LoadSoundBank(const AmOsString&amp; filename, AmBankID&amp; outID) = 0</p> <p>Loads a sound bank from a binary asset file (<code>.ambank</code>).</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>filename</code> The path to the sound bank asset file. Parameter <code>outID</code> The ID of the loaded sound bank. Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#loadsoundbankfrommemory","title":"LoadSoundBankFromMemory","text":"<p>virtual bool LoadSoundBankFromMemory(const char* fileData) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>fileData</code> The sound bank data to be loaded. <p>Note</p> <p>The <code>fileData</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>fileData</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise. <p>virtual bool LoadSoundBankFromMemory(const char* fileData, AmBankID&amp; outID) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>fileData</code> The sound bank data to be loaded. Parameter <code>outID</code> The ID of the loaded sound bank. <p>Note</p> <p>The <code>fileData</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>fileData</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#loadsoundbankfrommemoryview","title":"LoadSoundBankFromMemoryView","text":"<p>virtual bool LoadSoundBankFromMemoryView(AmVoidPtr ptr, AmSize size) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>ptr</code> The pointer to the sound bank data to be loaded. Parameter <code>size</code> The size of the memory to read. <p>Note</p> <p>The <code>fileData</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>fileData</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise. <p>virtual bool LoadSoundBankFromMemoryView(AmVoidPtr ptr, AmSize size, AmBankID&amp; outID) = 0</p> <p>Loads a sound bank from memory.</p> <p>This method queues the sound files in that sound bank for loading. Call <code>StartLoadSoundFiles()</code> to trigger the loading of sound files on a separate thread.</p> Parameter <code>ptr</code> The pointer to the sound bank data to be loaded. Parameter <code>size</code> The size of the memory to read. Parameter <code>outID</code> The ID of the loaded sound bank. <p>Note</p> <p>The <code>ptr</code> pointer should be null terminated.</p> <p>Warning</p> <p>The <code>ptr</code> pointer should remain valid until the sound bank is unloaded.</p> Return <code>true</code> when the sound bank is successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#onnextframe","title":"OnNextFrame","text":"<p>virtual void OnNextFrame(std::function&lt;void(AmTime delta)&gt; callback) const = 0</p> <p>Executes the given callback on the next frame.</p> <p>Note</p> <p>The given callback will be executed at the beginning of the next frame, before doing the actual frame update.</p> Parameter <code>callback</code> The callback to be called when the next frame is ready."},{"location":"api/engine/Engine/#pause","title":"Pause","text":"<p>virtual void Pause(bool pause) const = 0</p> <p>Pauses or resumes all playing sounds and streams.</p> Parameter <code>pause</code> Whether to pause or resume the engine."},{"location":"api/engine/Engine/#play","title":"Play","text":"<p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle) const = 0</p> <p>Plays a switch container associated with the given handle in the World scope.</p> <p>This method is recommended for switch containers with spatialization disabled, since no positional information need to be provided.</p> Parameter <code>handle</code> A handle to the switch container to play. Return The channel the switch container is played on. If the switch container could not be played, or the given handle is invalid, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const AmVec3&amp; location) const = 0</p> <p>Plays a switch container associated with the given handle in the World scope at the given location.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>location</code> The location on which play the switch container. Return The channel the switch container is played on. If the switch container could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a switch container associated with the given handle in the World scope at the          * given location with the given gain.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>location</code> The location on which play the switch container. Parameter <code>userGain</code> The gain of the sound. Return The channel the switch container is played on. If the switch container could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const Entity&amp; entity) const = 0</p> <p>Plays a switch container associated with the given handle in an Entity scope.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>entity</code> The entity which is playing the switch container. Return The channel the switch container is played on. If the switch container could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SwitchContainerHandle handle, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a switch container associated with the given handle in an Entity scope with the          * given gain.</p> Parameter <code>handle</code> A handle to the switch container to play. Parameter <code>entity</code> The entity which is playing the switch container. Parameter <code>userGain</code> The gain of the sound. Return The channel the switch container is played on. If the switch container could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle) const = 0</p> <p>Plays a collection associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the collection to play. Return The channel the collection is played on. If the collection could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const AmVec3&amp; location) const = 0</p> <p>Plays a collection associated with the given handle in the World scope at          * the given location.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>location</code> The location on which play the collection. Return The channel the collection is played on. If the collection could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a collection associated with the given handle in the location with          * the given gain.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>location</code> The location on which play the collection. Parameter <code>userGain</code> The gain of the sound. Return The channel the collection is played on. If the collection could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const Entity&amp; entity) const = 0</p> <p>Plays a collection associated with the given handle in the Entity scope.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>entity</code> The entity which is playing the collection. Return The channel the collection is played on. If the collection could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(CollectionHandle handle, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a collection associated with the given handle in an Entity scope          * with the given gain.</p> Parameter <code>handle</code> A handle to the collection to play. Parameter <code>entity</code> The entity which is playing the collection. Parameter <code>userGain</code> The gain of the sound. Return The channel the collection is played on. If the collection could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle) const = 0</p> <p>Plays a sound associated with the given handle in the World scope.</p> Parameter <code>handle</code> A handle to the sound to play. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const AmVec3&amp; location) const = 0</p> <p>Plays a sound associated with the given handle in the World scope          * at the given location.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>location</code> The location on which play the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a sound associated with the given handle in the World scope          * at the given location with the given gain.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>location</code> The location on which play the sound. Parameter <code>userGain</code> The gain of the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const Entity&amp; entity) const = 0</p> <p>Plays a sound associated with the given sound handle in an Entity scope.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>entity</code> The entity which is playing the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(SoundHandle handle, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a sound associated with the given sound handle in an Entity          * scope with the given gain.</p> Parameter <code>handle</code> A handle to the sound to play. Parameter <code>entity</code> The entity which is playing the sound. Parameter <code>userGain</code> The gain of the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name) const = 0</p> <p>Plays a sound object associated with the given name in the World scope.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires a map lookup internally.</p> Parameter <code>name</code> The name of the sound object to play. Return The channel the sound is played on. If the object could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const AmVec3&amp; location) const = 0</p> <p>Plays a sound object associated with the given name in the World scope.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires a map lookup internally.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>location</code> The location of the sound. Return The channel the sound is played on. If the object could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given name in the World scope.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires a map lookup internally.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>location</code> The location of the sound. Parameter <code>userGain</code> The gain of the sound. Return The channel the sound is played on. If the object could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const Entity&amp; entity) const = 0</p> <p>Plays a sound object associated with the given name in an Entity scope.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires a map lookup internally.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>entity</code> The entity which is playing the sound. Return The channel the sound is played on. If the object could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(const AmString&amp; name, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given name in an Entity scope.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the name as using the name requires a map lookup internally.</p> Parameter <code>name</code> The name of the sound object to play. Parameter <code>entity</code> The entity which is playing the sound. Parameter <code>userGain</code> The gain of the sound. Return The channel the sound is played on. If the object could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id) const = 0</p> <p>Plays a sound object associated with the given ID in the          * World scope, at the origin of the world.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires a map lookup internally.</p> Parameter <code>id</code> The ID of the sound object to play. Return The channel the sound is played on. If the object could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const AmVec3&amp; location) const = 0</p> <p>Plays a sound object associated with the given ID in the          * World scope, at the given location.</p> <p>Note</p> <p>Playing a sound object with its handle is faster than using the ID as using the ID requires a map lookup internally.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>location</code> The location of the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const AmVec3&amp; location, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given ID in the          * World scope, at the given location, and with the given gain.</p> <p>Note</p> <p>Playing an object with its handle is faster than using the ID as using the ID requires a map lookup internally.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>location</code> The location of the sound. Parameter <code>userGain</code> The gain of the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const Entity&amp; entity) const = 0</p> <p>Plays a sound or a collection associated with the given ID in an Entity scope.</p> <p>Note</p> <p>Playing an object with its handle is faster than using the ID as using the ID requires a map lookup internally.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>entity</code> The entity which is playing the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned. <p>[[nodiscard]] virtual Channel Play(AmObjectID id, const Entity&amp; entity, AmReal32 userGain) const = 0</p> <p>Plays a sound object associated with the given ID in an Entity          * scope with the given gain.</p> <p>Note</p> <p>Playing an object with its handle is faster than using the ID as using the ID requires a map lookup internally.</p> Parameter <code>id</code> The ID of the sound object to play. Parameter <code>entity</code> The entity which is playing the sound. Parameter <code>userGain</code> The gain of the sound. Return The channel the sound is played on. If the sound could not be played, an invalid <code>Channel</code> is returned."},{"location":"api/engine/Engine/#registerdefaultplugins","title":"RegisterDefaultPlugins","text":"<p>static bool RegisterDefaultPlugins()</p> <p>Register all default plugins.</p>"},{"location":"api/engine/Engine/#removeentity","title":"RemoveEntity","text":"<p>virtual void RemoveEntity(const Entity* entity) const = 0</p> <p>Removes an <code>Entity</code>.</p> Parameter <code>entity</code> The game entity to be removed. <p>virtual void RemoveEntity(AmEntityID id) const = 0</p> <p>Removes an <code>Entity</code> given its ID.</p> Parameter <code>id</code> The ID of the game entity to be removed."},{"location":"api/engine/Engine/#removeenvironment","title":"RemoveEnvironment","text":"<p>virtual void RemoveEnvironment(const Environment* environment) const = 0</p> <p>Removes an <code>Environment</code>.</p> Parameter <code>environment</code> The game environment to be removed. <p>virtual void RemoveEnvironment(AmEnvironmentID id) const = 0</p> <p>Removes an <code>Environment</code> given its ID.</p> Parameter <code>id</code> The ID of the game environment to be removed."},{"location":"api/engine/Engine/#removelistener","title":"RemoveListener","text":"<p>virtual void RemoveListener(AmListenerID id) const = 0</p> <p>Removes a <code>Listener</code> given its ID.</p> Parameter <code>id</code> The ID of the <code>Listener</code> to be removed. <p>virtual void RemoveListener(const Listener* listener) const = 0</p> <p>Removes a <code>Listener</code> given its handle.</p> Parameter <code>listener</code> The <code>Listener</code> to be removed."},{"location":"api/engine/Engine/#removepluginsearchpath","title":"RemovePluginSearchPath","text":"<p>static void RemovePluginSearchPath(const AmOsString&amp; path)</p> <p>Removes a path from the plugins search paths list.</p> Parameter <code>path</code> The path to remove from the plugins search path list."},{"location":"api/engine/Engine/#removeroom","title":"RemoveRoom","text":"<p>virtual void RemoveRoom(const Room* room) const = 0</p> <p>Removes a <code>Room</code>.</p> Parameter <code>room</code> The room to be removed. <p>virtual void RemoveRoom(AmRoomID id) const = 0</p> <p>Removes a <code>Room</code> given its ID.</p> Parameter <code>id</code> The ID of the room to be removed."},{"location":"api/engine/Engine/#setdefaultlistener","title":"SetDefaultListener","text":"<p>virtual void SetDefaultListener(const Listener* listener) = 0</p> <p>Sets the default sound listener.</p> <p>This method will set the default listener that will render every played sound sources.</p> <p>Note</p> <p>This method takes effect only if the <code>listener_fetch_mode</code> engine setting is set to <code>Default</code>.</p> Parameter <code>listener</code> A valid and initialized <code>Listener</code> instance. <p>virtual void SetDefaultListener(AmListenerID id) = 0</p> <p>Sets the default sound listener.</p> <p>This method will set the default listener that will render every played sound sources.</p> <p>Note</p> <p>This method takes effect only if the <code>listener_fetch_mode</code> engine setting is set to <code>Default</code>.</p> Parameter <code>id</code> The ID of a valid and registered <code>Listener</code>."},{"location":"api/engine/Engine/#setfilesystem","title":"SetFileSystem","text":"<p>virtual void SetFileSystem(FileSystem* fs) = 0</p> <p>Sets a file system implementation to be used by the engine.</p> Parameter <code>fs</code> The file system implementation."},{"location":"api/engine/Engine/#setmastergain","title":"SetMasterGain","text":"<p>virtual void SetMasterGain(AmReal32 gain) const = 0</p> <p>Adjusts the master gain of the mixer.</p> Parameter <code>gain</code> The master gain."},{"location":"api/engine/Engine/#setmute","title":"SetMute","text":"<p>virtual void SetMute(bool mute) const = 0</p> <p>Mutes the engine, but keep processing audio.</p> Parameter <code>mute</code> Whether to mute or unmute the engine."},{"location":"api/engine/Engine/#setrtpcvalue","title":"SetRtpcValue","text":"<p>virtual void SetRtpcValue(RtpcHandle handle, double value) const = 0</p> <p>Set the value of a @c RTPC.</p> Parameter <code>handle</code> The <code>RTPC</code> handle to update. Parameter <code>value</code> The value to set to the <code>RTPC.</code> <p>virtual void SetRtpcValue(AmRtpcID id, double value) const = 0</p> <p>Set the value of a @c RTPC.</p> Parameter <code>id</code> The ID of the <code>RTPC</code> to update. Parameter <code>value</code> The value to set to the <code>RTPC.</code> <p>virtual void SetRtpcValue(const AmString&amp; name, double value) const = 0</p> <p>Set the value of a @c RTPC.</p> Parameter <code>name</code> THe name of the <code>RTPC</code> to update. Parameter <code>value</code> The value to set to the <code>RTPC.</code>"},{"location":"api/engine/Engine/#setswitchstate","title":"SetSwitchState","text":"<p>virtual void SetSwitchState(SwitchHandle handle, AmObjectID stateId) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>handle</code> The handle of the <code>Switch.</code> Parameter <code>stateId</code> The ID of the active state to set. <p>virtual void SetSwitchState(SwitchHandle handle, const AmString&amp; stateName) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>handle</code> The handle of the <code>Switch.</code> Parameter <code>stateName</code> The name of the active state to set. <p>virtual void SetSwitchState(SwitchHandle handle, const SwitchState&amp; state) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>handle</code> The handle of the <code>Switch.</code> Parameter <code>state</code> The active state to set. <p>virtual void SetSwitchState(AmSwitchID id, AmObjectID stateId) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>id</code> The ID of the <code>Switch</code> to update. Parameter <code>stateId</code> The ID of the active state to set. <p>virtual void SetSwitchState(AmSwitchID id, const AmString&amp; stateName) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>id</code> The ID of the <code>Switch</code> to update. Parameter <code>stateName</code> The name of the active state to set. <p>virtual void SetSwitchState(AmSwitchID id, const SwitchState&amp; state) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>id</code> The ID of the <code>Switch</code> to update. Parameter <code>state</code> The active state to set. <p>virtual void SetSwitchState(const AmString&amp; name, AmObjectID stateId) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>name</code> The name of the <code>Switch</code> to update. Parameter <code>stateId</code> The ID of the active state to set. <p>virtual void SetSwitchState(const AmString&amp; name, const AmString&amp; stateName) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>name</code> The name of the <code>Switch</code> to update. Parameter <code>stateName</code> The name of the active state to set. <p>virtual void SetSwitchState(const AmString&amp; name, const SwitchState&amp; state) const = 0</p> <p>Set the active state of the defined @c Switch.</p> Parameter <code>name</code> The name of the <code>Switch</code> to update. Parameter <code>state</code> The active state to set."},{"location":"api/engine/Engine/#startclosefilesystem","title":"StartCloseFileSystem","text":"<p>virtual void StartCloseFileSystem() = 0</p> <p>Closes the file system, usually in a separate thread.</p>"},{"location":"api/engine/Engine/#startloadsoundfiles","title":"StartLoadSoundFiles","text":"<p>virtual void StartLoadSoundFiles() = 0</p> <p>Starts the loading of sound files referenced in loaded sound banks.</p> <p>This process will run in another thread. You must call <code>TryFinalizeLoadSoundFiles()</code> to know when the loading has completed, and to automaticaly release used resources.</p>"},{"location":"api/engine/Engine/#startopenfilesystem","title":"StartOpenFileSystem","text":"<p>virtual void StartOpenFileSystem() = 0</p> <p>Opens the file system, usually in a separate thread.</p>"},{"location":"api/engine/Engine/#stopall","title":"StopAll","text":"<p>virtual void StopAll() const = 0</p> <p>Stops all playing sound objects.</p>"},{"location":"api/engine/Engine/#trigger","title":"Trigger","text":"<p>[[nodiscard]] virtual EventCanceler Trigger(EventHandle handle, const Entity&amp; entity) const = 0</p> <p>Triggers the event associated to the given handle.</p> Parameter <code>handle</code> The handle of the event to trigger. Parameter <code>entity</code> The entity in which trigger the event. Return An <code>EventCanceler</code> object which may be used to cancel the execution of the event.. <p>[[nodiscard]] virtual EventCanceler Trigger(const AmString&amp; name, const Entity&amp; entity) const = 0</p> <p>Triggers the event associated to the given handle.</p> <p>Note</p> <p>Triggering an event with its EventHandle is faster than using the event name as using the name requires a map lookup internally.</p> Parameter <code>name</code> The name of event to trigger. Parameter <code>entity</code> The entity in which trigger the event. Return An <code>EventCanceler</code> object which may be used to cancel the execution of the event.."},{"location":"api/engine/Engine/#tryfinalizeclosefilesystem","title":"TryFinalizeCloseFileSystem","text":"<p>virtual bool TryFinalizeCloseFileSystem() = 0</p> <p>Checks if the file system has been fully closed.</p> <p>This method is helpful when the file system implementation is closed asynchronously. You can use this method to wait until the file system is fully closed.</p> <p>Example</p> <pre><code>// Close the file system\namEngine-&gt;StartCloseFileSystem();\nwhile (!amEngine-&gt;TryFinalizeCloseFileSystem()) {\n    // Wait until the file system is fully closed\n    Thread::Sleep(100);\n}\n// The file system is now closed\n//...\n</code></pre> Return <code>true</code> if the file system has been fully closed, <code>false</code> otherwise."},{"location":"api/engine/Engine/#tryfinalizeloadsoundfiles","title":"TryFinalizeLoadSoundFiles","text":"<p>virtual bool TryFinalizeLoadSoundFiles() = 0</p> <p>Checks if the loading of sound files has been completed, and releases used resources.</p> <p>Note</p> <p>This method should be called after calling <code>StartLoadSoundFiles()</code>.</p> <p>Example</p> <pre><code>// Start loading sound files\namEngine-&gt;StartLoadSoundFiles();\nwhile (!amEngine-&gt;TryFinalizeLoadSoundFiles()) {\n    // Wait for loading to complete\n    Thread::Sleep(100);\n}\n// Sound files have been loaded, and used resources has been released\n</code></pre> Return <code>true</code> when the sound files have been successfully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#tryfinalizeopenfilesystem","title":"TryFinalizeOpenFileSystem","text":"<p>virtual bool TryFinalizeOpenFileSystem() = 0</p> <p>Checks if the file system has been fully loaded.</p> <p>This method is helpful when the file system implementation is loaded asynchronously. You can use this method to wait until the file system is fully loaded before using it.</p> <p>Example</p> <pre><code>// Open the file system\namEngine-&gt;StartOpenFileSystem();\nwhile (!amEngine-&gt;TryFinalizeOpenFileSystem()) {\n    // Wait until the file system is fully loaded\n    Thread::Sleep(100);\n}\n// Use the file system now\n//...\n</code></pre> Return <code>true</code> if the file system has been fully loaded, <code>false</code> otherwise."},{"location":"api/engine/Engine/#unloadsoundbank","title":"UnloadSoundBank","text":"<p>virtual void UnloadSoundBank(const AmOsString&amp; filename) = 0</p> <p>Unloads a sound bank given its filename.</p> Parameter <code>filename</code> The file to unload. <p>virtual void UnloadSoundBank(AmBankID id) = 0</p> <p>Unloads a sound bank given its ID.</p> Parameter <code>id</code> The sound bank id to unload."},{"location":"api/engine/Engine/#unloadsoundbanks","title":"UnloadSoundBanks","text":"<p>virtual void UnloadSoundBanks() = 0</p> <p>Unloads all the loaded sound banks.</p>"},{"location":"api/engine/Engine/#unregisterdefaultplugins","title":"UnregisterDefaultPlugins","text":"<p>static bool UnregisterDefaultPlugins()</p> <p>Unregister all default plugins.</p>"},{"location":"api/engine/Engine/#version","title":"Version","text":"<p>* Version() const</p> <p>Gets the version structure.</p> Return The version string structure"},{"location":"api/engine/PlaybackOutputChannels/","title":"PlaybackOutputChannels","text":"<p>enum class PlaybackOutputChannels : AmUInt16</p> <p>The playback output channel layout of the device.</p> Default = 0 The default output channel layout of the device. <p>This instruct to use the output channel layout provided by the device.</p> Mono = 1 Encodes audio stream as a 1D mono stream. Stereo = 2 Encodes audio stream as a 2D stereo stream. Quad = 4 Encodes audio stream as a 2D quadratic stream. Surround_5_1 = 6 Encodes audio stream as a 2D stream following 5.1 surround specifications. Surround_7_1 = 8 Encodes audio stream as a 2D stream following 7.1 surround specifications."},{"location":"api/engine/PlaybackOutputFormat/","title":"PlaybackOutputFormat","text":"<p>enum class PlaybackOutputFormat : AmUInt16</p> <p>The playback output format of the device.</p> Default = 0 The default output format of the device. <p>This instruct to use the output format provided by the device.</p> UInt8 = 1 Send audio samples as unsigned 8-bit integers to the device. Int16 = 2 Send audio samples as signed 16-bit integers to the device. Int24 = 3 Send audio samples as signed 24-bit integers to the device. Int32 = 4 Send audio samples as signed 32-bit integers to the device. Float32 = 5 Send audio samples as 32-bit floating point values to the device."},{"location":"api/io/","title":"IO","text":"<p>Input/Output API</p>"},{"location":"api/math/","title":"Math","text":"<p>Math libraries and utilities</p>"},{"location":"api/math/#types","title":"Types","text":"Name Description Convolver Implementation of a partitioned FFT convolution algorithm with uniform block size. eFaderState Enumerates the list of states in a fader."},{"location":"api/math/#macros","title":"Macros","text":"Name Description AM_BETWEEN Checks if a value is between a and b. AM_CLAMP Clamps a value between a and b."},{"location":"api/math/#macro-details","title":"Macro Details","text":""},{"location":"api/math/#am_between","title":"AM_BETWEEN","text":"<p>#define AM_BETWEEN(v, a, b)</p> <p>Checks if a value is between a and b.</p> Parameter <code>v</code> The value to check Parameter <code>a</code> The minimum value Parameter <code>b</code> The maximum value Return <code>true</code> if the value is between a and b, <code>false</code> otherwise."},{"location":"api/math/#am_clamp","title":"AM_CLAMP","text":"<p>#define AM_CLAMP(v, a, b)</p> <p>Clamps a value between a and b.</p> Parameter <code>v</code> The value to clamp Parameter <code>a</code> The minimum value Parameter <code>b</code> The maximum value Return The clamped value"},{"location":"api/math/Convolver/","title":"Convolver","text":"<p>class Convolver</p> <p>Implementation of a partitioned FFT convolution algorithm with uniform block size.</p> <p>Some notes on how to use it:</p> <ul> <li> <p>After initialization with an impulse response, subsequent data portions of   arbitrary length can be convolved. The convolver internally can handle   this by using appropriate buffering.</p> </li> <li> <p>The convolver works without \"latency\" (except for the required   processing time, of course), i.e. the output always is the convolved   input for each processing call.</p> </li> <li> <p>The convolver is suitable for real-time processing which means that no   \"unpredictable\" operations like allocations, locking, API calls, etc. are   performed during processing (all necessary allocations and preparations take   place during initialization).</p> </li> </ul>"},{"location":"api/math/Convolver/#functions","title":"Functions","text":"Name Description Convolver Default constructor. ~Convolver Destructor. Init Initializes the convolver. Process Convolves the the given input samples and immediately outputs the result. Reset Resets the convolver state and discards the set impulse response. GetSegmentSize Gets the size of a single convolution segment. GetSegmentCount Gets the number of convolution segments."},{"location":"api/math/Convolver/#function-details","title":"Function Details","text":""},{"location":"api/math/Convolver/#convolver_1","title":"Convolver","text":"<p>Convolver()</p> <p>Default constructor.</p> <p>Creates an uninitialized convolver.</p>"},{"location":"api/math/Convolver/#getsegmentcount","title":"GetSegmentCount","text":"<p>[[nodiscard]] AmSize GetSegmentCount() const</p> <p>Gets the number of convolution segments.</p> Return The number of convolution segments."},{"location":"api/math/Convolver/#getsegmentsize","title":"GetSegmentSize","text":"<p>[[nodiscard]] AmSize GetSegmentSize() const</p> <p>Gets the size of a single convolution segment.</p> Return The size of a single convolution segment."},{"location":"api/math/Convolver/#init","title":"Init","text":"<p>bool Init(AmSize blockSize, const AmAudioSample* ir, AmSize irLen)</p> <p>Initializes the convolver.</p> Parameter <code>blockSize</code> Block size internally used by the convolver (partition size) Parameter <code>ir</code> The impulse response Parameter <code>irLen</code> Length of the impulse response Return <code>true</code> when the convolver is successfully initialized, <code>false</code> otherwise."},{"location":"api/math/Convolver/#process","title":"Process","text":"<p>void Process(const AmAudioSample* input, AmAudioSample* output, AmSize len)</p> <p>Convolves the the given input samples and immediately outputs the result.</p> Parameter <code>input</code> The input samples. Parameter <code>output</code> The convolution result. Parameter <code>len</code> Number of input/output samples to process."},{"location":"api/math/Convolver/#reset","title":"Reset","text":"<p>void Reset()</p> <p>Resets the convolver state and discards the set impulse response.</p> <p>The convolver will need to be initialized again after this call.</p>"},{"location":"api/math/Convolver/#convolver_2","title":"~Convolver","text":"<p>virtual ~Convolver()</p> <p>Destructor.</p> <p>Destroys the convolver and frees all allocated resources.</p>"},{"location":"api/math/eFaderState/","title":"eFaderState","text":"<p>enum eFaderState : AmInt8</p> <p>Enumerates the list of states in a fader.</p> eFaderState_Stopped = -1 The fader is stopped eFaderState_Disabled = 0 The fader is disabled eFaderState_Active = 1 The fader is active and fading"},{"location":"api/memory/","title":"Memory","text":"<p>Memory management and allocation</p>"}]}